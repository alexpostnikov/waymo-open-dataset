// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/motion_metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "waymo_open_dataset/protos/scenario.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
namespace waymo {
namespace open_dataset {
class JointTrajectories;
class JointTrajectoriesDefaultTypeInternal;
extern JointTrajectoriesDefaultTypeInternal _JointTrajectories_default_instance_;
class MotionMetrics;
class MotionMetricsDefaultTypeInternal;
extern MotionMetricsDefaultTypeInternal _MotionMetrics_default_instance_;
class MotionMetricsBundle;
class MotionMetricsBundleDefaultTypeInternal;
extern MotionMetricsBundleDefaultTypeInternal _MotionMetricsBundle_default_instance_;
class MotionMetricsConfig;
class MotionMetricsConfigDefaultTypeInternal;
extern MotionMetricsConfigDefaultTypeInternal _MotionMetricsConfig_default_instance_;
class MotionMetricsConfig_MeasurementStepConfig;
class MotionMetricsConfig_MeasurementStepConfigDefaultTypeInternal;
extern MotionMetricsConfig_MeasurementStepConfigDefaultTypeInternal _MotionMetricsConfig_MeasurementStepConfig_default_instance_;
class MultimodalPrediction;
class MultimodalPredictionDefaultTypeInternal;
extern MultimodalPredictionDefaultTypeInternal _MultimodalPrediction_default_instance_;
class ScenarioPredictions;
class ScenarioPredictionsDefaultTypeInternal;
extern ScenarioPredictionsDefaultTypeInternal _ScenarioPredictions_default_instance_;
class SingleTrajectory;
class SingleTrajectoryDefaultTypeInternal;
extern SingleTrajectoryDefaultTypeInternal _SingleTrajectory_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::JointTrajectories* Arena::CreateMaybeMessage<::waymo::open_dataset::JointTrajectories>(Arena*);
template<> ::waymo::open_dataset::MotionMetrics* Arena::CreateMaybeMessage<::waymo::open_dataset::MotionMetrics>(Arena*);
template<> ::waymo::open_dataset::MotionMetricsBundle* Arena::CreateMaybeMessage<::waymo::open_dataset::MotionMetricsBundle>(Arena*);
template<> ::waymo::open_dataset::MotionMetricsConfig* Arena::CreateMaybeMessage<::waymo::open_dataset::MotionMetricsConfig>(Arena*);
template<> ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig* Arena::CreateMaybeMessage<::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig>(Arena*);
template<> ::waymo::open_dataset::MultimodalPrediction* Arena::CreateMaybeMessage<::waymo::open_dataset::MultimodalPrediction>(Arena*);
template<> ::waymo::open_dataset::ScenarioPredictions* Arena::CreateMaybeMessage<::waymo::open_dataset::ScenarioPredictions>(Arena*);
template<> ::waymo::open_dataset::SingleTrajectory* Arena::CreateMaybeMessage<::waymo::open_dataset::SingleTrajectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

// ===================================================================

class SingleTrajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.SingleTrajectory) */ {
 public:
  SingleTrajectory();
  virtual ~SingleTrajectory();

  SingleTrajectory(const SingleTrajectory& from);
  SingleTrajectory(SingleTrajectory&& from) noexcept
    : SingleTrajectory() {
    *this = ::std::move(from);
  }

  inline SingleTrajectory& operator=(const SingleTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleTrajectory& operator=(SingleTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTrajectory* internal_default_instance() {
    return reinterpret_cast<const SingleTrajectory*>(
               &_SingleTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SingleTrajectory& a, SingleTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleTrajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleTrajectory* New() const final {
    return CreateMaybeMessage<SingleTrajectory>(nullptr);
  }

  SingleTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleTrajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleTrajectory& from);
  void MergeFrom(const SingleTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTrajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.SingleTrajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterXFieldNumber = 2,
    kCenterYFieldNumber = 3,
    kObjectIdFieldNumber = 1,
  };
  // repeated float center_x = 2 [packed = true];
  int center_x_size() const;
  void clear_center_x();
  float center_x(int index) const;
  void set_center_x(int index, float value);
  void add_center_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      center_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_center_x();

  // repeated float center_y = 3 [packed = true];
  int center_y_size() const;
  void clear_center_y();
  float center_y(int index) const;
  void set_center_y(int index, float value);
  void add_center_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      center_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_center_y();

  // optional int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int32 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.SingleTrajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > center_x_;
  mutable std::atomic<int> _center_x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > center_y_;
  mutable std::atomic<int> _center_y_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_id_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class JointTrajectories :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.JointTrajectories) */ {
 public:
  JointTrajectories();
  virtual ~JointTrajectories();

  JointTrajectories(const JointTrajectories& from);
  JointTrajectories(JointTrajectories&& from) noexcept
    : JointTrajectories() {
    *this = ::std::move(from);
  }

  inline JointTrajectories& operator=(const JointTrajectories& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointTrajectories& operator=(JointTrajectories&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointTrajectories& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointTrajectories* internal_default_instance() {
    return reinterpret_cast<const JointTrajectories*>(
               &_JointTrajectories_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JointTrajectories& a, JointTrajectories& b) {
    a.Swap(&b);
  }
  inline void Swap(JointTrajectories* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointTrajectories* New() const final {
    return CreateMaybeMessage<JointTrajectories>(nullptr);
  }

  JointTrajectories* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointTrajectories>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointTrajectories& from);
  void MergeFrom(const JointTrajectories& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointTrajectories* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.JointTrajectories";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoriesFieldNumber = 2,
    kConfidenceFieldNumber = 3,
  };
  // repeated .waymo.open_dataset.SingleTrajectory trajectories = 2;
  int trajectories_size() const;
  void clear_trajectories();
  ::waymo::open_dataset::SingleTrajectory* mutable_trajectories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleTrajectory >*
      mutable_trajectories();
  const ::waymo::open_dataset::SingleTrajectory& trajectories(int index) const;
  ::waymo::open_dataset::SingleTrajectory* add_trajectories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleTrajectory >&
      trajectories() const;

  // optional float confidence = 3;
  bool has_confidence() const;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.JointTrajectories)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleTrajectory > trajectories_;
  float confidence_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MultimodalPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MultimodalPrediction) */ {
 public:
  MultimodalPrediction();
  virtual ~MultimodalPrediction();

  MultimodalPrediction(const MultimodalPrediction& from);
  MultimodalPrediction(MultimodalPrediction&& from) noexcept
    : MultimodalPrediction() {
    *this = ::std::move(from);
  }

  inline MultimodalPrediction& operator=(const MultimodalPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultimodalPrediction& operator=(MultimodalPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultimodalPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultimodalPrediction* internal_default_instance() {
    return reinterpret_cast<const MultimodalPrediction*>(
               &_MultimodalPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MultimodalPrediction& a, MultimodalPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(MultimodalPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultimodalPrediction* New() const final {
    return CreateMaybeMessage<MultimodalPrediction>(nullptr);
  }

  MultimodalPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultimodalPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultimodalPrediction& from);
  void MergeFrom(const MultimodalPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultimodalPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MultimodalPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointPredictionsFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.JointTrajectories joint_predictions = 1;
  int joint_predictions_size() const;
  void clear_joint_predictions();
  ::waymo::open_dataset::JointTrajectories* mutable_joint_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::JointTrajectories >*
      mutable_joint_predictions();
  const ::waymo::open_dataset::JointTrajectories& joint_predictions(int index) const;
  ::waymo::open_dataset::JointTrajectories* add_joint_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::JointTrajectories >&
      joint_predictions() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MultimodalPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::JointTrajectories > joint_predictions_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ScenarioPredictions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.ScenarioPredictions) */ {
 public:
  ScenarioPredictions();
  virtual ~ScenarioPredictions();

  ScenarioPredictions(const ScenarioPredictions& from);
  ScenarioPredictions(ScenarioPredictions&& from) noexcept
    : ScenarioPredictions() {
    *this = ::std::move(from);
  }

  inline ScenarioPredictions& operator=(const ScenarioPredictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioPredictions& operator=(ScenarioPredictions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioPredictions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScenarioPredictions* internal_default_instance() {
    return reinterpret_cast<const ScenarioPredictions*>(
               &_ScenarioPredictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScenarioPredictions& a, ScenarioPredictions& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioPredictions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioPredictions* New() const final {
    return CreateMaybeMessage<ScenarioPredictions>(nullptr);
  }

  ScenarioPredictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioPredictions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioPredictions& from);
  void MergeFrom(const ScenarioPredictions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioPredictions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.ScenarioPredictions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiModalPredictionsFieldNumber = 2,
    kScenarioIdFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.MultimodalPrediction multi_modal_predictions = 2;
  int multi_modal_predictions_size() const;
  void clear_multi_modal_predictions();
  ::waymo::open_dataset::MultimodalPrediction* mutable_multi_modal_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MultimodalPrediction >*
      mutable_multi_modal_predictions();
  const ::waymo::open_dataset::MultimodalPrediction& multi_modal_predictions(int index) const;
  ::waymo::open_dataset::MultimodalPrediction* add_multi_modal_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MultimodalPrediction >&
      multi_modal_predictions() const;

  // optional string scenario_id = 1;
  bool has_scenario_id() const;
  void clear_scenario_id();
  const std::string& scenario_id() const;
  void set_scenario_id(const std::string& value);
  void set_scenario_id(std::string&& value);
  void set_scenario_id(const char* value);
  void set_scenario_id(const char* value, size_t size);
  std::string* mutable_scenario_id();
  std::string* release_scenario_id();
  void set_allocated_scenario_id(std::string* scenario_id);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.ScenarioPredictions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MultimodalPrediction > multi_modal_predictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_id_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MotionMetricsBundle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MotionMetricsBundle) */ {
 public:
  MotionMetricsBundle();
  virtual ~MotionMetricsBundle();

  MotionMetricsBundle(const MotionMetricsBundle& from);
  MotionMetricsBundle(MotionMetricsBundle&& from) noexcept
    : MotionMetricsBundle() {
    *this = ::std::move(from);
  }

  inline MotionMetricsBundle& operator=(const MotionMetricsBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionMetricsBundle& operator=(MotionMetricsBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionMetricsBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionMetricsBundle* internal_default_instance() {
    return reinterpret_cast<const MotionMetricsBundle*>(
               &_MotionMetricsBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MotionMetricsBundle& a, MotionMetricsBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionMetricsBundle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionMetricsBundle* New() const final {
    return CreateMaybeMessage<MotionMetricsBundle>(nullptr);
  }

  MotionMetricsBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionMetricsBundle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionMetricsBundle& from);
  void MergeFrom(const MotionMetricsBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionMetricsBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MotionMetricsBundle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinAdeFieldNumber = 1,
    kMinFdeFieldNumber = 2,
    kMissRateFieldNumber = 3,
    kOverlapRateFieldNumber = 4,
    kMeanAveragePrecisionFieldNumber = 5,
    kMeasurementStepFieldNumber = 6,
    kObjectFilterFieldNumber = 7,
    kSoftMeanAveragePrecisionFieldNumber = 8,
  };
  // optional float min_ade = 1;
  bool has_min_ade() const;
  void clear_min_ade();
  float min_ade() const;
  void set_min_ade(float value);

  // optional float min_fde = 2;
  bool has_min_fde() const;
  void clear_min_fde();
  float min_fde() const;
  void set_min_fde(float value);

  // optional float miss_rate = 3;
  bool has_miss_rate() const;
  void clear_miss_rate();
  float miss_rate() const;
  void set_miss_rate(float value);

  // optional float overlap_rate = 4;
  bool has_overlap_rate() const;
  void clear_overlap_rate();
  float overlap_rate() const;
  void set_overlap_rate(float value);

  // optional float mean_average_precision = 5;
  bool has_mean_average_precision() const;
  void clear_mean_average_precision();
  float mean_average_precision() const;
  void set_mean_average_precision(float value);

  // optional int32 measurement_step = 6;
  bool has_measurement_step() const;
  void clear_measurement_step();
  ::PROTOBUF_NAMESPACE_ID::int32 measurement_step() const;
  void set_measurement_step(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .waymo.open_dataset.Track.ObjectType object_filter = 7;
  bool has_object_filter() const;
  void clear_object_filter();
  ::waymo::open_dataset::Track_ObjectType object_filter() const;
  void set_object_filter(::waymo::open_dataset::Track_ObjectType value);

  // optional float soft_mean_average_precision = 8;
  bool has_soft_mean_average_precision() const;
  void clear_soft_mean_average_precision();
  float soft_mean_average_precision() const;
  void set_soft_mean_average_precision(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MotionMetricsBundle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float min_ade_;
  float min_fde_;
  float miss_rate_;
  float overlap_rate_;
  float mean_average_precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 measurement_step_;
  int object_filter_;
  float soft_mean_average_precision_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MotionMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MotionMetrics) */ {
 public:
  MotionMetrics();
  virtual ~MotionMetrics();

  MotionMetrics(const MotionMetrics& from);
  MotionMetrics(MotionMetrics&& from) noexcept
    : MotionMetrics() {
    *this = ::std::move(from);
  }

  inline MotionMetrics& operator=(const MotionMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionMetrics& operator=(MotionMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionMetrics* internal_default_instance() {
    return reinterpret_cast<const MotionMetrics*>(
               &_MotionMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MotionMetrics& a, MotionMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionMetrics* New() const final {
    return CreateMaybeMessage<MotionMetrics>(nullptr);
  }

  MotionMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionMetrics& from);
  void MergeFrom(const MotionMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MotionMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsBundlesFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.MotionMetricsBundle metrics_bundles = 1;
  int metrics_bundles_size() const;
  void clear_metrics_bundles();
  ::waymo::open_dataset::MotionMetricsBundle* mutable_metrics_bundles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsBundle >*
      mutable_metrics_bundles();
  const ::waymo::open_dataset::MotionMetricsBundle& metrics_bundles(int index) const;
  ::waymo::open_dataset::MotionMetricsBundle* add_metrics_bundles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsBundle >&
      metrics_bundles() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MotionMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsBundle > metrics_bundles_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MotionMetricsConfig_MeasurementStepConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig) */ {
 public:
  MotionMetricsConfig_MeasurementStepConfig();
  virtual ~MotionMetricsConfig_MeasurementStepConfig();

  MotionMetricsConfig_MeasurementStepConfig(const MotionMetricsConfig_MeasurementStepConfig& from);
  MotionMetricsConfig_MeasurementStepConfig(MotionMetricsConfig_MeasurementStepConfig&& from) noexcept
    : MotionMetricsConfig_MeasurementStepConfig() {
    *this = ::std::move(from);
  }

  inline MotionMetricsConfig_MeasurementStepConfig& operator=(const MotionMetricsConfig_MeasurementStepConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionMetricsConfig_MeasurementStepConfig& operator=(MotionMetricsConfig_MeasurementStepConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionMetricsConfig_MeasurementStepConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionMetricsConfig_MeasurementStepConfig* internal_default_instance() {
    return reinterpret_cast<const MotionMetricsConfig_MeasurementStepConfig*>(
               &_MotionMetricsConfig_MeasurementStepConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MotionMetricsConfig_MeasurementStepConfig& a, MotionMetricsConfig_MeasurementStepConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionMetricsConfig_MeasurementStepConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionMetricsConfig_MeasurementStepConfig* New() const final {
    return CreateMaybeMessage<MotionMetricsConfig_MeasurementStepConfig>(nullptr);
  }

  MotionMetricsConfig_MeasurementStepConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionMetricsConfig_MeasurementStepConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionMetricsConfig_MeasurementStepConfig& from);
  void MergeFrom(const MotionMetricsConfig_MeasurementStepConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionMetricsConfig_MeasurementStepConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementStepFieldNumber = 1,
    kLateralMissThresholdFieldNumber = 2,
    kLongitudinalMissThresholdFieldNumber = 3,
  };
  // optional int32 measurement_step = 1;
  bool has_measurement_step() const;
  void clear_measurement_step();
  ::PROTOBUF_NAMESPACE_ID::int32 measurement_step() const;
  void set_measurement_step(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float lateral_miss_threshold = 2;
  bool has_lateral_miss_threshold() const;
  void clear_lateral_miss_threshold();
  float lateral_miss_threshold() const;
  void set_lateral_miss_threshold(float value);

  // optional float longitudinal_miss_threshold = 3;
  bool has_longitudinal_miss_threshold() const;
  void clear_longitudinal_miss_threshold();
  float longitudinal_miss_threshold() const;
  void set_longitudinal_miss_threshold(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 measurement_step_;
  float lateral_miss_threshold_;
  float longitudinal_miss_threshold_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class MotionMetricsConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MotionMetricsConfig) */ {
 public:
  MotionMetricsConfig();
  virtual ~MotionMetricsConfig();

  MotionMetricsConfig(const MotionMetricsConfig& from);
  MotionMetricsConfig(MotionMetricsConfig&& from) noexcept
    : MotionMetricsConfig() {
    *this = ::std::move(from);
  }

  inline MotionMetricsConfig& operator=(const MotionMetricsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionMetricsConfig& operator=(MotionMetricsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionMetricsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionMetricsConfig* internal_default_instance() {
    return reinterpret_cast<const MotionMetricsConfig*>(
               &_MotionMetricsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MotionMetricsConfig& a, MotionMetricsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionMetricsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionMetricsConfig* New() const final {
    return CreateMaybeMessage<MotionMetricsConfig>(nullptr);
  }

  MotionMetricsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionMetricsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionMetricsConfig& from);
  void MergeFrom(const MotionMetricsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionMetricsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MotionMetricsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MotionMetricsConfig_MeasurementStepConfig MeasurementStepConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kStepConfigurationsFieldNumber = 9,
    kMaxPredictionsFieldNumber = 10,
    kTrackStepsPerSecondFieldNumber = 1,
    kPredictionStepsPerSecondFieldNumber = 2,
    kTrackHistorySamplesFieldNumber = 3,
    kTrackFutureSamplesFieldNumber = 4,
    kSpeedLowerBoundFieldNumber = 5,
    kSpeedUpperBoundFieldNumber = 6,
    kSpeedScaleLowerFieldNumber = 7,
    kSpeedScaleUpperFieldNumber = 8,
  };
  // repeated .waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig step_configurations = 9;
  int step_configurations_size() const;
  void clear_step_configurations();
  ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig* mutable_step_configurations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig >*
      mutable_step_configurations();
  const ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig& step_configurations(int index) const;
  ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig* add_step_configurations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig >&
      step_configurations() const;

  // optional int32 max_predictions = 10 [default = 6];
  bool has_max_predictions() const;
  void clear_max_predictions();
  ::PROTOBUF_NAMESPACE_ID::int32 max_predictions() const;
  void set_max_predictions(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 track_steps_per_second = 1 [default = 10];
  bool has_track_steps_per_second() const;
  void clear_track_steps_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 track_steps_per_second() const;
  void set_track_steps_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 prediction_steps_per_second = 2 [default = 2];
  bool has_prediction_steps_per_second() const;
  void clear_prediction_steps_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 prediction_steps_per_second() const;
  void set_prediction_steps_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 track_history_samples = 3 [default = 10];
  bool has_track_history_samples() const;
  void clear_track_history_samples();
  ::PROTOBUF_NAMESPACE_ID::int32 track_history_samples() const;
  void set_track_history_samples(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 track_future_samples = 4 [default = 80];
  bool has_track_future_samples() const;
  void clear_track_future_samples();
  ::PROTOBUF_NAMESPACE_ID::int32 track_future_samples() const;
  void set_track_future_samples(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional float speed_lower_bound = 5 [default = 1.4];
  bool has_speed_lower_bound() const;
  void clear_speed_lower_bound();
  float speed_lower_bound() const;
  void set_speed_lower_bound(float value);

  // optional float speed_upper_bound = 6 [default = 11];
  bool has_speed_upper_bound() const;
  void clear_speed_upper_bound();
  float speed_upper_bound() const;
  void set_speed_upper_bound(float value);

  // optional float speed_scale_lower = 7 [default = 0.5];
  bool has_speed_scale_lower() const;
  void clear_speed_scale_lower();
  float speed_scale_lower() const;
  void set_speed_scale_lower(float value);

  // optional float speed_scale_upper = 8 [default = 1];
  bool has_speed_scale_upper() const;
  void clear_speed_scale_upper();
  float speed_scale_upper() const;
  void set_speed_scale_upper(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MotionMetricsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig > step_configurations_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_predictions_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_steps_per_second_;
  ::PROTOBUF_NAMESPACE_ID::int32 prediction_steps_per_second_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_history_samples_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_future_samples_;
  float speed_lower_bound_;
  float speed_upper_bound_;
  float speed_scale_lower_;
  float speed_scale_upper_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleTrajectory

// optional int32 object_id = 1;
inline bool SingleTrajectory::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleTrajectory::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleTrajectory::object_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SingleTrajectory.object_id)
  return object_id_;
}
inline void SingleTrajectory::set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SingleTrajectory.object_id)
}

// repeated float center_x = 2 [packed = true];
inline int SingleTrajectory::center_x_size() const {
  return center_x_.size();
}
inline void SingleTrajectory::clear_center_x() {
  center_x_.Clear();
}
inline float SingleTrajectory::center_x(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SingleTrajectory.center_x)
  return center_x_.Get(index);
}
inline void SingleTrajectory::set_center_x(int index, float value) {
  center_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SingleTrajectory.center_x)
}
inline void SingleTrajectory::add_center_x(float value) {
  center_x_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.SingleTrajectory.center_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SingleTrajectory::center_x() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.SingleTrajectory.center_x)
  return center_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SingleTrajectory::mutable_center_x() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.SingleTrajectory.center_x)
  return &center_x_;
}

// repeated float center_y = 3 [packed = true];
inline int SingleTrajectory::center_y_size() const {
  return center_y_.size();
}
inline void SingleTrajectory::clear_center_y() {
  center_y_.Clear();
}
inline float SingleTrajectory::center_y(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SingleTrajectory.center_y)
  return center_y_.Get(index);
}
inline void SingleTrajectory::set_center_y(int index, float value) {
  center_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SingleTrajectory.center_y)
}
inline void SingleTrajectory::add_center_y(float value) {
  center_y_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.SingleTrajectory.center_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SingleTrajectory::center_y() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.SingleTrajectory.center_y)
  return center_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SingleTrajectory::mutable_center_y() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.SingleTrajectory.center_y)
  return &center_y_;
}

// -------------------------------------------------------------------

// JointTrajectories

// repeated .waymo.open_dataset.SingleTrajectory trajectories = 2;
inline int JointTrajectories::trajectories_size() const {
  return trajectories_.size();
}
inline void JointTrajectories::clear_trajectories() {
  trajectories_.Clear();
}
inline ::waymo::open_dataset::SingleTrajectory* JointTrajectories::mutable_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.JointTrajectories.trajectories)
  return trajectories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleTrajectory >*
JointTrajectories::mutable_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.JointTrajectories.trajectories)
  return &trajectories_;
}
inline const ::waymo::open_dataset::SingleTrajectory& JointTrajectories::trajectories(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.JointTrajectories.trajectories)
  return trajectories_.Get(index);
}
inline ::waymo::open_dataset::SingleTrajectory* JointTrajectories::add_trajectories() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.JointTrajectories.trajectories)
  return trajectories_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleTrajectory >&
JointTrajectories::trajectories() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.JointTrajectories.trajectories)
  return trajectories_;
}

// optional float confidence = 3;
inline bool JointTrajectories::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JointTrajectories::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float JointTrajectories::confidence() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.JointTrajectories.confidence)
  return confidence_;
}
inline void JointTrajectories::set_confidence(float value) {
  _has_bits_[0] |= 0x00000001u;
  confidence_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.JointTrajectories.confidence)
}

// -------------------------------------------------------------------

// MultimodalPrediction

// repeated .waymo.open_dataset.JointTrajectories joint_predictions = 1;
inline int MultimodalPrediction::joint_predictions_size() const {
  return joint_predictions_.size();
}
inline void MultimodalPrediction::clear_joint_predictions() {
  joint_predictions_.Clear();
}
inline ::waymo::open_dataset::JointTrajectories* MultimodalPrediction::mutable_joint_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MultimodalPrediction.joint_predictions)
  return joint_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::JointTrajectories >*
MultimodalPrediction::mutable_joint_predictions() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MultimodalPrediction.joint_predictions)
  return &joint_predictions_;
}
inline const ::waymo::open_dataset::JointTrajectories& MultimodalPrediction::joint_predictions(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MultimodalPrediction.joint_predictions)
  return joint_predictions_.Get(index);
}
inline ::waymo::open_dataset::JointTrajectories* MultimodalPrediction::add_joint_predictions() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MultimodalPrediction.joint_predictions)
  return joint_predictions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::JointTrajectories >&
MultimodalPrediction::joint_predictions() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MultimodalPrediction.joint_predictions)
  return joint_predictions_;
}

// -------------------------------------------------------------------

// ScenarioPredictions

// optional string scenario_id = 1;
inline bool ScenarioPredictions::has_scenario_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenarioPredictions::clear_scenario_id() {
  scenario_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScenarioPredictions::scenario_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ScenarioPredictions.scenario_id)
  return scenario_id_.GetNoArena();
}
inline void ScenarioPredictions::set_scenario_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ScenarioPredictions.scenario_id)
}
inline void ScenarioPredictions::set_scenario_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.ScenarioPredictions.scenario_id)
}
inline void ScenarioPredictions::set_scenario_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.ScenarioPredictions.scenario_id)
}
inline void ScenarioPredictions::set_scenario_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.ScenarioPredictions.scenario_id)
}
inline std::string* ScenarioPredictions::mutable_scenario_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ScenarioPredictions.scenario_id)
  return scenario_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScenarioPredictions::release_scenario_id() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.ScenarioPredictions.scenario_id)
  if (!has_scenario_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scenario_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioPredictions::set_allocated_scenario_id(std::string* scenario_id) {
  if (scenario_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scenario_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario_id);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.ScenarioPredictions.scenario_id)
}

// repeated .waymo.open_dataset.MultimodalPrediction multi_modal_predictions = 2;
inline int ScenarioPredictions::multi_modal_predictions_size() const {
  return multi_modal_predictions_.size();
}
inline void ScenarioPredictions::clear_multi_modal_predictions() {
  multi_modal_predictions_.Clear();
}
inline ::waymo::open_dataset::MultimodalPrediction* ScenarioPredictions::mutable_multi_modal_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ScenarioPredictions.multi_modal_predictions)
  return multi_modal_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MultimodalPrediction >*
ScenarioPredictions::mutable_multi_modal_predictions() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.ScenarioPredictions.multi_modal_predictions)
  return &multi_modal_predictions_;
}
inline const ::waymo::open_dataset::MultimodalPrediction& ScenarioPredictions::multi_modal_predictions(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ScenarioPredictions.multi_modal_predictions)
  return multi_modal_predictions_.Get(index);
}
inline ::waymo::open_dataset::MultimodalPrediction* ScenarioPredictions::add_multi_modal_predictions() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.ScenarioPredictions.multi_modal_predictions)
  return multi_modal_predictions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MultimodalPrediction >&
ScenarioPredictions::multi_modal_predictions() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.ScenarioPredictions.multi_modal_predictions)
  return multi_modal_predictions_;
}

// -------------------------------------------------------------------

// MotionMetricsBundle

// optional .waymo.open_dataset.Track.ObjectType object_filter = 7;
inline bool MotionMetricsBundle::has_object_filter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MotionMetricsBundle::clear_object_filter() {
  object_filter_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::waymo::open_dataset::Track_ObjectType MotionMetricsBundle::object_filter() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.object_filter)
  return static_cast< ::waymo::open_dataset::Track_ObjectType >(object_filter_);
}
inline void MotionMetricsBundle::set_object_filter(::waymo::open_dataset::Track_ObjectType value) {
  assert(::waymo::open_dataset::Track_ObjectType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  object_filter_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.object_filter)
}

// optional int32 measurement_step = 6;
inline bool MotionMetricsBundle::has_measurement_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionMetricsBundle::clear_measurement_step() {
  measurement_step_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionMetricsBundle::measurement_step() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.measurement_step)
  return measurement_step_;
}
inline void MotionMetricsBundle::set_measurement_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  measurement_step_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.measurement_step)
}

// optional float min_ade = 1;
inline bool MotionMetricsBundle::has_min_ade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionMetricsBundle::clear_min_ade() {
  min_ade_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float MotionMetricsBundle::min_ade() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.min_ade)
  return min_ade_;
}
inline void MotionMetricsBundle::set_min_ade(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_ade_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.min_ade)
}

// optional float min_fde = 2;
inline bool MotionMetricsBundle::has_min_fde() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionMetricsBundle::clear_min_fde() {
  min_fde_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MotionMetricsBundle::min_fde() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.min_fde)
  return min_fde_;
}
inline void MotionMetricsBundle::set_min_fde(float value) {
  _has_bits_[0] |= 0x00000002u;
  min_fde_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.min_fde)
}

// optional float miss_rate = 3;
inline bool MotionMetricsBundle::has_miss_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionMetricsBundle::clear_miss_rate() {
  miss_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MotionMetricsBundle::miss_rate() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.miss_rate)
  return miss_rate_;
}
inline void MotionMetricsBundle::set_miss_rate(float value) {
  _has_bits_[0] |= 0x00000004u;
  miss_rate_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.miss_rate)
}

// optional float overlap_rate = 4;
inline bool MotionMetricsBundle::has_overlap_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionMetricsBundle::clear_overlap_rate() {
  overlap_rate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float MotionMetricsBundle::overlap_rate() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.overlap_rate)
  return overlap_rate_;
}
inline void MotionMetricsBundle::set_overlap_rate(float value) {
  _has_bits_[0] |= 0x00000008u;
  overlap_rate_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.overlap_rate)
}

// optional float mean_average_precision = 5;
inline bool MotionMetricsBundle::has_mean_average_precision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionMetricsBundle::clear_mean_average_precision() {
  mean_average_precision_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float MotionMetricsBundle::mean_average_precision() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.mean_average_precision)
  return mean_average_precision_;
}
inline void MotionMetricsBundle::set_mean_average_precision(float value) {
  _has_bits_[0] |= 0x00000010u;
  mean_average_precision_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.mean_average_precision)
}

// optional float soft_mean_average_precision = 8;
inline bool MotionMetricsBundle::has_soft_mean_average_precision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MotionMetricsBundle::clear_soft_mean_average_precision() {
  soft_mean_average_precision_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float MotionMetricsBundle::soft_mean_average_precision() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsBundle.soft_mean_average_precision)
  return soft_mean_average_precision_;
}
inline void MotionMetricsBundle::set_soft_mean_average_precision(float value) {
  _has_bits_[0] |= 0x00000080u;
  soft_mean_average_precision_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsBundle.soft_mean_average_precision)
}

// -------------------------------------------------------------------

// MotionMetrics

// repeated .waymo.open_dataset.MotionMetricsBundle metrics_bundles = 1;
inline int MotionMetrics::metrics_bundles_size() const {
  return metrics_bundles_.size();
}
inline void MotionMetrics::clear_metrics_bundles() {
  metrics_bundles_.Clear();
}
inline ::waymo::open_dataset::MotionMetricsBundle* MotionMetrics::mutable_metrics_bundles(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionMetrics.metrics_bundles)
  return metrics_bundles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsBundle >*
MotionMetrics::mutable_metrics_bundles() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MotionMetrics.metrics_bundles)
  return &metrics_bundles_;
}
inline const ::waymo::open_dataset::MotionMetricsBundle& MotionMetrics::metrics_bundles(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetrics.metrics_bundles)
  return metrics_bundles_.Get(index);
}
inline ::waymo::open_dataset::MotionMetricsBundle* MotionMetrics::add_metrics_bundles() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MotionMetrics.metrics_bundles)
  return metrics_bundles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsBundle >&
MotionMetrics::metrics_bundles() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MotionMetrics.metrics_bundles)
  return metrics_bundles_;
}

// -------------------------------------------------------------------

// MotionMetricsConfig_MeasurementStepConfig

// optional int32 measurement_step = 1;
inline bool MotionMetricsConfig_MeasurementStepConfig::has_measurement_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionMetricsConfig_MeasurementStepConfig::clear_measurement_step() {
  measurement_step_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionMetricsConfig_MeasurementStepConfig::measurement_step() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig.measurement_step)
  return measurement_step_;
}
inline void MotionMetricsConfig_MeasurementStepConfig::set_measurement_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  measurement_step_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig.measurement_step)
}

// optional float lateral_miss_threshold = 2;
inline bool MotionMetricsConfig_MeasurementStepConfig::has_lateral_miss_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionMetricsConfig_MeasurementStepConfig::clear_lateral_miss_threshold() {
  lateral_miss_threshold_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float MotionMetricsConfig_MeasurementStepConfig::lateral_miss_threshold() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig.lateral_miss_threshold)
  return lateral_miss_threshold_;
}
inline void MotionMetricsConfig_MeasurementStepConfig::set_lateral_miss_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  lateral_miss_threshold_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig.lateral_miss_threshold)
}

// optional float longitudinal_miss_threshold = 3;
inline bool MotionMetricsConfig_MeasurementStepConfig::has_longitudinal_miss_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionMetricsConfig_MeasurementStepConfig::clear_longitudinal_miss_threshold() {
  longitudinal_miss_threshold_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float MotionMetricsConfig_MeasurementStepConfig::longitudinal_miss_threshold() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig.longitudinal_miss_threshold)
  return longitudinal_miss_threshold_;
}
inline void MotionMetricsConfig_MeasurementStepConfig::set_longitudinal_miss_threshold(float value) {
  _has_bits_[0] |= 0x00000004u;
  longitudinal_miss_threshold_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig.longitudinal_miss_threshold)
}

// -------------------------------------------------------------------

// MotionMetricsConfig

// optional int32 track_steps_per_second = 1 [default = 10];
inline bool MotionMetricsConfig::has_track_steps_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionMetricsConfig::clear_track_steps_per_second() {
  track_steps_per_second_ = 10;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionMetricsConfig::track_steps_per_second() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.track_steps_per_second)
  return track_steps_per_second_;
}
inline void MotionMetricsConfig::set_track_steps_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  track_steps_per_second_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.track_steps_per_second)
}

// optional int32 prediction_steps_per_second = 2 [default = 2];
inline bool MotionMetricsConfig::has_prediction_steps_per_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionMetricsConfig::clear_prediction_steps_per_second() {
  prediction_steps_per_second_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionMetricsConfig::prediction_steps_per_second() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.prediction_steps_per_second)
  return prediction_steps_per_second_;
}
inline void MotionMetricsConfig::set_prediction_steps_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  prediction_steps_per_second_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.prediction_steps_per_second)
}

// optional int32 track_history_samples = 3 [default = 10];
inline bool MotionMetricsConfig::has_track_history_samples() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionMetricsConfig::clear_track_history_samples() {
  track_history_samples_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionMetricsConfig::track_history_samples() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.track_history_samples)
  return track_history_samples_;
}
inline void MotionMetricsConfig::set_track_history_samples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  track_history_samples_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.track_history_samples)
}

// optional int32 track_future_samples = 4 [default = 80];
inline bool MotionMetricsConfig::has_track_future_samples() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionMetricsConfig::clear_track_future_samples() {
  track_future_samples_ = 80;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionMetricsConfig::track_future_samples() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.track_future_samples)
  return track_future_samples_;
}
inline void MotionMetricsConfig::set_track_future_samples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  track_future_samples_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.track_future_samples)
}

// optional float speed_lower_bound = 5 [default = 1.4];
inline bool MotionMetricsConfig::has_speed_lower_bound() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionMetricsConfig::clear_speed_lower_bound() {
  speed_lower_bound_ = 1.4f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float MotionMetricsConfig::speed_lower_bound() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.speed_lower_bound)
  return speed_lower_bound_;
}
inline void MotionMetricsConfig::set_speed_lower_bound(float value) {
  _has_bits_[0] |= 0x00000020u;
  speed_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.speed_lower_bound)
}

// optional float speed_upper_bound = 6 [default = 11];
inline bool MotionMetricsConfig::has_speed_upper_bound() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MotionMetricsConfig::clear_speed_upper_bound() {
  speed_upper_bound_ = 11;
  _has_bits_[0] &= ~0x00000040u;
}
inline float MotionMetricsConfig::speed_upper_bound() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.speed_upper_bound)
  return speed_upper_bound_;
}
inline void MotionMetricsConfig::set_speed_upper_bound(float value) {
  _has_bits_[0] |= 0x00000040u;
  speed_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.speed_upper_bound)
}

// optional float speed_scale_lower = 7 [default = 0.5];
inline bool MotionMetricsConfig::has_speed_scale_lower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MotionMetricsConfig::clear_speed_scale_lower() {
  speed_scale_lower_ = 0.5f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float MotionMetricsConfig::speed_scale_lower() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.speed_scale_lower)
  return speed_scale_lower_;
}
inline void MotionMetricsConfig::set_speed_scale_lower(float value) {
  _has_bits_[0] |= 0x00000080u;
  speed_scale_lower_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.speed_scale_lower)
}

// optional float speed_scale_upper = 8 [default = 1];
inline bool MotionMetricsConfig::has_speed_scale_upper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MotionMetricsConfig::clear_speed_scale_upper() {
  speed_scale_upper_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline float MotionMetricsConfig::speed_scale_upper() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.speed_scale_upper)
  return speed_scale_upper_;
}
inline void MotionMetricsConfig::set_speed_scale_upper(float value) {
  _has_bits_[0] |= 0x00000100u;
  speed_scale_upper_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.speed_scale_upper)
}

// repeated .waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig step_configurations = 9;
inline int MotionMetricsConfig::step_configurations_size() const {
  return step_configurations_.size();
}
inline void MotionMetricsConfig::clear_step_configurations() {
  step_configurations_.Clear();
}
inline ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig* MotionMetricsConfig::mutable_step_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionMetricsConfig.step_configurations)
  return step_configurations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig >*
MotionMetricsConfig::mutable_step_configurations() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MotionMetricsConfig.step_configurations)
  return &step_configurations_;
}
inline const ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig& MotionMetricsConfig::step_configurations(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.step_configurations)
  return step_configurations_.Get(index);
}
inline ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig* MotionMetricsConfig::add_step_configurations() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MotionMetricsConfig.step_configurations)
  return step_configurations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig >&
MotionMetricsConfig::step_configurations() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MotionMetricsConfig.step_configurations)
  return step_configurations_;
}

// optional int32 max_predictions = 10 [default = 6];
inline bool MotionMetricsConfig::has_max_predictions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionMetricsConfig::clear_max_predictions() {
  max_predictions_ = 6;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MotionMetricsConfig::max_predictions() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionMetricsConfig.max_predictions)
  return max_predictions_;
}
inline void MotionMetricsConfig::set_max_predictions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  max_predictions_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionMetricsConfig.max_predictions)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto
