// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/keypoint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
namespace waymo {
namespace open_dataset {
namespace keypoints {
class CameraKeypoint;
class CameraKeypointDefaultTypeInternal;
extern CameraKeypointDefaultTypeInternal _CameraKeypoint_default_instance_;
class CameraKeypoints;
class CameraKeypointsDefaultTypeInternal;
extern CameraKeypointsDefaultTypeInternal _CameraKeypoints_default_instance_;
class Keypoint2d;
class Keypoint2dDefaultTypeInternal;
extern Keypoint2dDefaultTypeInternal _Keypoint2d_default_instance_;
class Keypoint3d;
class Keypoint3dDefaultTypeInternal;
extern Keypoint3dDefaultTypeInternal _Keypoint3d_default_instance_;
class KeypointVisibility;
class KeypointVisibilityDefaultTypeInternal;
extern KeypointVisibilityDefaultTypeInternal _KeypointVisibility_default_instance_;
class LaserKeypoint;
class LaserKeypointDefaultTypeInternal;
extern LaserKeypointDefaultTypeInternal _LaserKeypoint_default_instance_;
class LaserKeypoints;
class LaserKeypointsDefaultTypeInternal;
extern LaserKeypointsDefaultTypeInternal _LaserKeypoints_default_instance_;
class Vec2d;
class Vec2dDefaultTypeInternal;
extern Vec2dDefaultTypeInternal _Vec2d_default_instance_;
class Vec3d;
class Vec3dDefaultTypeInternal;
extern Vec3dDefaultTypeInternal _Vec3d_default_instance_;
}  // namespace keypoints
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::keypoints::CameraKeypoint* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::CameraKeypoint>(Arena*);
template<> ::waymo::open_dataset::keypoints::CameraKeypoints* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::CameraKeypoints>(Arena*);
template<> ::waymo::open_dataset::keypoints::Keypoint2d* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::Keypoint2d>(Arena*);
template<> ::waymo::open_dataset::keypoints::Keypoint3d* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::Keypoint3d>(Arena*);
template<> ::waymo::open_dataset::keypoints::KeypointVisibility* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::KeypointVisibility>(Arena*);
template<> ::waymo::open_dataset::keypoints::LaserKeypoint* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::LaserKeypoint>(Arena*);
template<> ::waymo::open_dataset::keypoints::LaserKeypoints* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::LaserKeypoints>(Arena*);
template<> ::waymo::open_dataset::keypoints::Vec2d* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::Vec2d>(Arena*);
template<> ::waymo::open_dataset::keypoints::Vec3d* Arena::CreateMaybeMessage<::waymo::open_dataset::keypoints::Vec3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {
namespace keypoints {

enum KeypointType : int {
  KEYPOINT_TYPE_UNSPECIFIED = 0,
  KEYPOINT_TYPE_NOSE = 1,
  KEYPOINT_TYPE_LEFT_SHOULDER = 5,
  KEYPOINT_TYPE_LEFT_ELBOW = 6,
  KEYPOINT_TYPE_LEFT_WRIST = 7,
  KEYPOINT_TYPE_LEFT_HIP = 8,
  KEYPOINT_TYPE_LEFT_KNEE = 9,
  KEYPOINT_TYPE_LEFT_ANKLE = 10,
  KEYPOINT_TYPE_RIGHT_SHOULDER = 13,
  KEYPOINT_TYPE_RIGHT_ELBOW = 14,
  KEYPOINT_TYPE_RIGHT_WRIST = 15,
  KEYPOINT_TYPE_RIGHT_HIP = 16,
  KEYPOINT_TYPE_RIGHT_KNEE = 17,
  KEYPOINT_TYPE_RIGHT_ANKLE = 18,
  KEYPOINT_TYPE_FOREHEAD = 19,
  KEYPOINT_TYPE_HEAD_CENTER = 20
};
bool KeypointType_IsValid(int value);
constexpr KeypointType KeypointType_MIN = KEYPOINT_TYPE_UNSPECIFIED;
constexpr KeypointType KeypointType_MAX = KEYPOINT_TYPE_HEAD_CENTER;
constexpr int KeypointType_ARRAYSIZE = KeypointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeypointType_descriptor();
template<typename T>
inline const std::string& KeypointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeypointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeypointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeypointType_descriptor(), enum_t_value);
}
inline bool KeypointType_Parse(
    const std::string& name, KeypointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeypointType>(
    KeypointType_descriptor(), name, value);
}
// ===================================================================

class Vec2d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.Vec2d) */ {
 public:
  Vec2d();
  virtual ~Vec2d();

  Vec2d(const Vec2d& from);
  Vec2d(Vec2d&& from) noexcept
    : Vec2d() {
    *this = ::std::move(from);
  }

  inline Vec2d& operator=(const Vec2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec2d& operator=(Vec2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec2d* internal_default_instance() {
    return reinterpret_cast<const Vec2d*>(
               &_Vec2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vec2d& a, Vec2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec2d* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec2d* New() const final {
    return CreateMaybeMessage<Vec2d>(nullptr);
  }

  Vec2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec2d& from);
  void MergeFrom(const Vec2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.Vec2d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.Vec2d)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class Vec3d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.Vec3d) */ {
 public:
  Vec3d();
  virtual ~Vec3d();

  Vec3d(const Vec3d& from);
  Vec3d(Vec3d&& from) noexcept
    : Vec3d() {
    *this = ::std::move(from);
  }

  inline Vec3d& operator=(const Vec3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3d& operator=(Vec3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3d* internal_default_instance() {
    return reinterpret_cast<const Vec3d*>(
               &_Vec3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vec3d& a, Vec3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3d* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3d* New() const final {
    return CreateMaybeMessage<Vec3d>(nullptr);
  }

  Vec3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3d& from);
  void MergeFrom(const Vec3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.Vec3d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  bool has_z() const;
  void clear_z();
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.Vec3d)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class KeypointVisibility :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.KeypointVisibility) */ {
 public:
  KeypointVisibility();
  virtual ~KeypointVisibility();

  KeypointVisibility(const KeypointVisibility& from);
  KeypointVisibility(KeypointVisibility&& from) noexcept
    : KeypointVisibility() {
    *this = ::std::move(from);
  }

  inline KeypointVisibility& operator=(const KeypointVisibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeypointVisibility& operator=(KeypointVisibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeypointVisibility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeypointVisibility* internal_default_instance() {
    return reinterpret_cast<const KeypointVisibility*>(
               &_KeypointVisibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeypointVisibility& a, KeypointVisibility& b) {
    a.Swap(&b);
  }
  inline void Swap(KeypointVisibility* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeypointVisibility* New() const final {
    return CreateMaybeMessage<KeypointVisibility>(nullptr);
  }

  KeypointVisibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeypointVisibility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeypointVisibility& from);
  void MergeFrom(const KeypointVisibility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeypointVisibility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.KeypointVisibility";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOccludedFieldNumber = 1,
  };
  // optional bool is_occluded = 1;
  bool has_is_occluded() const;
  void clear_is_occluded();
  bool is_occluded() const;
  void set_is_occluded(bool value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.KeypointVisibility)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_occluded_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class Keypoint2d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.Keypoint2d) */ {
 public:
  Keypoint2d();
  virtual ~Keypoint2d();

  Keypoint2d(const Keypoint2d& from);
  Keypoint2d(Keypoint2d&& from) noexcept
    : Keypoint2d() {
    *this = ::std::move(from);
  }

  inline Keypoint2d& operator=(const Keypoint2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keypoint2d& operator=(Keypoint2d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Keypoint2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Keypoint2d* internal_default_instance() {
    return reinterpret_cast<const Keypoint2d*>(
               &_Keypoint2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Keypoint2d& a, Keypoint2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Keypoint2d* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Keypoint2d* New() const final {
    return CreateMaybeMessage<Keypoint2d>(nullptr);
  }

  Keypoint2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Keypoint2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Keypoint2d& from);
  void MergeFrom(const Keypoint2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keypoint2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.Keypoint2d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationPxFieldNumber = 1,
    kVisibilityFieldNumber = 2,
  };
  // optional .waymo.open_dataset.keypoints.Vec2d location_px = 1;
  bool has_location_px() const;
  void clear_location_px();
  const ::waymo::open_dataset::keypoints::Vec2d& location_px() const;
  ::waymo::open_dataset::keypoints::Vec2d* release_location_px();
  ::waymo::open_dataset::keypoints::Vec2d* mutable_location_px();
  void set_allocated_location_px(::waymo::open_dataset::keypoints::Vec2d* location_px);

  // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
  bool has_visibility() const;
  void clear_visibility();
  const ::waymo::open_dataset::keypoints::KeypointVisibility& visibility() const;
  ::waymo::open_dataset::keypoints::KeypointVisibility* release_visibility();
  ::waymo::open_dataset::keypoints::KeypointVisibility* mutable_visibility();
  void set_allocated_visibility(::waymo::open_dataset::keypoints::KeypointVisibility* visibility);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.Keypoint2d)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::keypoints::Vec2d* location_px_;
  ::waymo::open_dataset::keypoints::KeypointVisibility* visibility_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class Keypoint3d :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.Keypoint3d) */ {
 public:
  Keypoint3d();
  virtual ~Keypoint3d();

  Keypoint3d(const Keypoint3d& from);
  Keypoint3d(Keypoint3d&& from) noexcept
    : Keypoint3d() {
    *this = ::std::move(from);
  }

  inline Keypoint3d& operator=(const Keypoint3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keypoint3d& operator=(Keypoint3d&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Keypoint3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Keypoint3d* internal_default_instance() {
    return reinterpret_cast<const Keypoint3d*>(
               &_Keypoint3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Keypoint3d& a, Keypoint3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Keypoint3d* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Keypoint3d* New() const final {
    return CreateMaybeMessage<Keypoint3d>(nullptr);
  }

  Keypoint3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Keypoint3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Keypoint3d& from);
  void MergeFrom(const Keypoint3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keypoint3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.Keypoint3d";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationMFieldNumber = 1,
    kVisibilityFieldNumber = 2,
  };
  // optional .waymo.open_dataset.keypoints.Vec3d location_m = 1;
  bool has_location_m() const;
  void clear_location_m();
  const ::waymo::open_dataset::keypoints::Vec3d& location_m() const;
  ::waymo::open_dataset::keypoints::Vec3d* release_location_m();
  ::waymo::open_dataset::keypoints::Vec3d* mutable_location_m();
  void set_allocated_location_m(::waymo::open_dataset::keypoints::Vec3d* location_m);

  // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
  bool has_visibility() const;
  void clear_visibility();
  const ::waymo::open_dataset::keypoints::KeypointVisibility& visibility() const;
  ::waymo::open_dataset::keypoints::KeypointVisibility* release_visibility();
  ::waymo::open_dataset::keypoints::KeypointVisibility* mutable_visibility();
  void set_allocated_visibility(::waymo::open_dataset::keypoints::KeypointVisibility* visibility);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.Keypoint3d)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::keypoints::Vec3d* location_m_;
  ::waymo::open_dataset::keypoints::KeypointVisibility* visibility_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class CameraKeypoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.CameraKeypoint) */ {
 public:
  CameraKeypoint();
  virtual ~CameraKeypoint();

  CameraKeypoint(const CameraKeypoint& from);
  CameraKeypoint(CameraKeypoint&& from) noexcept
    : CameraKeypoint() {
    *this = ::std::move(from);
  }

  inline CameraKeypoint& operator=(const CameraKeypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraKeypoint& operator=(CameraKeypoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraKeypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraKeypoint* internal_default_instance() {
    return reinterpret_cast<const CameraKeypoint*>(
               &_CameraKeypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CameraKeypoint& a, CameraKeypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraKeypoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraKeypoint* New() const final {
    return CreateMaybeMessage<CameraKeypoint>(nullptr);
  }

  CameraKeypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraKeypoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraKeypoint& from);
  void MergeFrom(const CameraKeypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraKeypoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.CameraKeypoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypoint2DFieldNumber = 2,
    kKeypoint3DFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional .waymo.open_dataset.keypoints.Keypoint2d keypoint_2d = 2;
  bool has_keypoint_2d() const;
  void clear_keypoint_2d();
  const ::waymo::open_dataset::keypoints::Keypoint2d& keypoint_2d() const;
  ::waymo::open_dataset::keypoints::Keypoint2d* release_keypoint_2d();
  ::waymo::open_dataset::keypoints::Keypoint2d* mutable_keypoint_2d();
  void set_allocated_keypoint_2d(::waymo::open_dataset::keypoints::Keypoint2d* keypoint_2d);

  // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 3;
  bool has_keypoint_3d() const;
  void clear_keypoint_3d();
  const ::waymo::open_dataset::keypoints::Keypoint3d& keypoint_3d() const;
  ::waymo::open_dataset::keypoints::Keypoint3d* release_keypoint_3d();
  ::waymo::open_dataset::keypoints::Keypoint3d* mutable_keypoint_3d();
  void set_allocated_keypoint_3d(::waymo::open_dataset::keypoints::Keypoint3d* keypoint_3d);

  // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
  bool has_type() const;
  void clear_type();
  ::waymo::open_dataset::keypoints::KeypointType type() const;
  void set_type(::waymo::open_dataset::keypoints::KeypointType value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.CameraKeypoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::keypoints::Keypoint2d* keypoint_2d_;
  ::waymo::open_dataset::keypoints::Keypoint3d* keypoint_3d_;
  int type_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class CameraKeypoints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.CameraKeypoints) */ {
 public:
  CameraKeypoints();
  virtual ~CameraKeypoints();

  CameraKeypoints(const CameraKeypoints& from);
  CameraKeypoints(CameraKeypoints&& from) noexcept
    : CameraKeypoints() {
    *this = ::std::move(from);
  }

  inline CameraKeypoints& operator=(const CameraKeypoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraKeypoints& operator=(CameraKeypoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraKeypoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraKeypoints* internal_default_instance() {
    return reinterpret_cast<const CameraKeypoints*>(
               &_CameraKeypoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CameraKeypoints& a, CameraKeypoints& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraKeypoints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraKeypoints* New() const final {
    return CreateMaybeMessage<CameraKeypoints>(nullptr);
  }

  CameraKeypoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraKeypoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraKeypoints& from);
  void MergeFrom(const CameraKeypoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraKeypoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.CameraKeypoints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.keypoints.CameraKeypoint keypoint = 1;
  int keypoint_size() const;
  void clear_keypoint();
  ::waymo::open_dataset::keypoints::CameraKeypoint* mutable_keypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::CameraKeypoint >*
      mutable_keypoint();
  const ::waymo::open_dataset::keypoints::CameraKeypoint& keypoint(int index) const;
  ::waymo::open_dataset::keypoints::CameraKeypoint* add_keypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::CameraKeypoint >&
      keypoint() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.CameraKeypoints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::CameraKeypoint > keypoint_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class LaserKeypoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.LaserKeypoint) */ {
 public:
  LaserKeypoint();
  virtual ~LaserKeypoint();

  LaserKeypoint(const LaserKeypoint& from);
  LaserKeypoint(LaserKeypoint&& from) noexcept
    : LaserKeypoint() {
    *this = ::std::move(from);
  }

  inline LaserKeypoint& operator=(const LaserKeypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserKeypoint& operator=(LaserKeypoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserKeypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserKeypoint* internal_default_instance() {
    return reinterpret_cast<const LaserKeypoint*>(
               &_LaserKeypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LaserKeypoint& a, LaserKeypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserKeypoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserKeypoint* New() const final {
    return CreateMaybeMessage<LaserKeypoint>(nullptr);
  }

  LaserKeypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserKeypoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserKeypoint& from);
  void MergeFrom(const LaserKeypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserKeypoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.LaserKeypoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypoint3DFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 2;
  bool has_keypoint_3d() const;
  void clear_keypoint_3d();
  const ::waymo::open_dataset::keypoints::Keypoint3d& keypoint_3d() const;
  ::waymo::open_dataset::keypoints::Keypoint3d* release_keypoint_3d();
  ::waymo::open_dataset::keypoints::Keypoint3d* mutable_keypoint_3d();
  void set_allocated_keypoint_3d(::waymo::open_dataset::keypoints::Keypoint3d* keypoint_3d);

  // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
  bool has_type() const;
  void clear_type();
  ::waymo::open_dataset::keypoints::KeypointType type() const;
  void set_type(::waymo::open_dataset::keypoints::KeypointType value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.LaserKeypoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::keypoints::Keypoint3d* keypoint_3d_;
  int type_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// -------------------------------------------------------------------

class LaserKeypoints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.keypoints.LaserKeypoints) */ {
 public:
  LaserKeypoints();
  virtual ~LaserKeypoints();

  LaserKeypoints(const LaserKeypoints& from);
  LaserKeypoints(LaserKeypoints&& from) noexcept
    : LaserKeypoints() {
    *this = ::std::move(from);
  }

  inline LaserKeypoints& operator=(const LaserKeypoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserKeypoints& operator=(LaserKeypoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserKeypoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserKeypoints* internal_default_instance() {
    return reinterpret_cast<const LaserKeypoints*>(
               &_LaserKeypoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LaserKeypoints& a, LaserKeypoints& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserKeypoints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserKeypoints* New() const final {
    return CreateMaybeMessage<LaserKeypoints>(nullptr);
  }

  LaserKeypoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserKeypoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserKeypoints& from);
  void MergeFrom(const LaserKeypoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserKeypoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.keypoints.LaserKeypoints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.keypoints.LaserKeypoint keypoint = 1;
  int keypoint_size() const;
  void clear_keypoint();
  ::waymo::open_dataset::keypoints::LaserKeypoint* mutable_keypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::LaserKeypoint >*
      mutable_keypoint();
  const ::waymo::open_dataset::keypoints::LaserKeypoint& keypoint(int index) const;
  ::waymo::open_dataset::keypoints::LaserKeypoint* add_keypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::LaserKeypoint >&
      keypoint() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.keypoints.LaserKeypoints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::LaserKeypoint > keypoint_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vec2d

// optional double x = 1;
inline bool Vec2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec2d::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vec2d::x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Vec2d.x)
  return x_;
}
inline void Vec2d::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.Vec2d.x)
}

// optional double y = 2;
inline bool Vec2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec2d::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vec2d::y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Vec2d.y)
  return y_;
}
inline void Vec2d::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.Vec2d.y)
}

// -------------------------------------------------------------------

// Vec3d

// optional double x = 1;
inline bool Vec3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3d::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vec3d::x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Vec3d.x)
  return x_;
}
inline void Vec3d::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.Vec3d.x)
}

// optional double y = 2;
inline bool Vec3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3d::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Vec3d::y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Vec3d.y)
  return y_;
}
inline void Vec3d::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.Vec3d.y)
}

// optional double z = 3;
inline bool Vec3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3d::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Vec3d::z() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Vec3d.z)
  return z_;
}
inline void Vec3d::set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.Vec3d.z)
}

// -------------------------------------------------------------------

// KeypointVisibility

// optional bool is_occluded = 1;
inline bool KeypointVisibility::has_is_occluded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeypointVisibility::clear_is_occluded() {
  is_occluded_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool KeypointVisibility::is_occluded() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.KeypointVisibility.is_occluded)
  return is_occluded_;
}
inline void KeypointVisibility::set_is_occluded(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_occluded_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.KeypointVisibility.is_occluded)
}

// -------------------------------------------------------------------

// Keypoint2d

// optional .waymo.open_dataset.keypoints.Vec2d location_px = 1;
inline bool Keypoint2d::has_location_px() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Keypoint2d::clear_location_px() {
  if (location_px_ != nullptr) location_px_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::keypoints::Vec2d& Keypoint2d::location_px() const {
  const ::waymo::open_dataset::keypoints::Vec2d* p = location_px_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Keypoint2d.location_px)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::keypoints::Vec2d*>(
      &::waymo::open_dataset::keypoints::_Vec2d_default_instance_);
}
inline ::waymo::open_dataset::keypoints::Vec2d* Keypoint2d::release_location_px() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.keypoints.Keypoint2d.location_px)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::keypoints::Vec2d* temp = location_px_;
  location_px_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::keypoints::Vec2d* Keypoint2d::mutable_location_px() {
  _has_bits_[0] |= 0x00000001u;
  if (location_px_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::keypoints::Vec2d>(GetArenaNoVirtual());
    location_px_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.Keypoint2d.location_px)
  return location_px_;
}
inline void Keypoint2d::set_allocated_location_px(::waymo::open_dataset::keypoints::Vec2d* location_px) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_px_;
  }
  if (location_px) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location_px = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_px, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_px_ = location_px;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.keypoints.Keypoint2d.location_px)
}

// optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
inline bool Keypoint2d::has_visibility() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Keypoint2d::clear_visibility() {
  if (visibility_ != nullptr) visibility_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::keypoints::KeypointVisibility& Keypoint2d::visibility() const {
  const ::waymo::open_dataset::keypoints::KeypointVisibility* p = visibility_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Keypoint2d.visibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::keypoints::KeypointVisibility*>(
      &::waymo::open_dataset::keypoints::_KeypointVisibility_default_instance_);
}
inline ::waymo::open_dataset::keypoints::KeypointVisibility* Keypoint2d::release_visibility() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.keypoints.Keypoint2d.visibility)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::keypoints::KeypointVisibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::keypoints::KeypointVisibility* Keypoint2d::mutable_visibility() {
  _has_bits_[0] |= 0x00000002u;
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::keypoints::KeypointVisibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.Keypoint2d.visibility)
  return visibility_;
}
inline void Keypoint2d::set_allocated_visibility(::waymo::open_dataset::keypoints::KeypointVisibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.keypoints.Keypoint2d.visibility)
}

// -------------------------------------------------------------------

// Keypoint3d

// optional .waymo.open_dataset.keypoints.Vec3d location_m = 1;
inline bool Keypoint3d::has_location_m() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Keypoint3d::clear_location_m() {
  if (location_m_ != nullptr) location_m_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::keypoints::Vec3d& Keypoint3d::location_m() const {
  const ::waymo::open_dataset::keypoints::Vec3d* p = location_m_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Keypoint3d.location_m)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::keypoints::Vec3d*>(
      &::waymo::open_dataset::keypoints::_Vec3d_default_instance_);
}
inline ::waymo::open_dataset::keypoints::Vec3d* Keypoint3d::release_location_m() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.keypoints.Keypoint3d.location_m)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::keypoints::Vec3d* temp = location_m_;
  location_m_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::keypoints::Vec3d* Keypoint3d::mutable_location_m() {
  _has_bits_[0] |= 0x00000001u;
  if (location_m_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::keypoints::Vec3d>(GetArenaNoVirtual());
    location_m_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.Keypoint3d.location_m)
  return location_m_;
}
inline void Keypoint3d::set_allocated_location_m(::waymo::open_dataset::keypoints::Vec3d* location_m) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_m_;
  }
  if (location_m) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location_m = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_m, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_m_ = location_m;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.keypoints.Keypoint3d.location_m)
}

// optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
inline bool Keypoint3d::has_visibility() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Keypoint3d::clear_visibility() {
  if (visibility_ != nullptr) visibility_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::keypoints::KeypointVisibility& Keypoint3d::visibility() const {
  const ::waymo::open_dataset::keypoints::KeypointVisibility* p = visibility_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.Keypoint3d.visibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::keypoints::KeypointVisibility*>(
      &::waymo::open_dataset::keypoints::_KeypointVisibility_default_instance_);
}
inline ::waymo::open_dataset::keypoints::KeypointVisibility* Keypoint3d::release_visibility() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.keypoints.Keypoint3d.visibility)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::keypoints::KeypointVisibility* temp = visibility_;
  visibility_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::keypoints::KeypointVisibility* Keypoint3d::mutable_visibility() {
  _has_bits_[0] |= 0x00000002u;
  if (visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::keypoints::KeypointVisibility>(GetArenaNoVirtual());
    visibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.Keypoint3d.visibility)
  return visibility_;
}
inline void Keypoint3d::set_allocated_visibility(::waymo::open_dataset::keypoints::KeypointVisibility* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visibility_;
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.keypoints.Keypoint3d.visibility)
}

// -------------------------------------------------------------------

// CameraKeypoint

// optional .waymo.open_dataset.keypoints.KeypointType type = 1;
inline bool CameraKeypoint::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraKeypoint::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::waymo::open_dataset::keypoints::KeypointType CameraKeypoint::type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.CameraKeypoint.type)
  return static_cast< ::waymo::open_dataset::keypoints::KeypointType >(type_);
}
inline void CameraKeypoint::set_type(::waymo::open_dataset::keypoints::KeypointType value) {
  assert(::waymo::open_dataset::keypoints::KeypointType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.CameraKeypoint.type)
}

// optional .waymo.open_dataset.keypoints.Keypoint2d keypoint_2d = 2;
inline bool CameraKeypoint::has_keypoint_2d() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraKeypoint::clear_keypoint_2d() {
  if (keypoint_2d_ != nullptr) keypoint_2d_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::keypoints::Keypoint2d& CameraKeypoint::keypoint_2d() const {
  const ::waymo::open_dataset::keypoints::Keypoint2d* p = keypoint_2d_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_2d)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::keypoints::Keypoint2d*>(
      &::waymo::open_dataset::keypoints::_Keypoint2d_default_instance_);
}
inline ::waymo::open_dataset::keypoints::Keypoint2d* CameraKeypoint::release_keypoint_2d() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_2d)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::keypoints::Keypoint2d* temp = keypoint_2d_;
  keypoint_2d_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::keypoints::Keypoint2d* CameraKeypoint::mutable_keypoint_2d() {
  _has_bits_[0] |= 0x00000001u;
  if (keypoint_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::keypoints::Keypoint2d>(GetArenaNoVirtual());
    keypoint_2d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_2d)
  return keypoint_2d_;
}
inline void CameraKeypoint::set_allocated_keypoint_2d(::waymo::open_dataset::keypoints::Keypoint2d* keypoint_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keypoint_2d_;
  }
  if (keypoint_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keypoint_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keypoint_2d, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keypoint_2d_ = keypoint_2d;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_2d)
}

// optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 3;
inline bool CameraKeypoint::has_keypoint_3d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraKeypoint::clear_keypoint_3d() {
  if (keypoint_3d_ != nullptr) keypoint_3d_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::waymo::open_dataset::keypoints::Keypoint3d& CameraKeypoint::keypoint_3d() const {
  const ::waymo::open_dataset::keypoints::Keypoint3d* p = keypoint_3d_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_3d)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::keypoints::Keypoint3d*>(
      &::waymo::open_dataset::keypoints::_Keypoint3d_default_instance_);
}
inline ::waymo::open_dataset::keypoints::Keypoint3d* CameraKeypoint::release_keypoint_3d() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_3d)
  _has_bits_[0] &= ~0x00000002u;
  ::waymo::open_dataset::keypoints::Keypoint3d* temp = keypoint_3d_;
  keypoint_3d_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::keypoints::Keypoint3d* CameraKeypoint::mutable_keypoint_3d() {
  _has_bits_[0] |= 0x00000002u;
  if (keypoint_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::keypoints::Keypoint3d>(GetArenaNoVirtual());
    keypoint_3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_3d)
  return keypoint_3d_;
}
inline void CameraKeypoint::set_allocated_keypoint_3d(::waymo::open_dataset::keypoints::Keypoint3d* keypoint_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keypoint_3d_;
  }
  if (keypoint_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keypoint_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keypoint_3d, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  keypoint_3d_ = keypoint_3d;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.keypoints.CameraKeypoint.keypoint_3d)
}

// -------------------------------------------------------------------

// CameraKeypoints

// repeated .waymo.open_dataset.keypoints.CameraKeypoint keypoint = 1;
inline int CameraKeypoints::keypoint_size() const {
  return keypoint_.size();
}
inline void CameraKeypoints::clear_keypoint() {
  keypoint_.Clear();
}
inline ::waymo::open_dataset::keypoints::CameraKeypoint* CameraKeypoints::mutable_keypoint(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.CameraKeypoints.keypoint)
  return keypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::CameraKeypoint >*
CameraKeypoints::mutable_keypoint() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.keypoints.CameraKeypoints.keypoint)
  return &keypoint_;
}
inline const ::waymo::open_dataset::keypoints::CameraKeypoint& CameraKeypoints::keypoint(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.CameraKeypoints.keypoint)
  return keypoint_.Get(index);
}
inline ::waymo::open_dataset::keypoints::CameraKeypoint* CameraKeypoints::add_keypoint() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.keypoints.CameraKeypoints.keypoint)
  return keypoint_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::CameraKeypoint >&
CameraKeypoints::keypoint() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.keypoints.CameraKeypoints.keypoint)
  return keypoint_;
}

// -------------------------------------------------------------------

// LaserKeypoint

// optional .waymo.open_dataset.keypoints.KeypointType type = 1;
inline bool LaserKeypoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaserKeypoint::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::waymo::open_dataset::keypoints::KeypointType LaserKeypoint::type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.LaserKeypoint.type)
  return static_cast< ::waymo::open_dataset::keypoints::KeypointType >(type_);
}
inline void LaserKeypoint::set_type(::waymo::open_dataset::keypoints::KeypointType value) {
  assert(::waymo::open_dataset::keypoints::KeypointType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.keypoints.LaserKeypoint.type)
}

// optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 2;
inline bool LaserKeypoint::has_keypoint_3d() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaserKeypoint::clear_keypoint_3d() {
  if (keypoint_3d_ != nullptr) keypoint_3d_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::keypoints::Keypoint3d& LaserKeypoint::keypoint_3d() const {
  const ::waymo::open_dataset::keypoints::Keypoint3d* p = keypoint_3d_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.LaserKeypoint.keypoint_3d)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::keypoints::Keypoint3d*>(
      &::waymo::open_dataset::keypoints::_Keypoint3d_default_instance_);
}
inline ::waymo::open_dataset::keypoints::Keypoint3d* LaserKeypoint::release_keypoint_3d() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.keypoints.LaserKeypoint.keypoint_3d)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::keypoints::Keypoint3d* temp = keypoint_3d_;
  keypoint_3d_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::keypoints::Keypoint3d* LaserKeypoint::mutable_keypoint_3d() {
  _has_bits_[0] |= 0x00000001u;
  if (keypoint_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::keypoints::Keypoint3d>(GetArenaNoVirtual());
    keypoint_3d_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.LaserKeypoint.keypoint_3d)
  return keypoint_3d_;
}
inline void LaserKeypoint::set_allocated_keypoint_3d(::waymo::open_dataset::keypoints::Keypoint3d* keypoint_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete keypoint_3d_;
  }
  if (keypoint_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keypoint_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keypoint_3d, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keypoint_3d_ = keypoint_3d;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.keypoints.LaserKeypoint.keypoint_3d)
}

// -------------------------------------------------------------------

// LaserKeypoints

// repeated .waymo.open_dataset.keypoints.LaserKeypoint keypoint = 1;
inline int LaserKeypoints::keypoint_size() const {
  return keypoint_.size();
}
inline void LaserKeypoints::clear_keypoint() {
  keypoint_.Clear();
}
inline ::waymo::open_dataset::keypoints::LaserKeypoint* LaserKeypoints::mutable_keypoint(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.keypoints.LaserKeypoints.keypoint)
  return keypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::LaserKeypoint >*
LaserKeypoints::mutable_keypoint() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.keypoints.LaserKeypoints.keypoint)
  return &keypoint_;
}
inline const ::waymo::open_dataset::keypoints::LaserKeypoint& LaserKeypoints::keypoint(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.keypoints.LaserKeypoints.keypoint)
  return keypoint_.Get(index);
}
inline ::waymo::open_dataset::keypoints::LaserKeypoint* LaserKeypoints::add_keypoint() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.keypoints.LaserKeypoints.keypoint)
  return keypoint_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::keypoints::LaserKeypoint >&
LaserKeypoints::keypoint() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.keypoints.LaserKeypoints.keypoint)
  return keypoint_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace keypoints
}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::keypoints::KeypointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::keypoints::KeypointType>() {
  return ::waymo::open_dataset::keypoints::KeypointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto
