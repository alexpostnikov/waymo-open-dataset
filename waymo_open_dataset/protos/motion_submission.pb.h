// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/motion_submission.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
namespace waymo {
namespace open_dataset {
class ChallengeScenarioPredictions;
class ChallengeScenarioPredictionsDefaultTypeInternal;
extern ChallengeScenarioPredictionsDefaultTypeInternal _ChallengeScenarioPredictions_default_instance_;
class JointPrediction;
class JointPredictionDefaultTypeInternal;
extern JointPredictionDefaultTypeInternal _JointPrediction_default_instance_;
class MotionChallengeSubmission;
class MotionChallengeSubmissionDefaultTypeInternal;
extern MotionChallengeSubmissionDefaultTypeInternal _MotionChallengeSubmission_default_instance_;
class ObjectTrajectory;
class ObjectTrajectoryDefaultTypeInternal;
extern ObjectTrajectoryDefaultTypeInternal _ObjectTrajectory_default_instance_;
class PredictionSet;
class PredictionSetDefaultTypeInternal;
extern PredictionSetDefaultTypeInternal _PredictionSet_default_instance_;
class ScoredJointTrajectory;
class ScoredJointTrajectoryDefaultTypeInternal;
extern ScoredJointTrajectoryDefaultTypeInternal _ScoredJointTrajectory_default_instance_;
class ScoredTrajectory;
class ScoredTrajectoryDefaultTypeInternal;
extern ScoredTrajectoryDefaultTypeInternal _ScoredTrajectory_default_instance_;
class SingleObjectPrediction;
class SingleObjectPredictionDefaultTypeInternal;
extern SingleObjectPredictionDefaultTypeInternal _SingleObjectPrediction_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::ChallengeScenarioPredictions* Arena::CreateMaybeMessage<::waymo::open_dataset::ChallengeScenarioPredictions>(Arena*);
template<> ::waymo::open_dataset::JointPrediction* Arena::CreateMaybeMessage<::waymo::open_dataset::JointPrediction>(Arena*);
template<> ::waymo::open_dataset::MotionChallengeSubmission* Arena::CreateMaybeMessage<::waymo::open_dataset::MotionChallengeSubmission>(Arena*);
template<> ::waymo::open_dataset::ObjectTrajectory* Arena::CreateMaybeMessage<::waymo::open_dataset::ObjectTrajectory>(Arena*);
template<> ::waymo::open_dataset::PredictionSet* Arena::CreateMaybeMessage<::waymo::open_dataset::PredictionSet>(Arena*);
template<> ::waymo::open_dataset::ScoredJointTrajectory* Arena::CreateMaybeMessage<::waymo::open_dataset::ScoredJointTrajectory>(Arena*);
template<> ::waymo::open_dataset::ScoredTrajectory* Arena::CreateMaybeMessage<::waymo::open_dataset::ScoredTrajectory>(Arena*);
template<> ::waymo::open_dataset::SingleObjectPrediction* Arena::CreateMaybeMessage<::waymo::open_dataset::SingleObjectPrediction>(Arena*);
template<> ::waymo::open_dataset::Trajectory* Arena::CreateMaybeMessage<::waymo::open_dataset::Trajectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum MotionChallengeSubmission_SubmissionType : int {
  MotionChallengeSubmission_SubmissionType_UNKNOWN = 0,
  MotionChallengeSubmission_SubmissionType_MOTION_PREDICTION = 1,
  MotionChallengeSubmission_SubmissionType_INTERACTION_PREDICTION = 2
};
bool MotionChallengeSubmission_SubmissionType_IsValid(int value);
constexpr MotionChallengeSubmission_SubmissionType MotionChallengeSubmission_SubmissionType_SubmissionType_MIN = MotionChallengeSubmission_SubmissionType_UNKNOWN;
constexpr MotionChallengeSubmission_SubmissionType MotionChallengeSubmission_SubmissionType_SubmissionType_MAX = MotionChallengeSubmission_SubmissionType_INTERACTION_PREDICTION;
constexpr int MotionChallengeSubmission_SubmissionType_SubmissionType_ARRAYSIZE = MotionChallengeSubmission_SubmissionType_SubmissionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionChallengeSubmission_SubmissionType_descriptor();
template<typename T>
inline const std::string& MotionChallengeSubmission_SubmissionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionChallengeSubmission_SubmissionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionChallengeSubmission_SubmissionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionChallengeSubmission_SubmissionType_descriptor(), enum_t_value);
}
inline bool MotionChallengeSubmission_SubmissionType_Parse(
    const std::string& name, MotionChallengeSubmission_SubmissionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionChallengeSubmission_SubmissionType>(
    MotionChallengeSubmission_SubmissionType_descriptor(), name, value);
}
// ===================================================================

class Trajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(nullptr);
  }

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Trajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterXFieldNumber = 2,
    kCenterYFieldNumber = 3,
  };
  // repeated float center_x = 2 [packed = true];
  int center_x_size() const;
  void clear_center_x();
  float center_x(int index) const;
  void set_center_x(int index, float value);
  void add_center_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      center_x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_center_x();

  // repeated float center_y = 3 [packed = true];
  int center_y_size() const;
  void clear_center_y();
  float center_y(int index) const;
  void set_center_y(int index, float value);
  void add_center_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      center_y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_center_y();

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Trajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > center_x_;
  mutable std::atomic<int> _center_x_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > center_y_;
  mutable std::atomic<int> _center_y_cached_byte_size_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class ScoredTrajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.ScoredTrajectory) */ {
 public:
  ScoredTrajectory();
  virtual ~ScoredTrajectory();

  ScoredTrajectory(const ScoredTrajectory& from);
  ScoredTrajectory(ScoredTrajectory&& from) noexcept
    : ScoredTrajectory() {
    *this = ::std::move(from);
  }

  inline ScoredTrajectory& operator=(const ScoredTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoredTrajectory& operator=(ScoredTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScoredTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoredTrajectory* internal_default_instance() {
    return reinterpret_cast<const ScoredTrajectory*>(
               &_ScoredTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScoredTrajectory& a, ScoredTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoredTrajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoredTrajectory* New() const final {
    return CreateMaybeMessage<ScoredTrajectory>(nullptr);
  }

  ScoredTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoredTrajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScoredTrajectory& from);
  void MergeFrom(const ScoredTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoredTrajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.ScoredTrajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // optional .waymo.open_dataset.Trajectory trajectory = 1;
  bool has_trajectory() const;
  void clear_trajectory();
  const ::waymo::open_dataset::Trajectory& trajectory() const;
  ::waymo::open_dataset::Trajectory* release_trajectory();
  ::waymo::open_dataset::Trajectory* mutable_trajectory();
  void set_allocated_trajectory(::waymo::open_dataset::Trajectory* trajectory);

  // optional float confidence = 2;
  bool has_confidence() const;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.ScoredTrajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::Trajectory* trajectory_;
  float confidence_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class SingleObjectPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.SingleObjectPrediction) */ {
 public:
  SingleObjectPrediction();
  virtual ~SingleObjectPrediction();

  SingleObjectPrediction(const SingleObjectPrediction& from);
  SingleObjectPrediction(SingleObjectPrediction&& from) noexcept
    : SingleObjectPrediction() {
    *this = ::std::move(from);
  }

  inline SingleObjectPrediction& operator=(const SingleObjectPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleObjectPrediction& operator=(SingleObjectPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleObjectPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleObjectPrediction* internal_default_instance() {
    return reinterpret_cast<const SingleObjectPrediction*>(
               &_SingleObjectPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SingleObjectPrediction& a, SingleObjectPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleObjectPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleObjectPrediction* New() const final {
    return CreateMaybeMessage<SingleObjectPrediction>(nullptr);
  }

  SingleObjectPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleObjectPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleObjectPrediction& from);
  void MergeFrom(const SingleObjectPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleObjectPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.SingleObjectPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoriesFieldNumber = 2,
    kObjectIdFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.ScoredTrajectory trajectories = 2;
  int trajectories_size() const;
  void clear_trajectories();
  ::waymo::open_dataset::ScoredTrajectory* mutable_trajectories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredTrajectory >*
      mutable_trajectories();
  const ::waymo::open_dataset::ScoredTrajectory& trajectories(int index) const;
  ::waymo::open_dataset::ScoredTrajectory* add_trajectories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredTrajectory >&
      trajectories() const;

  // optional int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int32 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.SingleObjectPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredTrajectory > trajectories_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_id_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class PredictionSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.PredictionSet) */ {
 public:
  PredictionSet();
  virtual ~PredictionSet();

  PredictionSet(const PredictionSet& from);
  PredictionSet(PredictionSet&& from) noexcept
    : PredictionSet() {
    *this = ::std::move(from);
  }

  inline PredictionSet& operator=(const PredictionSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictionSet& operator=(PredictionSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictionSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionSet* internal_default_instance() {
    return reinterpret_cast<const PredictionSet*>(
               &_PredictionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PredictionSet& a, PredictionSet& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictionSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictionSet* New() const final {
    return CreateMaybeMessage<PredictionSet>(nullptr);
  }

  PredictionSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictionSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictionSet& from);
  void MergeFrom(const PredictionSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.PredictionSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.SingleObjectPrediction predictions = 1;
  int predictions_size() const;
  void clear_predictions();
  ::waymo::open_dataset::SingleObjectPrediction* mutable_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleObjectPrediction >*
      mutable_predictions();
  const ::waymo::open_dataset::SingleObjectPrediction& predictions(int index) const;
  ::waymo::open_dataset::SingleObjectPrediction* add_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleObjectPrediction >&
      predictions() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.PredictionSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleObjectPrediction > predictions_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class ObjectTrajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.ObjectTrajectory) */ {
 public:
  ObjectTrajectory();
  virtual ~ObjectTrajectory();

  ObjectTrajectory(const ObjectTrajectory& from);
  ObjectTrajectory(ObjectTrajectory&& from) noexcept
    : ObjectTrajectory() {
    *this = ::std::move(from);
  }

  inline ObjectTrajectory& operator=(const ObjectTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectTrajectory& operator=(ObjectTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrajectory* internal_default_instance() {
    return reinterpret_cast<const ObjectTrajectory*>(
               &_ObjectTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ObjectTrajectory& a, ObjectTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectTrajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrajectory* New() const final {
    return CreateMaybeMessage<ObjectTrajectory>(nullptr);
  }

  ObjectTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectTrajectory& from);
  void MergeFrom(const ObjectTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.ObjectTrajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryFieldNumber = 2,
    kObjectIdFieldNumber = 1,
  };
  // optional .waymo.open_dataset.Trajectory trajectory = 2;
  bool has_trajectory() const;
  void clear_trajectory();
  const ::waymo::open_dataset::Trajectory& trajectory() const;
  ::waymo::open_dataset::Trajectory* release_trajectory();
  ::waymo::open_dataset::Trajectory* mutable_trajectory();
  void set_allocated_trajectory(::waymo::open_dataset::Trajectory* trajectory);

  // optional int32 object_id = 1;
  bool has_object_id() const;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int32 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.ObjectTrajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::waymo::open_dataset::Trajectory* trajectory_;
  ::PROTOBUF_NAMESPACE_ID::int32 object_id_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class ScoredJointTrajectory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.ScoredJointTrajectory) */ {
 public:
  ScoredJointTrajectory();
  virtual ~ScoredJointTrajectory();

  ScoredJointTrajectory(const ScoredJointTrajectory& from);
  ScoredJointTrajectory(ScoredJointTrajectory&& from) noexcept
    : ScoredJointTrajectory() {
    *this = ::std::move(from);
  }

  inline ScoredJointTrajectory& operator=(const ScoredJointTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoredJointTrajectory& operator=(ScoredJointTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScoredJointTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoredJointTrajectory* internal_default_instance() {
    return reinterpret_cast<const ScoredJointTrajectory*>(
               &_ScoredJointTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScoredJointTrajectory& a, ScoredJointTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoredJointTrajectory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoredJointTrajectory* New() const final {
    return CreateMaybeMessage<ScoredJointTrajectory>(nullptr);
  }

  ScoredJointTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoredJointTrajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScoredJointTrajectory& from);
  void MergeFrom(const ScoredJointTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoredJointTrajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.ScoredJointTrajectory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoriesFieldNumber = 2,
    kConfidenceFieldNumber = 3,
  };
  // repeated .waymo.open_dataset.ObjectTrajectory trajectories = 2;
  int trajectories_size() const;
  void clear_trajectories();
  ::waymo::open_dataset::ObjectTrajectory* mutable_trajectories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectTrajectory >*
      mutable_trajectories();
  const ::waymo::open_dataset::ObjectTrajectory& trajectories(int index) const;
  ::waymo::open_dataset::ObjectTrajectory* add_trajectories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectTrajectory >&
      trajectories() const;

  // optional float confidence = 3;
  bool has_confidence() const;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.ScoredJointTrajectory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectTrajectory > trajectories_;
  float confidence_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class JointPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.JointPrediction) */ {
 public:
  JointPrediction();
  virtual ~JointPrediction();

  JointPrediction(const JointPrediction& from);
  JointPrediction(JointPrediction&& from) noexcept
    : JointPrediction() {
    *this = ::std::move(from);
  }

  inline JointPrediction& operator=(const JointPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPrediction& operator=(JointPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JointPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointPrediction* internal_default_instance() {
    return reinterpret_cast<const JointPrediction*>(
               &_JointPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JointPrediction& a, JointPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(JointPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointPrediction* New() const final {
    return CreateMaybeMessage<JointPrediction>(nullptr);
  }

  JointPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointPrediction& from);
  void MergeFrom(const JointPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.JointPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointTrajectoriesFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.ScoredJointTrajectory joint_trajectories = 1;
  int joint_trajectories_size() const;
  void clear_joint_trajectories();
  ::waymo::open_dataset::ScoredJointTrajectory* mutable_joint_trajectories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredJointTrajectory >*
      mutable_joint_trajectories();
  const ::waymo::open_dataset::ScoredJointTrajectory& joint_trajectories(int index) const;
  ::waymo::open_dataset::ScoredJointTrajectory* add_joint_trajectories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredJointTrajectory >&
      joint_trajectories() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.JointPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredJointTrajectory > joint_trajectories_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class ChallengeScenarioPredictions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.ChallengeScenarioPredictions) */ {
 public:
  ChallengeScenarioPredictions();
  virtual ~ChallengeScenarioPredictions();

  ChallengeScenarioPredictions(const ChallengeScenarioPredictions& from);
  ChallengeScenarioPredictions(ChallengeScenarioPredictions&& from) noexcept
    : ChallengeScenarioPredictions() {
    *this = ::std::move(from);
  }

  inline ChallengeScenarioPredictions& operator=(const ChallengeScenarioPredictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeScenarioPredictions& operator=(ChallengeScenarioPredictions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeScenarioPredictions& default_instance();

  enum PredictionSetCase {
    kSinglePredictions = 2,
    kJointPrediction = 3,
    PREDICTION_SET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeScenarioPredictions* internal_default_instance() {
    return reinterpret_cast<const ChallengeScenarioPredictions*>(
               &_ChallengeScenarioPredictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChallengeScenarioPredictions& a, ChallengeScenarioPredictions& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeScenarioPredictions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeScenarioPredictions* New() const final {
    return CreateMaybeMessage<ChallengeScenarioPredictions>(nullptr);
  }

  ChallengeScenarioPredictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeScenarioPredictions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeScenarioPredictions& from);
  void MergeFrom(const ChallengeScenarioPredictions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeScenarioPredictions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.ChallengeScenarioPredictions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioIdFieldNumber = 1,
    kSinglePredictionsFieldNumber = 2,
    kJointPredictionFieldNumber = 3,
  };
  // optional string scenario_id = 1;
  bool has_scenario_id() const;
  void clear_scenario_id();
  const std::string& scenario_id() const;
  void set_scenario_id(const std::string& value);
  void set_scenario_id(std::string&& value);
  void set_scenario_id(const char* value);
  void set_scenario_id(const char* value, size_t size);
  std::string* mutable_scenario_id();
  std::string* release_scenario_id();
  void set_allocated_scenario_id(std::string* scenario_id);

  // optional .waymo.open_dataset.PredictionSet single_predictions = 2;
  bool has_single_predictions() const;
  void clear_single_predictions();
  const ::waymo::open_dataset::PredictionSet& single_predictions() const;
  ::waymo::open_dataset::PredictionSet* release_single_predictions();
  ::waymo::open_dataset::PredictionSet* mutable_single_predictions();
  void set_allocated_single_predictions(::waymo::open_dataset::PredictionSet* single_predictions);

  // optional .waymo.open_dataset.JointPrediction joint_prediction = 3;
  bool has_joint_prediction() const;
  void clear_joint_prediction();
  const ::waymo::open_dataset::JointPrediction& joint_prediction() const;
  ::waymo::open_dataset::JointPrediction* release_joint_prediction();
  ::waymo::open_dataset::JointPrediction* mutable_joint_prediction();
  void set_allocated_joint_prediction(::waymo::open_dataset::JointPrediction* joint_prediction);

  void clear_prediction_set();
  PredictionSetCase prediction_set_case() const;
  // @@protoc_insertion_point(class_scope:waymo.open_dataset.ChallengeScenarioPredictions)
 private:
  class _Internal;
  void set_has_single_predictions();
  void set_has_joint_prediction();

  inline bool has_prediction_set() const;
  inline void clear_has_prediction_set();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_id_;
  union PredictionSetUnion {
    PredictionSetUnion() {}
    ::waymo::open_dataset::PredictionSet* single_predictions_;
    ::waymo::open_dataset::JointPrediction* joint_prediction_;
  } prediction_set_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class MotionChallengeSubmission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.MotionChallengeSubmission) */ {
 public:
  MotionChallengeSubmission();
  virtual ~MotionChallengeSubmission();

  MotionChallengeSubmission(const MotionChallengeSubmission& from);
  MotionChallengeSubmission(MotionChallengeSubmission&& from) noexcept
    : MotionChallengeSubmission() {
    *this = ::std::move(from);
  }

  inline MotionChallengeSubmission& operator=(const MotionChallengeSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionChallengeSubmission& operator=(MotionChallengeSubmission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionChallengeSubmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionChallengeSubmission* internal_default_instance() {
    return reinterpret_cast<const MotionChallengeSubmission*>(
               &_MotionChallengeSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MotionChallengeSubmission& a, MotionChallengeSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionChallengeSubmission* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionChallengeSubmission* New() const final {
    return CreateMaybeMessage<MotionChallengeSubmission>(nullptr);
  }

  MotionChallengeSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionChallengeSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionChallengeSubmission& from);
  void MergeFrom(const MotionChallengeSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionChallengeSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.MotionChallengeSubmission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MotionChallengeSubmission_SubmissionType SubmissionType;
  static constexpr SubmissionType UNKNOWN =
    MotionChallengeSubmission_SubmissionType_UNKNOWN;
  static constexpr SubmissionType MOTION_PREDICTION =
    MotionChallengeSubmission_SubmissionType_MOTION_PREDICTION;
  static constexpr SubmissionType INTERACTION_PREDICTION =
    MotionChallengeSubmission_SubmissionType_INTERACTION_PREDICTION;
  static inline bool SubmissionType_IsValid(int value) {
    return MotionChallengeSubmission_SubmissionType_IsValid(value);
  }
  static constexpr SubmissionType SubmissionType_MIN =
    MotionChallengeSubmission_SubmissionType_SubmissionType_MIN;
  static constexpr SubmissionType SubmissionType_MAX =
    MotionChallengeSubmission_SubmissionType_SubmissionType_MAX;
  static constexpr int SubmissionType_ARRAYSIZE =
    MotionChallengeSubmission_SubmissionType_SubmissionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubmissionType_descriptor() {
    return MotionChallengeSubmission_SubmissionType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubmissionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubmissionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubmissionType_Name.");
    return MotionChallengeSubmission_SubmissionType_Name(enum_t_value);
  }
  static inline bool SubmissionType_Parse(const std::string& name,
      SubmissionType* value) {
    return MotionChallengeSubmission_SubmissionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioPredictionsFieldNumber = 1,
    kAuthorsFieldNumber = 5,
    kAccountNameFieldNumber = 3,
    kUniqueMethodNameFieldNumber = 4,
    kAffiliationFieldNumber = 6,
    kDescriptionFieldNumber = 7,
    kMethodLinkFieldNumber = 8,
    kSubmissionTypeFieldNumber = 2,
  };
  // repeated .waymo.open_dataset.ChallengeScenarioPredictions scenario_predictions = 1;
  int scenario_predictions_size() const;
  void clear_scenario_predictions();
  ::waymo::open_dataset::ChallengeScenarioPredictions* mutable_scenario_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ChallengeScenarioPredictions >*
      mutable_scenario_predictions();
  const ::waymo::open_dataset::ChallengeScenarioPredictions& scenario_predictions(int index) const;
  ::waymo::open_dataset::ChallengeScenarioPredictions* add_scenario_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ChallengeScenarioPredictions >&
      scenario_predictions() const;

  // repeated string authors = 5;
  int authors_size() const;
  void clear_authors();
  const std::string& authors(int index) const;
  std::string* mutable_authors(int index);
  void set_authors(int index, const std::string& value);
  void set_authors(int index, std::string&& value);
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  std::string* add_authors();
  void add_authors(const std::string& value);
  void add_authors(std::string&& value);
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authors();

  // optional string account_name = 3;
  bool has_account_name() const;
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);

  // optional string unique_method_name = 4;
  bool has_unique_method_name() const;
  void clear_unique_method_name();
  const std::string& unique_method_name() const;
  void set_unique_method_name(const std::string& value);
  void set_unique_method_name(std::string&& value);
  void set_unique_method_name(const char* value);
  void set_unique_method_name(const char* value, size_t size);
  std::string* mutable_unique_method_name();
  std::string* release_unique_method_name();
  void set_allocated_unique_method_name(std::string* unique_method_name);

  // optional string affiliation = 6;
  bool has_affiliation() const;
  void clear_affiliation();
  const std::string& affiliation() const;
  void set_affiliation(const std::string& value);
  void set_affiliation(std::string&& value);
  void set_affiliation(const char* value);
  void set_affiliation(const char* value, size_t size);
  std::string* mutable_affiliation();
  std::string* release_affiliation();
  void set_allocated_affiliation(std::string* affiliation);

  // optional string description = 7;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string method_link = 8;
  bool has_method_link() const;
  void clear_method_link();
  const std::string& method_link() const;
  void set_method_link(const std::string& value);
  void set_method_link(std::string&& value);
  void set_method_link(const char* value);
  void set_method_link(const char* value, size_t size);
  std::string* mutable_method_link();
  std::string* release_method_link();
  void set_allocated_method_link(std::string* method_link);

  // optional .waymo.open_dataset.MotionChallengeSubmission.SubmissionType submission_type = 2;
  bool has_submission_type() const;
  void clear_submission_type();
  ::waymo::open_dataset::MotionChallengeSubmission_SubmissionType submission_type() const;
  void set_submission_type(::waymo::open_dataset::MotionChallengeSubmission_SubmissionType value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.MotionChallengeSubmission)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ChallengeScenarioPredictions > scenario_predictions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affiliation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_link_;
  int submission_type_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trajectory

// repeated float center_x = 2 [packed = true];
inline int Trajectory::center_x_size() const {
  return center_x_.size();
}
inline void Trajectory::clear_center_x() {
  center_x_.Clear();
}
inline float Trajectory::center_x(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Trajectory.center_x)
  return center_x_.Get(index);
}
inline void Trajectory::set_center_x(int index, float value) {
  center_x_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Trajectory.center_x)
}
inline void Trajectory::add_center_x(float value) {
  center_x_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Trajectory.center_x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Trajectory::center_x() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Trajectory.center_x)
  return center_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Trajectory::mutable_center_x() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Trajectory.center_x)
  return &center_x_;
}

// repeated float center_y = 3 [packed = true];
inline int Trajectory::center_y_size() const {
  return center_y_.size();
}
inline void Trajectory::clear_center_y() {
  center_y_.Clear();
}
inline float Trajectory::center_y(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Trajectory.center_y)
  return center_y_.Get(index);
}
inline void Trajectory::set_center_y(int index, float value) {
  center_y_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Trajectory.center_y)
}
inline void Trajectory::add_center_y(float value) {
  center_y_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Trajectory.center_y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Trajectory::center_y() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Trajectory.center_y)
  return center_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Trajectory::mutable_center_y() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Trajectory.center_y)
  return &center_y_;
}

// -------------------------------------------------------------------

// ScoredTrajectory

// optional .waymo.open_dataset.Trajectory trajectory = 1;
inline bool ScoredTrajectory::has_trajectory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoredTrajectory::clear_trajectory() {
  if (trajectory_ != nullptr) trajectory_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::Trajectory& ScoredTrajectory::trajectory() const {
  const ::waymo::open_dataset::Trajectory* p = trajectory_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ScoredTrajectory.trajectory)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Trajectory*>(
      &::waymo::open_dataset::_Trajectory_default_instance_);
}
inline ::waymo::open_dataset::Trajectory* ScoredTrajectory::release_trajectory() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.ScoredTrajectory.trajectory)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Trajectory* temp = trajectory_;
  trajectory_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Trajectory* ScoredTrajectory::mutable_trajectory() {
  _has_bits_[0] |= 0x00000001u;
  if (trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Trajectory>(GetArenaNoVirtual());
    trajectory_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ScoredTrajectory.trajectory)
  return trajectory_;
}
inline void ScoredTrajectory::set_allocated_trajectory(::waymo::open_dataset::Trajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trajectory_;
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.ScoredTrajectory.trajectory)
}

// optional float confidence = 2;
inline bool ScoredTrajectory::has_confidence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoredTrajectory::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ScoredTrajectory::confidence() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ScoredTrajectory.confidence)
  return confidence_;
}
inline void ScoredTrajectory::set_confidence(float value) {
  _has_bits_[0] |= 0x00000002u;
  confidence_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ScoredTrajectory.confidence)
}

// -------------------------------------------------------------------

// SingleObjectPrediction

// optional int32 object_id = 1;
inline bool SingleObjectPrediction::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleObjectPrediction::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleObjectPrediction::object_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SingleObjectPrediction.object_id)
  return object_id_;
}
inline void SingleObjectPrediction::set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SingleObjectPrediction.object_id)
}

// repeated .waymo.open_dataset.ScoredTrajectory trajectories = 2;
inline int SingleObjectPrediction::trajectories_size() const {
  return trajectories_.size();
}
inline void SingleObjectPrediction::clear_trajectories() {
  trajectories_.Clear();
}
inline ::waymo::open_dataset::ScoredTrajectory* SingleObjectPrediction::mutable_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.SingleObjectPrediction.trajectories)
  return trajectories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredTrajectory >*
SingleObjectPrediction::mutable_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.SingleObjectPrediction.trajectories)
  return &trajectories_;
}
inline const ::waymo::open_dataset::ScoredTrajectory& SingleObjectPrediction::trajectories(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SingleObjectPrediction.trajectories)
  return trajectories_.Get(index);
}
inline ::waymo::open_dataset::ScoredTrajectory* SingleObjectPrediction::add_trajectories() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.SingleObjectPrediction.trajectories)
  return trajectories_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredTrajectory >&
SingleObjectPrediction::trajectories() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.SingleObjectPrediction.trajectories)
  return trajectories_;
}

// -------------------------------------------------------------------

// PredictionSet

// repeated .waymo.open_dataset.SingleObjectPrediction predictions = 1;
inline int PredictionSet::predictions_size() const {
  return predictions_.size();
}
inline void PredictionSet::clear_predictions() {
  predictions_.Clear();
}
inline ::waymo::open_dataset::SingleObjectPrediction* PredictionSet::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.PredictionSet.predictions)
  return predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleObjectPrediction >*
PredictionSet::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.PredictionSet.predictions)
  return &predictions_;
}
inline const ::waymo::open_dataset::SingleObjectPrediction& PredictionSet::predictions(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.PredictionSet.predictions)
  return predictions_.Get(index);
}
inline ::waymo::open_dataset::SingleObjectPrediction* PredictionSet::add_predictions() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.PredictionSet.predictions)
  return predictions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SingleObjectPrediction >&
PredictionSet::predictions() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.PredictionSet.predictions)
  return predictions_;
}

// -------------------------------------------------------------------

// ObjectTrajectory

// optional int32 object_id = 1;
inline bool ObjectTrajectory::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectTrajectory::clear_object_id() {
  object_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectTrajectory::object_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectTrajectory.object_id)
  return object_id_;
}
inline void ObjectTrajectory::set_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  object_id_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectTrajectory.object_id)
}

// optional .waymo.open_dataset.Trajectory trajectory = 2;
inline bool ObjectTrajectory::has_trajectory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectTrajectory::clear_trajectory() {
  if (trajectory_ != nullptr) trajectory_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::waymo::open_dataset::Trajectory& ObjectTrajectory::trajectory() const {
  const ::waymo::open_dataset::Trajectory* p = trajectory_;
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectTrajectory.trajectory)
  return p != nullptr ? *p : *reinterpret_cast<const ::waymo::open_dataset::Trajectory*>(
      &::waymo::open_dataset::_Trajectory_default_instance_);
}
inline ::waymo::open_dataset::Trajectory* ObjectTrajectory::release_trajectory() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.ObjectTrajectory.trajectory)
  _has_bits_[0] &= ~0x00000001u;
  ::waymo::open_dataset::Trajectory* temp = trajectory_;
  trajectory_ = nullptr;
  return temp;
}
inline ::waymo::open_dataset::Trajectory* ObjectTrajectory::mutable_trajectory() {
  _has_bits_[0] |= 0x00000001u;
  if (trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::waymo::open_dataset::Trajectory>(GetArenaNoVirtual());
    trajectory_ = p;
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ObjectTrajectory.trajectory)
  return trajectory_;
}
inline void ObjectTrajectory::set_allocated_trajectory(::waymo::open_dataset::Trajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trajectory_;
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.ObjectTrajectory.trajectory)
}

// -------------------------------------------------------------------

// ScoredJointTrajectory

// repeated .waymo.open_dataset.ObjectTrajectory trajectories = 2;
inline int ScoredJointTrajectory::trajectories_size() const {
  return trajectories_.size();
}
inline void ScoredJointTrajectory::clear_trajectories() {
  trajectories_.Clear();
}
inline ::waymo::open_dataset::ObjectTrajectory* ScoredJointTrajectory::mutable_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ScoredJointTrajectory.trajectories)
  return trajectories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectTrajectory >*
ScoredJointTrajectory::mutable_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.ScoredJointTrajectory.trajectories)
  return &trajectories_;
}
inline const ::waymo::open_dataset::ObjectTrajectory& ScoredJointTrajectory::trajectories(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ScoredJointTrajectory.trajectories)
  return trajectories_.Get(index);
}
inline ::waymo::open_dataset::ObjectTrajectory* ScoredJointTrajectory::add_trajectories() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.ScoredJointTrajectory.trajectories)
  return trajectories_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectTrajectory >&
ScoredJointTrajectory::trajectories() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.ScoredJointTrajectory.trajectories)
  return trajectories_;
}

// optional float confidence = 3;
inline bool ScoredJointTrajectory::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoredJointTrajectory::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ScoredJointTrajectory::confidence() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ScoredJointTrajectory.confidence)
  return confidence_;
}
inline void ScoredJointTrajectory::set_confidence(float value) {
  _has_bits_[0] |= 0x00000001u;
  confidence_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ScoredJointTrajectory.confidence)
}

// -------------------------------------------------------------------

// JointPrediction

// repeated .waymo.open_dataset.ScoredJointTrajectory joint_trajectories = 1;
inline int JointPrediction::joint_trajectories_size() const {
  return joint_trajectories_.size();
}
inline void JointPrediction::clear_joint_trajectories() {
  joint_trajectories_.Clear();
}
inline ::waymo::open_dataset::ScoredJointTrajectory* JointPrediction::mutable_joint_trajectories(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.JointPrediction.joint_trajectories)
  return joint_trajectories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredJointTrajectory >*
JointPrediction::mutable_joint_trajectories() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.JointPrediction.joint_trajectories)
  return &joint_trajectories_;
}
inline const ::waymo::open_dataset::ScoredJointTrajectory& JointPrediction::joint_trajectories(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.JointPrediction.joint_trajectories)
  return joint_trajectories_.Get(index);
}
inline ::waymo::open_dataset::ScoredJointTrajectory* JointPrediction::add_joint_trajectories() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.JointPrediction.joint_trajectories)
  return joint_trajectories_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ScoredJointTrajectory >&
JointPrediction::joint_trajectories() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.JointPrediction.joint_trajectories)
  return joint_trajectories_;
}

// -------------------------------------------------------------------

// ChallengeScenarioPredictions

// optional string scenario_id = 1;
inline bool ChallengeScenarioPredictions::has_scenario_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeScenarioPredictions::clear_scenario_id() {
  scenario_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChallengeScenarioPredictions::scenario_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
  return scenario_id_.GetNoArena();
}
inline void ChallengeScenarioPredictions::set_scenario_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
}
inline void ChallengeScenarioPredictions::set_scenario_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
}
inline void ChallengeScenarioPredictions::set_scenario_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
}
inline void ChallengeScenarioPredictions::set_scenario_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
}
inline std::string* ChallengeScenarioPredictions::mutable_scenario_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
  return scenario_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeScenarioPredictions::release_scenario_id() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
  if (!has_scenario_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scenario_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeScenarioPredictions::set_allocated_scenario_id(std::string* scenario_id) {
  if (scenario_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scenario_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario_id);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.ChallengeScenarioPredictions.scenario_id)
}

// optional .waymo.open_dataset.PredictionSet single_predictions = 2;
inline bool ChallengeScenarioPredictions::has_single_predictions() const {
  return prediction_set_case() == kSinglePredictions;
}
inline void ChallengeScenarioPredictions::set_has_single_predictions() {
  _oneof_case_[0] = kSinglePredictions;
}
inline void ChallengeScenarioPredictions::clear_single_predictions() {
  if (has_single_predictions()) {
    delete prediction_set_.single_predictions_;
    clear_has_prediction_set();
  }
}
inline ::waymo::open_dataset::PredictionSet* ChallengeScenarioPredictions::release_single_predictions() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.ChallengeScenarioPredictions.single_predictions)
  if (has_single_predictions()) {
    clear_has_prediction_set();
      ::waymo::open_dataset::PredictionSet* temp = prediction_set_.single_predictions_;
    prediction_set_.single_predictions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::waymo::open_dataset::PredictionSet& ChallengeScenarioPredictions::single_predictions() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ChallengeScenarioPredictions.single_predictions)
  return has_single_predictions()
      ? *prediction_set_.single_predictions_
      : *reinterpret_cast< ::waymo::open_dataset::PredictionSet*>(&::waymo::open_dataset::_PredictionSet_default_instance_);
}
inline ::waymo::open_dataset::PredictionSet* ChallengeScenarioPredictions::mutable_single_predictions() {
  if (!has_single_predictions()) {
    clear_prediction_set();
    set_has_single_predictions();
    prediction_set_.single_predictions_ = CreateMaybeMessage< ::waymo::open_dataset::PredictionSet >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ChallengeScenarioPredictions.single_predictions)
  return prediction_set_.single_predictions_;
}

// optional .waymo.open_dataset.JointPrediction joint_prediction = 3;
inline bool ChallengeScenarioPredictions::has_joint_prediction() const {
  return prediction_set_case() == kJointPrediction;
}
inline void ChallengeScenarioPredictions::set_has_joint_prediction() {
  _oneof_case_[0] = kJointPrediction;
}
inline void ChallengeScenarioPredictions::clear_joint_prediction() {
  if (has_joint_prediction()) {
    delete prediction_set_.joint_prediction_;
    clear_has_prediction_set();
  }
}
inline ::waymo::open_dataset::JointPrediction* ChallengeScenarioPredictions::release_joint_prediction() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.ChallengeScenarioPredictions.joint_prediction)
  if (has_joint_prediction()) {
    clear_has_prediction_set();
      ::waymo::open_dataset::JointPrediction* temp = prediction_set_.joint_prediction_;
    prediction_set_.joint_prediction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::waymo::open_dataset::JointPrediction& ChallengeScenarioPredictions::joint_prediction() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ChallengeScenarioPredictions.joint_prediction)
  return has_joint_prediction()
      ? *prediction_set_.joint_prediction_
      : *reinterpret_cast< ::waymo::open_dataset::JointPrediction*>(&::waymo::open_dataset::_JointPrediction_default_instance_);
}
inline ::waymo::open_dataset::JointPrediction* ChallengeScenarioPredictions::mutable_joint_prediction() {
  if (!has_joint_prediction()) {
    clear_prediction_set();
    set_has_joint_prediction();
    prediction_set_.joint_prediction_ = CreateMaybeMessage< ::waymo::open_dataset::JointPrediction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.ChallengeScenarioPredictions.joint_prediction)
  return prediction_set_.joint_prediction_;
}

inline bool ChallengeScenarioPredictions::has_prediction_set() const {
  return prediction_set_case() != PREDICTION_SET_NOT_SET;
}
inline void ChallengeScenarioPredictions::clear_has_prediction_set() {
  _oneof_case_[0] = PREDICTION_SET_NOT_SET;
}
inline ChallengeScenarioPredictions::PredictionSetCase ChallengeScenarioPredictions::prediction_set_case() const {
  return ChallengeScenarioPredictions::PredictionSetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MotionChallengeSubmission

// optional string account_name = 3;
inline bool MotionChallengeSubmission::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionChallengeSubmission::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MotionChallengeSubmission::account_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.account_name)
  return account_name_.GetNoArena();
}
inline void MotionChallengeSubmission::set_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.account_name)
}
inline void MotionChallengeSubmission::set_account_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.MotionChallengeSubmission.account_name)
}
inline void MotionChallengeSubmission::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.MotionChallengeSubmission.account_name)
}
inline void MotionChallengeSubmission::set_account_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.MotionChallengeSubmission.account_name)
}
inline std::string* MotionChallengeSubmission::mutable_account_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionChallengeSubmission.account_name)
  return account_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MotionChallengeSubmission::release_account_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.MotionChallengeSubmission.account_name)
  if (!has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return account_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MotionChallengeSubmission::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MotionChallengeSubmission.account_name)
}

// optional string unique_method_name = 4;
inline bool MotionChallengeSubmission::has_unique_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionChallengeSubmission::clear_unique_method_name() {
  unique_method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MotionChallengeSubmission::unique_method_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
  return unique_method_name_.GetNoArena();
}
inline void MotionChallengeSubmission::set_unique_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
}
inline void MotionChallengeSubmission::set_unique_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
}
inline void MotionChallengeSubmission::set_unique_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
}
inline void MotionChallengeSubmission::set_unique_method_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
}
inline std::string* MotionChallengeSubmission::mutable_unique_method_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
  return unique_method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MotionChallengeSubmission::release_unique_method_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
  if (!has_unique_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unique_method_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MotionChallengeSubmission::set_allocated_unique_method_name(std::string* unique_method_name) {
  if (unique_method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unique_method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_method_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MotionChallengeSubmission.unique_method_name)
}

// repeated string authors = 5;
inline int MotionChallengeSubmission::authors_size() const {
  return authors_.size();
}
inline void MotionChallengeSubmission::clear_authors() {
  authors_.Clear();
}
inline const std::string& MotionChallengeSubmission::authors(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.authors)
  return authors_.Get(index);
}
inline std::string* MotionChallengeSubmission::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionChallengeSubmission.authors)
  return authors_.Mutable(index);
}
inline void MotionChallengeSubmission::set_authors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.authors)
  authors_.Mutable(index)->assign(value);
}
inline void MotionChallengeSubmission::set_authors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
inline void MotionChallengeSubmission::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.MotionChallengeSubmission.authors)
}
inline void MotionChallengeSubmission::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.MotionChallengeSubmission.authors)
}
inline std::string* MotionChallengeSubmission::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:waymo.open_dataset.MotionChallengeSubmission.authors)
  return authors_.Add();
}
inline void MotionChallengeSubmission::add_authors(const std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MotionChallengeSubmission.authors)
}
inline void MotionChallengeSubmission::add_authors(std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MotionChallengeSubmission.authors)
}
inline void MotionChallengeSubmission::add_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:waymo.open_dataset.MotionChallengeSubmission.authors)
}
inline void MotionChallengeSubmission::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:waymo.open_dataset.MotionChallengeSubmission.authors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MotionChallengeSubmission::authors() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MotionChallengeSubmission.authors)
  return authors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MotionChallengeSubmission::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MotionChallengeSubmission.authors)
  return &authors_;
}

// optional string affiliation = 6;
inline bool MotionChallengeSubmission::has_affiliation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionChallengeSubmission::clear_affiliation() {
  affiliation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MotionChallengeSubmission::affiliation() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.affiliation)
  return affiliation_.GetNoArena();
}
inline void MotionChallengeSubmission::set_affiliation(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.affiliation)
}
inline void MotionChallengeSubmission::set_affiliation(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.MotionChallengeSubmission.affiliation)
}
inline void MotionChallengeSubmission::set_affiliation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.MotionChallengeSubmission.affiliation)
}
inline void MotionChallengeSubmission::set_affiliation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.MotionChallengeSubmission.affiliation)
}
inline std::string* MotionChallengeSubmission::mutable_affiliation() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionChallengeSubmission.affiliation)
  return affiliation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MotionChallengeSubmission::release_affiliation() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.MotionChallengeSubmission.affiliation)
  if (!has_affiliation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return affiliation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MotionChallengeSubmission::set_allocated_affiliation(std::string* affiliation) {
  if (affiliation != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  affiliation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affiliation);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MotionChallengeSubmission.affiliation)
}

// optional string description = 7;
inline bool MotionChallengeSubmission::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionChallengeSubmission::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MotionChallengeSubmission::description() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.description)
  return description_.GetNoArena();
}
inline void MotionChallengeSubmission::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.description)
}
inline void MotionChallengeSubmission::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.MotionChallengeSubmission.description)
}
inline void MotionChallengeSubmission::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.MotionChallengeSubmission.description)
}
inline void MotionChallengeSubmission::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.MotionChallengeSubmission.description)
}
inline std::string* MotionChallengeSubmission::mutable_description() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionChallengeSubmission.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MotionChallengeSubmission::release_description() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.MotionChallengeSubmission.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MotionChallengeSubmission::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MotionChallengeSubmission.description)
}

// optional string method_link = 8;
inline bool MotionChallengeSubmission::has_method_link() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionChallengeSubmission::clear_method_link() {
  method_link_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& MotionChallengeSubmission::method_link() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.method_link)
  return method_link_.GetNoArena();
}
inline void MotionChallengeSubmission::set_method_link(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.method_link)
}
inline void MotionChallengeSubmission::set_method_link(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.MotionChallengeSubmission.method_link)
}
inline void MotionChallengeSubmission::set_method_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.MotionChallengeSubmission.method_link)
}
inline void MotionChallengeSubmission::set_method_link(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.MotionChallengeSubmission.method_link)
}
inline std::string* MotionChallengeSubmission::mutable_method_link() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionChallengeSubmission.method_link)
  return method_link_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MotionChallengeSubmission::release_method_link() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.MotionChallengeSubmission.method_link)
  if (!has_method_link()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return method_link_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MotionChallengeSubmission::set_allocated_method_link(std::string* method_link) {
  if (method_link != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  method_link_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_link);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MotionChallengeSubmission.method_link)
}

// optional .waymo.open_dataset.MotionChallengeSubmission.SubmissionType submission_type = 2;
inline bool MotionChallengeSubmission::has_submission_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionChallengeSubmission::clear_submission_type() {
  submission_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::waymo::open_dataset::MotionChallengeSubmission_SubmissionType MotionChallengeSubmission::submission_type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.submission_type)
  return static_cast< ::waymo::open_dataset::MotionChallengeSubmission_SubmissionType >(submission_type_);
}
inline void MotionChallengeSubmission::set_submission_type(::waymo::open_dataset::MotionChallengeSubmission_SubmissionType value) {
  assert(::waymo::open_dataset::MotionChallengeSubmission_SubmissionType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  submission_type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.MotionChallengeSubmission.submission_type)
}

// repeated .waymo.open_dataset.ChallengeScenarioPredictions scenario_predictions = 1;
inline int MotionChallengeSubmission::scenario_predictions_size() const {
  return scenario_predictions_.size();
}
inline void MotionChallengeSubmission::clear_scenario_predictions() {
  scenario_predictions_.Clear();
}
inline ::waymo::open_dataset::ChallengeScenarioPredictions* MotionChallengeSubmission::mutable_scenario_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.MotionChallengeSubmission.scenario_predictions)
  return scenario_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ChallengeScenarioPredictions >*
MotionChallengeSubmission::mutable_scenario_predictions() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.MotionChallengeSubmission.scenario_predictions)
  return &scenario_predictions_;
}
inline const ::waymo::open_dataset::ChallengeScenarioPredictions& MotionChallengeSubmission::scenario_predictions(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.MotionChallengeSubmission.scenario_predictions)
  return scenario_predictions_.Get(index);
}
inline ::waymo::open_dataset::ChallengeScenarioPredictions* MotionChallengeSubmission::add_scenario_predictions() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.MotionChallengeSubmission.scenario_predictions)
  return scenario_predictions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ChallengeScenarioPredictions >&
MotionChallengeSubmission::scenario_predictions() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.MotionChallengeSubmission.scenario_predictions)
  return scenario_predictions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::MotionChallengeSubmission_SubmissionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::MotionChallengeSubmission_SubmissionType>() {
  return ::waymo::open_dataset::MotionChallengeSubmission_SubmissionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto
