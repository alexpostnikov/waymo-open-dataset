// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/motion_metrics.proto

#include "waymo_open_dataset/protos/motion_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionMetricsBundle_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionMetricsConfig_MeasurementStepConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto;
namespace waymo {
namespace open_dataset {
class SingleTrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleTrajectory> _instance;
} _SingleTrajectory_default_instance_;
class JointTrajectoriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointTrajectories> _instance;
} _JointTrajectories_default_instance_;
class MultimodalPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultimodalPrediction> _instance;
} _MultimodalPrediction_default_instance_;
class ScenarioPredictionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioPredictions> _instance;
} _ScenarioPredictions_default_instance_;
class MotionMetricsBundleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionMetricsBundle> _instance;
} _MotionMetricsBundle_default_instance_;
class MotionMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionMetrics> _instance;
} _MotionMetrics_default_instance_;
class MotionMetricsConfig_MeasurementStepConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionMetricsConfig_MeasurementStepConfig> _instance;
} _MotionMetricsConfig_MeasurementStepConfig_default_instance_;
class MotionMetricsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionMetricsConfig> _instance;
} _MotionMetricsConfig_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_JointTrajectories_default_instance_;
    new (ptr) ::waymo::open_dataset::JointTrajectories();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::JointTrajectories::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {
      &scc_info_SingleTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_MotionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MotionMetrics_default_instance_;
    new (ptr) ::waymo::open_dataset::MotionMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MotionMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MotionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MotionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {
      &scc_info_MotionMetricsBundle_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_MotionMetricsBundle_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MotionMetricsBundle_default_instance_;
    new (ptr) ::waymo::open_dataset::MotionMetricsBundle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MotionMetricsBundle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionMetricsBundle_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MotionMetricsBundle_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_MotionMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MotionMetricsConfig_default_instance_;
    new (ptr) ::waymo::open_dataset::MotionMetricsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MotionMetricsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MotionMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MotionMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {
      &scc_info_MotionMetricsConfig_MeasurementStepConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_MotionMetricsConfig_MeasurementStepConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MotionMetricsConfig_MeasurementStepConfig_default_instance_;
    new (ptr) ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionMetricsConfig_MeasurementStepConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MotionMetricsConfig_MeasurementStepConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MultimodalPrediction_default_instance_;
    new (ptr) ::waymo::open_dataset::MultimodalPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MultimodalPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {
      &scc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_ScenarioPredictions_default_instance_;
    new (ptr) ::waymo::open_dataset::ScenarioPredictions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::ScenarioPredictions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {
      &scc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_SingleTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SingleTrajectory_default_instance_;
    new (ptr) ::waymo::open_dataset::SingleTrajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::SingleTrajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SingleTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SingleTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleTrajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleTrajectory, object_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleTrajectory, center_x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleTrajectory, center_y_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::JointTrajectories, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::JointTrajectories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::JointTrajectories, trajectories_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::JointTrajectories, confidence_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MultimodalPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MultimodalPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MultimodalPrediction, joint_predictions_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScenarioPredictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScenarioPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScenarioPredictions, scenario_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScenarioPredictions, multi_modal_predictions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, object_filter_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, measurement_step_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, min_ade_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, min_fde_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, miss_rate_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, overlap_rate_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, mean_average_precision_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsBundle, soft_mean_average_precision_),
  6,
  5,
  0,
  1,
  2,
  3,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetrics, metrics_bundles_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig, measurement_step_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig, lateral_miss_threshold_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig, longitudinal_miss_threshold_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, track_steps_per_second_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, prediction_steps_per_second_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, track_history_samples_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, track_future_samples_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, speed_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, speed_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, speed_scale_lower_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, speed_scale_upper_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, step_configurations_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionMetricsConfig, max_predictions_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::waymo::open_dataset::SingleTrajectory)},
  { 11, 18, sizeof(::waymo::open_dataset::JointTrajectories)},
  { 20, 26, sizeof(::waymo::open_dataset::MultimodalPrediction)},
  { 27, 34, sizeof(::waymo::open_dataset::ScenarioPredictions)},
  { 36, 49, sizeof(::waymo::open_dataset::MotionMetricsBundle)},
  { 57, 63, sizeof(::waymo::open_dataset::MotionMetrics)},
  { 64, 72, sizeof(::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig)},
  { 75, 90, sizeof(::waymo::open_dataset::MotionMetricsConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SingleTrajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_JointTrajectories_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MultimodalPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_ScenarioPredictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MotionMetricsBundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MotionMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MotionMetricsConfig_MeasurementStepConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MotionMetricsConfig_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.waymo_open_dataset/protos/motion_metri"
  "cs.proto\022\022waymo.open_dataset\032(waymo_open"
  "_dataset/protos/scenario.proto\"Q\n\020Single"
  "Trajectory\022\021\n\tobject_id\030\001 \001(\005\022\024\n\010center_"
  "x\030\002 \003(\002B\002\020\001\022\024\n\010center_y\030\003 \003(\002B\002\020\001\"c\n\021Joi"
  "ntTrajectories\022:\n\014trajectories\030\002 \003(\0132$.w"
  "aymo.open_dataset.SingleTrajectory\022\022\n\nco"
  "nfidence\030\003 \001(\002\"X\n\024MultimodalPrediction\022@"
  "\n\021joint_predictions\030\001 \003(\0132%.waymo.open_d"
  "ataset.JointTrajectories\"u\n\023ScenarioPred"
  "ictions\022\023\n\013scenario_id\030\001 \001(\t\022I\n\027multi_mo"
  "dal_predictions\030\002 \003(\0132(.waymo.open_datas"
  "et.MultimodalPrediction\"\374\001\n\023MotionMetric"
  "sBundle\022;\n\robject_filter\030\007 \001(\0162$.waymo.o"
  "pen_dataset.Track.ObjectType\022\030\n\020measurem"
  "ent_step\030\006 \001(\005\022\017\n\007min_ade\030\001 \001(\002\022\017\n\007min_f"
  "de\030\002 \001(\002\022\021\n\tmiss_rate\030\003 \001(\002\022\024\n\014overlap_r"
  "ate\030\004 \001(\002\022\036\n\026mean_average_precision\030\005 \001("
  "\002\022#\n\033soft_mean_average_precision\030\010 \001(\002\"Q"
  "\n\rMotionMetrics\022@\n\017metrics_bundles\030\001 \003(\013"
  "2\'.waymo.open_dataset.MotionMetricsBundl"
  "e\"\223\004\n\023MotionMetricsConfig\022\"\n\026track_steps"
  "_per_second\030\001 \001(\005:\00210\022&\n\033prediction_step"
  "s_per_second\030\002 \001(\005:\0012\022!\n\025track_history_s"
  "amples\030\003 \001(\005:\00210\022 \n\024track_future_samples"
  "\030\004 \001(\005:\00280\022\036\n\021speed_lower_bound\030\005 \001(\002:\0031"
  ".4\022\035\n\021speed_upper_bound\030\006 \001(\002:\00211\022\036\n\021spe"
  "ed_scale_lower\030\007 \001(\002:\0030.5\022\034\n\021speed_scale"
  "_upper\030\010 \001(\002:\0011\022Z\n\023step_configurations\030\t"
  " \003(\0132=.waymo.open_dataset.MotionMetricsC"
  "onfig.MeasurementStepConfig\022\032\n\017max_predi"
  "ctions\030\n \001(\005:\0016\032v\n\025MeasurementStepConfig"
  "\022\030\n\020measurement_step\030\001 \001(\005\022\036\n\026lateral_mi"
  "ss_threshold\030\002 \001(\002\022#\n\033longitudinal_miss_"
  "threshold\030\003 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_deps[1] = {
  &::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_sccs[8] = {
  &scc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
  &scc_info_MotionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
  &scc_info_MotionMetricsBundle_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
  &scc_info_MotionMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
  &scc_info_MotionMetricsConfig_MeasurementStepConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
  &scc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
  &scc_info_ScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
  &scc_info_SingleTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto, "waymo_open_dataset/protos/motion_metrics.proto", 1375,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto, 8, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto), true);
namespace waymo {
namespace open_dataset {

// ===================================================================

void SingleTrajectory::InitAsDefaultInstance() {
}
class SingleTrajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleTrajectory>()._has_bits_);
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SingleTrajectory::SingleTrajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.SingleTrajectory)
}
SingleTrajectory::SingleTrajectory(const SingleTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      center_x_(from.center_x_),
      center_y_(from.center_y_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.SingleTrajectory)
}

void SingleTrajectory::SharedCtor() {
  object_id_ = 0;
}

SingleTrajectory::~SingleTrajectory() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.SingleTrajectory)
  SharedDtor();
}

void SingleTrajectory::SharedDtor() {
}

void SingleTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleTrajectory& SingleTrajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void SingleTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.SingleTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_x_.Clear();
  center_y_.Clear();
  object_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SingleTrajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float center_x = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_center_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_center_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float center_y = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_center_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_center_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SingleTrajectory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.SingleTrajectory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 object_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_object_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float center_x = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_center_x())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_center_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float center_y = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_center_y())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_center_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.SingleTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.SingleTrajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SingleTrajectory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.SingleTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->object_id(), output);
  }

  // repeated float center_x = 2 [packed = true];
  if (this->center_x_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_center_x_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->center_x().data(), this->center_x_size(), output);
  }

  // repeated float center_y = 3 [packed = true];
  if (this->center_y_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_center_y_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->center_y().data(), this->center_y_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.SingleTrajectory)
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleTrajectory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.SingleTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->object_id(), target);
  }

  // repeated float center_x = 2 [packed = true];
  if (this->center_x_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _center_x_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->center_x_, target);
  }

  // repeated float center_y = 3 [packed = true];
  if (this->center_y_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _center_y_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->center_y_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.SingleTrajectory)
  return target;
}

size_t SingleTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.SingleTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float center_x = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->center_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _center_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float center_y = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->center_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _center_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional int32 object_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->object_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTrajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.SingleTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTrajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleTrajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.SingleTrajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.SingleTrajectory)
    MergeFrom(*source);
  }
}

void SingleTrajectory::MergeFrom(const SingleTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.SingleTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_x_.MergeFrom(from.center_x_);
  center_y_.MergeFrom(from.center_y_);
  if (from.has_object_id()) {
    set_object_id(from.object_id());
  }
}

void SingleTrajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.SingleTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTrajectory::CopyFrom(const SingleTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.SingleTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTrajectory::IsInitialized() const {
  return true;
}

void SingleTrajectory::InternalSwap(SingleTrajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  center_x_.InternalSwap(&other->center_x_);
  center_y_.InternalSwap(&other->center_y_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleTrajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointTrajectories::InitAsDefaultInstance() {
}
class JointTrajectories::_Internal {
 public:
  using HasBits = decltype(std::declval<JointTrajectories>()._has_bits_);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

JointTrajectories::JointTrajectories()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.JointTrajectories)
}
JointTrajectories::JointTrajectories(const JointTrajectories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectories_(from.trajectories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.JointTrajectories)
}

void JointTrajectories::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  confidence_ = 0;
}

JointTrajectories::~JointTrajectories() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.JointTrajectories)
  SharedDtor();
}

void JointTrajectories::SharedDtor() {
}

void JointTrajectories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointTrajectories& JointTrajectories::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointTrajectories_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void JointTrajectories::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.JointTrajectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_.Clear();
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JointTrajectories::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.SingleTrajectory trajectories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JointTrajectories::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.JointTrajectories)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.SingleTrajectory trajectories = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trajectories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_confidence(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.JointTrajectories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.JointTrajectories)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JointTrajectories::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.JointTrajectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SingleTrajectory trajectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectories(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float confidence = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.JointTrajectories)
}

::PROTOBUF_NAMESPACE_ID::uint8* JointTrajectories::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.JointTrajectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SingleTrajectory trajectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectories(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float confidence = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.JointTrajectories)
  return target;
}

size_t JointTrajectories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.JointTrajectories)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SingleTrajectory trajectories = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trajectories(static_cast<int>(i)));
    }
  }

  // optional float confidence = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointTrajectories::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.JointTrajectories)
  GOOGLE_DCHECK_NE(&from, this);
  const JointTrajectories* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointTrajectories>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.JointTrajectories)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.JointTrajectories)
    MergeFrom(*source);
  }
}

void JointTrajectories::MergeFrom(const JointTrajectories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.JointTrajectories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_.MergeFrom(from.trajectories_);
  if (from.has_confidence()) {
    set_confidence(from.confidence());
  }
}

void JointTrajectories::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.JointTrajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointTrajectories::CopyFrom(const JointTrajectories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.JointTrajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointTrajectories::IsInitialized() const {
  return true;
}

void JointTrajectories::InternalSwap(JointTrajectories* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectories_)->InternalSwap(CastToBase(&other->trajectories_));
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointTrajectories::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultimodalPrediction::InitAsDefaultInstance() {
}
class MultimodalPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<MultimodalPrediction>()._has_bits_);
};

MultimodalPrediction::MultimodalPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MultimodalPrediction)
}
MultimodalPrediction::MultimodalPrediction(const MultimodalPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      joint_predictions_(from.joint_predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MultimodalPrediction)
}

void MultimodalPrediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
}

MultimodalPrediction::~MultimodalPrediction() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MultimodalPrediction)
  SharedDtor();
}

void MultimodalPrediction::SharedDtor() {
}

void MultimodalPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultimodalPrediction& MultimodalPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultimodalPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MultimodalPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MultimodalPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_predictions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MultimodalPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.JointTrajectories joint_predictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_joint_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MultimodalPrediction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MultimodalPrediction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.JointTrajectories joint_predictions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_joint_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MultimodalPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MultimodalPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MultimodalPrediction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MultimodalPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.JointTrajectories joint_predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_predictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->joint_predictions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MultimodalPrediction)
}

::PROTOBUF_NAMESPACE_ID::uint8* MultimodalPrediction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MultimodalPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.JointTrajectories joint_predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_predictions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->joint_predictions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MultimodalPrediction)
  return target;
}

size_t MultimodalPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MultimodalPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.JointTrajectories joint_predictions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->joint_predictions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultimodalPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MultimodalPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const MultimodalPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultimodalPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MultimodalPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MultimodalPrediction)
    MergeFrom(*source);
  }
}

void MultimodalPrediction::MergeFrom(const MultimodalPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MultimodalPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_predictions_.MergeFrom(from.joint_predictions_);
}

void MultimodalPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MultimodalPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultimodalPrediction::CopyFrom(const MultimodalPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MultimodalPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultimodalPrediction::IsInitialized() const {
  return true;
}

void MultimodalPrediction::InternalSwap(MultimodalPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&joint_predictions_)->InternalSwap(CastToBase(&other->joint_predictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultimodalPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioPredictions::InitAsDefaultInstance() {
}
class ScenarioPredictions::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioPredictions>()._has_bits_);
  static void set_has_scenario_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioPredictions::ScenarioPredictions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.ScenarioPredictions)
}
ScenarioPredictions::ScenarioPredictions(const ScenarioPredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      multi_modal_predictions_(from.multi_modal_predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenario_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scenario_id()) {
    scenario_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenario_id_);
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.ScenarioPredictions)
}

void ScenarioPredictions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  scenario_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScenarioPredictions::~ScenarioPredictions() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.ScenarioPredictions)
  SharedDtor();
}

void ScenarioPredictions::SharedDtor() {
  scenario_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScenarioPredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioPredictions& ScenarioPredictions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ScenarioPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.ScenarioPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_modal_predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    scenario_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScenarioPredictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scenario_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_scenario_id(), ptr, ctx, "waymo.open_dataset.ScenarioPredictions.scenario_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.MultimodalPrediction multi_modal_predictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_multi_modal_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScenarioPredictions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.ScenarioPredictions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scenario_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scenario_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.ScenarioPredictions.scenario_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.MultimodalPrediction multi_modal_predictions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_multi_modal_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.ScenarioPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.ScenarioPredictions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScenarioPredictions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.ScenarioPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.ScenarioPredictions.scenario_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scenario_id(), output);
  }

  // repeated .waymo.open_dataset.MultimodalPrediction multi_modal_predictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_modal_predictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->multi_modal_predictions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.ScenarioPredictions)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioPredictions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.ScenarioPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.ScenarioPredictions.scenario_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->scenario_id(), target);
  }

  // repeated .waymo.open_dataset.MultimodalPrediction multi_modal_predictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_modal_predictions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->multi_modal_predictions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.ScenarioPredictions)
  return target;
}

size_t ScenarioPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.ScenarioPredictions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MultimodalPrediction multi_modal_predictions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->multi_modal_predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->multi_modal_predictions(static_cast<int>(i)));
    }
  }

  // optional string scenario_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scenario_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioPredictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.ScenarioPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioPredictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioPredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.ScenarioPredictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.ScenarioPredictions)
    MergeFrom(*source);
  }
}

void ScenarioPredictions::MergeFrom(const ScenarioPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.ScenarioPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_modal_predictions_.MergeFrom(from.multi_modal_predictions_);
  if (from.has_scenario_id()) {
    _has_bits_[0] |= 0x00000001u;
    scenario_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenario_id_);
  }
}

void ScenarioPredictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.ScenarioPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioPredictions::CopyFrom(const ScenarioPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.ScenarioPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioPredictions::IsInitialized() const {
  return true;
}

void ScenarioPredictions::InternalSwap(ScenarioPredictions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&multi_modal_predictions_)->InternalSwap(CastToBase(&other->multi_modal_predictions_));
  scenario_id_.Swap(&other->scenario_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioPredictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotionMetricsBundle::InitAsDefaultInstance() {
}
class MotionMetricsBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionMetricsBundle>()._has_bits_);
  static void set_has_object_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_measurement_step(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_ade(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_fde(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_miss_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_overlap_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mean_average_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_soft_mean_average_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MotionMetricsBundle::MotionMetricsBundle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MotionMetricsBundle)
}
MotionMetricsBundle::MotionMetricsBundle(const MotionMetricsBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_ade_, &from.min_ade_,
    static_cast<size_t>(reinterpret_cast<char*>(&soft_mean_average_precision_) -
    reinterpret_cast<char*>(&min_ade_)) + sizeof(soft_mean_average_precision_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MotionMetricsBundle)
}

void MotionMetricsBundle::SharedCtor() {
  ::memset(&min_ade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&soft_mean_average_precision_) -
      reinterpret_cast<char*>(&min_ade_)) + sizeof(soft_mean_average_precision_));
}

MotionMetricsBundle::~MotionMetricsBundle() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MotionMetricsBundle)
  SharedDtor();
}

void MotionMetricsBundle::SharedDtor() {
}

void MotionMetricsBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionMetricsBundle& MotionMetricsBundle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionMetricsBundle_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MotionMetricsBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MotionMetricsBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&min_ade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soft_mean_average_precision_) -
        reinterpret_cast<char*>(&min_ade_)) + sizeof(soft_mean_average_precision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionMetricsBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_ade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_ade(&has_bits);
          min_ade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_fde = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_fde(&has_bits);
          min_fde_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float miss_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_miss_rate(&has_bits);
          miss_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float overlap_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_overlap_rate(&has_bits);
          overlap_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_average_precision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_mean_average_precision(&has_bits);
          mean_average_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 measurement_step = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_measurement_step(&has_bits);
          measurement_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Track.ObjectType object_filter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Track_ObjectType_IsValid(val))) {
            set_object_filter(static_cast<::waymo::open_dataset::Track_ObjectType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float soft_mean_average_precision = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_soft_mean_average_precision(&has_bits);
          soft_mean_average_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionMetricsBundle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MotionMetricsBundle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_ade = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_min_ade(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_ade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_fde = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_min_fde(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_fde_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float miss_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_miss_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &miss_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_rate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_overlap_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean_average_precision = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_mean_average_precision(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_average_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 measurement_step = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_measurement_step(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &measurement_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Track.ObjectType object_filter = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Track_ObjectType_IsValid(value)) {
            set_object_filter(static_cast< ::waymo::open_dataset::Track_ObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float soft_mean_average_precision = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_soft_mean_average_precision(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &soft_mean_average_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MotionMetricsBundle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MotionMetricsBundle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionMetricsBundle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MotionMetricsBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_ade = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->min_ade(), output);
  }

  // optional float min_fde = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->min_fde(), output);
  }

  // optional float miss_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->miss_rate(), output);
  }

  // optional float overlap_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->overlap_rate(), output);
  }

  // optional float mean_average_precision = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->mean_average_precision(), output);
  }

  // optional int32 measurement_step = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->measurement_step(), output);
  }

  // optional .waymo.open_dataset.Track.ObjectType object_filter = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->object_filter(), output);
  }

  // optional float soft_mean_average_precision = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->soft_mean_average_precision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MotionMetricsBundle)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionMetricsBundle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MotionMetricsBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_ade = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->min_ade(), target);
  }

  // optional float min_fde = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->min_fde(), target);
  }

  // optional float miss_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->miss_rate(), target);
  }

  // optional float overlap_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->overlap_rate(), target);
  }

  // optional float mean_average_precision = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->mean_average_precision(), target);
  }

  // optional int32 measurement_step = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->measurement_step(), target);
  }

  // optional .waymo.open_dataset.Track.ObjectType object_filter = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->object_filter(), target);
  }

  // optional float soft_mean_average_precision = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->soft_mean_average_precision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MotionMetricsBundle)
  return target;
}

size_t MotionMetricsBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MotionMetricsBundle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float min_ade = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_fde = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float miss_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float overlap_rate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float mean_average_precision = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 measurement_step = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->measurement_step());
    }

    // optional .waymo.open_dataset.Track.ObjectType object_filter = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->object_filter());
    }

    // optional float soft_mean_average_precision = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionMetricsBundle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MotionMetricsBundle)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionMetricsBundle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionMetricsBundle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MotionMetricsBundle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MotionMetricsBundle)
    MergeFrom(*source);
  }
}

void MotionMetricsBundle::MergeFrom(const MotionMetricsBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MotionMetricsBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      min_ade_ = from.min_ade_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_fde_ = from.min_fde_;
    }
    if (cached_has_bits & 0x00000004u) {
      miss_rate_ = from.miss_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      overlap_rate_ = from.overlap_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      mean_average_precision_ = from.mean_average_precision_;
    }
    if (cached_has_bits & 0x00000020u) {
      measurement_step_ = from.measurement_step_;
    }
    if (cached_has_bits & 0x00000040u) {
      object_filter_ = from.object_filter_;
    }
    if (cached_has_bits & 0x00000080u) {
      soft_mean_average_precision_ = from.soft_mean_average_precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionMetricsBundle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MotionMetricsBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionMetricsBundle::CopyFrom(const MotionMetricsBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MotionMetricsBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionMetricsBundle::IsInitialized() const {
  return true;
}

void MotionMetricsBundle::InternalSwap(MotionMetricsBundle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_ade_, other->min_ade_);
  swap(min_fde_, other->min_fde_);
  swap(miss_rate_, other->miss_rate_);
  swap(overlap_rate_, other->overlap_rate_);
  swap(mean_average_precision_, other->mean_average_precision_);
  swap(measurement_step_, other->measurement_step_);
  swap(object_filter_, other->object_filter_);
  swap(soft_mean_average_precision_, other->soft_mean_average_precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionMetricsBundle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotionMetrics::InitAsDefaultInstance() {
}
class MotionMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionMetrics>()._has_bits_);
};

MotionMetrics::MotionMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MotionMetrics)
}
MotionMetrics::MotionMetrics(const MotionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      metrics_bundles_(from.metrics_bundles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MotionMetrics)
}

void MotionMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
}

MotionMetrics::~MotionMetrics() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MotionMetrics)
  SharedDtor();
}

void MotionMetrics::SharedDtor() {
}

void MotionMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionMetrics& MotionMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionMetrics_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MotionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MotionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_bundles_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.MotionMetricsBundle metrics_bundles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metrics_bundles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MotionMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.MotionMetricsBundle metrics_bundles = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metrics_bundles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MotionMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MotionMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MotionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MotionMetricsBundle metrics_bundles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_bundles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->metrics_bundles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MotionMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MotionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MotionMetricsBundle metrics_bundles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metrics_bundles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->metrics_bundles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MotionMetrics)
  return target;
}

size_t MotionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MotionMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MotionMetricsBundle metrics_bundles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->metrics_bundles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metrics_bundles(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MotionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MotionMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MotionMetrics)
    MergeFrom(*source);
  }
}

void MotionMetrics::MergeFrom(const MotionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MotionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_bundles_.MergeFrom(from.metrics_bundles_);
}

void MotionMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MotionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionMetrics::CopyFrom(const MotionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MotionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionMetrics::IsInitialized() const {
  return true;
}

void MotionMetrics::InternalSwap(MotionMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&metrics_bundles_)->InternalSwap(CastToBase(&other->metrics_bundles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotionMetricsConfig_MeasurementStepConfig::InitAsDefaultInstance() {
}
class MotionMetricsConfig_MeasurementStepConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionMetricsConfig_MeasurementStepConfig>()._has_bits_);
  static void set_has_measurement_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lateral_miss_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitudinal_miss_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MotionMetricsConfig_MeasurementStepConfig::MotionMetricsConfig_MeasurementStepConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
}
MotionMetricsConfig_MeasurementStepConfig::MotionMetricsConfig_MeasurementStepConfig(const MotionMetricsConfig_MeasurementStepConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&measurement_step_, &from.measurement_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitudinal_miss_threshold_) -
    reinterpret_cast<char*>(&measurement_step_)) + sizeof(longitudinal_miss_threshold_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
}

void MotionMetricsConfig_MeasurementStepConfig::SharedCtor() {
  ::memset(&measurement_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitudinal_miss_threshold_) -
      reinterpret_cast<char*>(&measurement_step_)) + sizeof(longitudinal_miss_threshold_));
}

MotionMetricsConfig_MeasurementStepConfig::~MotionMetricsConfig_MeasurementStepConfig() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  SharedDtor();
}

void MotionMetricsConfig_MeasurementStepConfig::SharedDtor() {
}

void MotionMetricsConfig_MeasurementStepConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionMetricsConfig_MeasurementStepConfig& MotionMetricsConfig_MeasurementStepConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionMetricsConfig_MeasurementStepConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MotionMetricsConfig_MeasurementStepConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&measurement_step_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitudinal_miss_threshold_) -
        reinterpret_cast<char*>(&measurement_step_)) + sizeof(longitudinal_miss_threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionMetricsConfig_MeasurementStepConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 measurement_step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_measurement_step(&has_bits);
          measurement_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lateral_miss_threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_lateral_miss_threshold(&has_bits);
          lateral_miss_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitudinal_miss_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_longitudinal_miss_threshold(&has_bits);
          longitudinal_miss_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionMetricsConfig_MeasurementStepConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 measurement_step = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_measurement_step(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &measurement_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lateral_miss_threshold = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_lateral_miss_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateral_miss_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float longitudinal_miss_threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_longitudinal_miss_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitudinal_miss_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionMetricsConfig_MeasurementStepConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 measurement_step = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->measurement_step(), output);
  }

  // optional float lateral_miss_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->lateral_miss_threshold(), output);
  }

  // optional float longitudinal_miss_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->longitudinal_miss_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionMetricsConfig_MeasurementStepConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 measurement_step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->measurement_step(), target);
  }

  // optional float lateral_miss_threshold = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->lateral_miss_threshold(), target);
  }

  // optional float longitudinal_miss_threshold = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->longitudinal_miss_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  return target;
}

size_t MotionMetricsConfig_MeasurementStepConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 measurement_step = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->measurement_step());
    }

    // optional float lateral_miss_threshold = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float longitudinal_miss_threshold = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionMetricsConfig_MeasurementStepConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionMetricsConfig_MeasurementStepConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionMetricsConfig_MeasurementStepConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
    MergeFrom(*source);
  }
}

void MotionMetricsConfig_MeasurementStepConfig::MergeFrom(const MotionMetricsConfig_MeasurementStepConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      measurement_step_ = from.measurement_step_;
    }
    if (cached_has_bits & 0x00000002u) {
      lateral_miss_threshold_ = from.lateral_miss_threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitudinal_miss_threshold_ = from.longitudinal_miss_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionMetricsConfig_MeasurementStepConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionMetricsConfig_MeasurementStepConfig::CopyFrom(const MotionMetricsConfig_MeasurementStepConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionMetricsConfig_MeasurementStepConfig::IsInitialized() const {
  return true;
}

void MotionMetricsConfig_MeasurementStepConfig::InternalSwap(MotionMetricsConfig_MeasurementStepConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(measurement_step_, other->measurement_step_);
  swap(lateral_miss_threshold_, other->lateral_miss_threshold_);
  swap(longitudinal_miss_threshold_, other->longitudinal_miss_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionMetricsConfig_MeasurementStepConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotionMetricsConfig::InitAsDefaultInstance() {
}
class MotionMetricsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionMetricsConfig>()._has_bits_);
  static void set_has_track_steps_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prediction_steps_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_track_history_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_track_future_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_lower_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed_scale_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_speed_scale_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_predictions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MotionMetricsConfig::MotionMetricsConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MotionMetricsConfig)
}
MotionMetricsConfig::MotionMetricsConfig(const MotionMetricsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      step_configurations_(from.step_configurations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_predictions_, &from.max_predictions_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_scale_upper_) -
    reinterpret_cast<char*>(&max_predictions_)) + sizeof(speed_scale_upper_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MotionMetricsConfig)
}

void MotionMetricsConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotionMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  max_predictions_ = 6;
  track_steps_per_second_ = 10;
  prediction_steps_per_second_ = 2;
  track_history_samples_ = 10;
  track_future_samples_ = 80;
  speed_lower_bound_ = 1.4f;
  speed_upper_bound_ = 11;
  speed_scale_lower_ = 0.5f;
  speed_scale_upper_ = 1;
}

MotionMetricsConfig::~MotionMetricsConfig() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MotionMetricsConfig)
  SharedDtor();
}

void MotionMetricsConfig::SharedDtor() {
}

void MotionMetricsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionMetricsConfig& MotionMetricsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MotionMetricsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MotionMetricsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_configurations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    max_predictions_ = 6;
    track_steps_per_second_ = 10;
    prediction_steps_per_second_ = 2;
    track_history_samples_ = 10;
    track_future_samples_ = 80;
    speed_lower_bound_ = 1.4f;
    speed_upper_bound_ = 11;
    speed_scale_lower_ = 0.5f;
  }
  speed_scale_upper_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionMetricsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 track_steps_per_second = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_track_steps_per_second(&has_bits);
          track_steps_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 prediction_steps_per_second = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prediction_steps_per_second(&has_bits);
          prediction_steps_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 track_history_samples = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_track_history_samples(&has_bits);
          track_history_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 track_future_samples = 4 [default = 80];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_track_future_samples(&has_bits);
          track_future_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float speed_lower_bound = 5 [default = 1.4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_speed_lower_bound(&has_bits);
          speed_lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_upper_bound = 6 [default = 11];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_speed_upper_bound(&has_bits);
          speed_upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_scale_lower = 7 [default = 0.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_speed_scale_lower(&has_bits);
          speed_scale_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float speed_scale_upper = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_speed_scale_upper(&has_bits);
          speed_scale_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig step_configurations = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_step_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional int32 max_predictions = 10 [default = 6];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_predictions(&has_bits);
          max_predictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionMetricsConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MotionMetricsConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 track_steps_per_second = 1 [default = 10];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_track_steps_per_second(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_steps_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prediction_steps_per_second = 2 [default = 2];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_prediction_steps_per_second(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &prediction_steps_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track_history_samples = 3 [default = 10];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_track_history_samples(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_history_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track_future_samples = 4 [default = 80];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_track_future_samples(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_future_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_lower_bound = 5 [default = 1.4];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_speed_lower_bound(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_upper_bound = 6 [default = 11];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_speed_upper_bound(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_scale_lower = 7 [default = 0.5];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_speed_scale_lower(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_scale_lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_scale_upper = 8 [default = 1];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          _Internal::set_has_speed_scale_upper(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_scale_upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig step_configurations = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_step_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_predictions = 10 [default = 6];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_max_predictions(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_predictions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MotionMetricsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MotionMetricsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionMetricsConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MotionMetricsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 track_steps_per_second = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->track_steps_per_second(), output);
  }

  // optional int32 prediction_steps_per_second = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->prediction_steps_per_second(), output);
  }

  // optional int32 track_history_samples = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->track_history_samples(), output);
  }

  // optional int32 track_future_samples = 4 [default = 80];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->track_future_samples(), output);
  }

  // optional float speed_lower_bound = 5 [default = 1.4];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->speed_lower_bound(), output);
  }

  // optional float speed_upper_bound = 6 [default = 11];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->speed_upper_bound(), output);
  }

  // optional float speed_scale_lower = 7 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->speed_scale_lower(), output);
  }

  // optional float speed_scale_upper = 8 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->speed_scale_upper(), output);
  }

  // repeated .waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig step_configurations = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_configurations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->step_configurations(static_cast<int>(i)),
      output);
  }

  // optional int32 max_predictions = 10 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->max_predictions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MotionMetricsConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionMetricsConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MotionMetricsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 track_steps_per_second = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->track_steps_per_second(), target);
  }

  // optional int32 prediction_steps_per_second = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->prediction_steps_per_second(), target);
  }

  // optional int32 track_history_samples = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->track_history_samples(), target);
  }

  // optional int32 track_future_samples = 4 [default = 80];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->track_future_samples(), target);
  }

  // optional float speed_lower_bound = 5 [default = 1.4];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->speed_lower_bound(), target);
  }

  // optional float speed_upper_bound = 6 [default = 11];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->speed_upper_bound(), target);
  }

  // optional float speed_scale_lower = 7 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->speed_scale_lower(), target);
  }

  // optional float speed_scale_upper = 8 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->speed_scale_upper(), target);
  }

  // repeated .waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig step_configurations = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->step_configurations_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->step_configurations(static_cast<int>(i)), target);
  }

  // optional int32 max_predictions = 10 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->max_predictions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MotionMetricsConfig)
  return target;
}

size_t MotionMetricsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MotionMetricsConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MotionMetricsConfig.MeasurementStepConfig step_configurations = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->step_configurations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->step_configurations(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 max_predictions = 10 [default = 6];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_predictions());
    }

    // optional int32 track_steps_per_second = 1 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->track_steps_per_second());
    }

    // optional int32 prediction_steps_per_second = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->prediction_steps_per_second());
    }

    // optional int32 track_history_samples = 3 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->track_history_samples());
    }

    // optional int32 track_future_samples = 4 [default = 80];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->track_future_samples());
    }

    // optional float speed_lower_bound = 5 [default = 1.4];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float speed_upper_bound = 6 [default = 11];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float speed_scale_lower = 7 [default = 0.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float speed_scale_upper = 8 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionMetricsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MotionMetricsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionMetricsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionMetricsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MotionMetricsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MotionMetricsConfig)
    MergeFrom(*source);
  }
}

void MotionMetricsConfig::MergeFrom(const MotionMetricsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MotionMetricsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  step_configurations_.MergeFrom(from.step_configurations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      max_predictions_ = from.max_predictions_;
    }
    if (cached_has_bits & 0x00000002u) {
      track_steps_per_second_ = from.track_steps_per_second_;
    }
    if (cached_has_bits & 0x00000004u) {
      prediction_steps_per_second_ = from.prediction_steps_per_second_;
    }
    if (cached_has_bits & 0x00000008u) {
      track_history_samples_ = from.track_history_samples_;
    }
    if (cached_has_bits & 0x00000010u) {
      track_future_samples_ = from.track_future_samples_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_lower_bound_ = from.speed_lower_bound_;
    }
    if (cached_has_bits & 0x00000040u) {
      speed_upper_bound_ = from.speed_upper_bound_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_scale_lower_ = from.speed_scale_lower_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_speed_scale_upper(from.speed_scale_upper());
  }
}

void MotionMetricsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MotionMetricsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionMetricsConfig::CopyFrom(const MotionMetricsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MotionMetricsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionMetricsConfig::IsInitialized() const {
  return true;
}

void MotionMetricsConfig::InternalSwap(MotionMetricsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&step_configurations_)->InternalSwap(CastToBase(&other->step_configurations_));
  swap(max_predictions_, other->max_predictions_);
  swap(track_steps_per_second_, other->track_steps_per_second_);
  swap(prediction_steps_per_second_, other->prediction_steps_per_second_);
  swap(track_history_samples_, other->track_history_samples_);
  swap(track_future_samples_, other->track_future_samples_);
  swap(speed_lower_bound_, other->speed_lower_bound_);
  swap(speed_upper_bound_, other->speed_upper_bound_);
  swap(speed_scale_lower_, other->speed_scale_lower_);
  swap(speed_scale_upper_, other->speed_scale_upper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionMetricsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SingleTrajectory* Arena::CreateMaybeMessage< ::waymo::open_dataset::SingleTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SingleTrajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::JointTrajectories* Arena::CreateMaybeMessage< ::waymo::open_dataset::JointTrajectories >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::JointTrajectories >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MultimodalPrediction* Arena::CreateMaybeMessage< ::waymo::open_dataset::MultimodalPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MultimodalPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::ScenarioPredictions* Arena::CreateMaybeMessage< ::waymo::open_dataset::ScenarioPredictions >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::ScenarioPredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MotionMetricsBundle* Arena::CreateMaybeMessage< ::waymo::open_dataset::MotionMetricsBundle >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MotionMetricsBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MotionMetrics* Arena::CreateMaybeMessage< ::waymo::open_dataset::MotionMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MotionMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig* Arena::CreateMaybeMessage< ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MotionMetricsConfig_MeasurementStepConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MotionMetricsConfig* Arena::CreateMaybeMessage< ::waymo::open_dataset::MotionMetricsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MotionMetricsConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
