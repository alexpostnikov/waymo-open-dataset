// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/segmentation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto;
namespace waymo {
namespace open_dataset {
class Segmentation;
class SegmentationDefaultTypeInternal;
extern SegmentationDefaultTypeInternal _Segmentation_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::Segmentation* Arena::CreateMaybeMessage<::waymo::open_dataset::Segmentation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum Segmentation_Type : int {
  Segmentation_Type_TYPE_UNDEFINED = 0,
  Segmentation_Type_TYPE_CAR = 1,
  Segmentation_Type_TYPE_TRUCK = 2,
  Segmentation_Type_TYPE_BUS = 3,
  Segmentation_Type_TYPE_OTHER_VEHICLE = 4,
  Segmentation_Type_TYPE_MOTORCYCLIST = 5,
  Segmentation_Type_TYPE_BICYCLIST = 6,
  Segmentation_Type_TYPE_PEDESTRIAN = 7,
  Segmentation_Type_TYPE_SIGN = 8,
  Segmentation_Type_TYPE_TRAFFIC_LIGHT = 9,
  Segmentation_Type_TYPE_POLE = 10,
  Segmentation_Type_TYPE_CONSTRUCTION_CONE = 11,
  Segmentation_Type_TYPE_BICYCLE = 12,
  Segmentation_Type_TYPE_MOTORCYCLE = 13,
  Segmentation_Type_TYPE_BUILDING = 14,
  Segmentation_Type_TYPE_VEGETATION = 15,
  Segmentation_Type_TYPE_TREE_TRUNK = 16,
  Segmentation_Type_TYPE_CURB = 17,
  Segmentation_Type_TYPE_ROAD = 18,
  Segmentation_Type_TYPE_LANE_MARKER = 19,
  Segmentation_Type_TYPE_OTHER_GROUND = 20,
  Segmentation_Type_TYPE_WALKABLE = 21,
  Segmentation_Type_TYPE_SIDEWALK = 22
};
bool Segmentation_Type_IsValid(int value);
constexpr Segmentation_Type Segmentation_Type_Type_MIN = Segmentation_Type_TYPE_UNDEFINED;
constexpr Segmentation_Type Segmentation_Type_Type_MAX = Segmentation_Type_TYPE_SIDEWALK;
constexpr int Segmentation_Type_Type_ARRAYSIZE = Segmentation_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Segmentation_Type_descriptor();
template<typename T>
inline const std::string& Segmentation_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Segmentation_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Segmentation_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Segmentation_Type_descriptor(), enum_t_value);
}
inline bool Segmentation_Type_Parse(
    const std::string& name, Segmentation_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Segmentation_Type>(
    Segmentation_Type_descriptor(), name, value);
}
// ===================================================================

class Segmentation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Segmentation) */ {
 public:
  Segmentation();
  virtual ~Segmentation();

  Segmentation(const Segmentation& from);
  Segmentation(Segmentation&& from) noexcept
    : Segmentation() {
    *this = ::std::move(from);
  }

  inline Segmentation& operator=(const Segmentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Segmentation& operator=(Segmentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Segmentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Segmentation* internal_default_instance() {
    return reinterpret_cast<const Segmentation*>(
               &_Segmentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Segmentation& a, Segmentation& b) {
    a.Swap(&b);
  }
  inline void Swap(Segmentation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Segmentation* New() const final {
    return CreateMaybeMessage<Segmentation>(nullptr);
  }

  Segmentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Segmentation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Segmentation& from);
  void MergeFrom(const Segmentation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Segmentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Segmentation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Segmentation_Type Type;
  static constexpr Type TYPE_UNDEFINED =
    Segmentation_Type_TYPE_UNDEFINED;
  static constexpr Type TYPE_CAR =
    Segmentation_Type_TYPE_CAR;
  static constexpr Type TYPE_TRUCK =
    Segmentation_Type_TYPE_TRUCK;
  static constexpr Type TYPE_BUS =
    Segmentation_Type_TYPE_BUS;
  static constexpr Type TYPE_OTHER_VEHICLE =
    Segmentation_Type_TYPE_OTHER_VEHICLE;
  static constexpr Type TYPE_MOTORCYCLIST =
    Segmentation_Type_TYPE_MOTORCYCLIST;
  static constexpr Type TYPE_BICYCLIST =
    Segmentation_Type_TYPE_BICYCLIST;
  static constexpr Type TYPE_PEDESTRIAN =
    Segmentation_Type_TYPE_PEDESTRIAN;
  static constexpr Type TYPE_SIGN =
    Segmentation_Type_TYPE_SIGN;
  static constexpr Type TYPE_TRAFFIC_LIGHT =
    Segmentation_Type_TYPE_TRAFFIC_LIGHT;
  static constexpr Type TYPE_POLE =
    Segmentation_Type_TYPE_POLE;
  static constexpr Type TYPE_CONSTRUCTION_CONE =
    Segmentation_Type_TYPE_CONSTRUCTION_CONE;
  static constexpr Type TYPE_BICYCLE =
    Segmentation_Type_TYPE_BICYCLE;
  static constexpr Type TYPE_MOTORCYCLE =
    Segmentation_Type_TYPE_MOTORCYCLE;
  static constexpr Type TYPE_BUILDING =
    Segmentation_Type_TYPE_BUILDING;
  static constexpr Type TYPE_VEGETATION =
    Segmentation_Type_TYPE_VEGETATION;
  static constexpr Type TYPE_TREE_TRUNK =
    Segmentation_Type_TYPE_TREE_TRUNK;
  static constexpr Type TYPE_CURB =
    Segmentation_Type_TYPE_CURB;
  static constexpr Type TYPE_ROAD =
    Segmentation_Type_TYPE_ROAD;
  static constexpr Type TYPE_LANE_MARKER =
    Segmentation_Type_TYPE_LANE_MARKER;
  static constexpr Type TYPE_OTHER_GROUND =
    Segmentation_Type_TYPE_OTHER_GROUND;
  static constexpr Type TYPE_WALKABLE =
    Segmentation_Type_TYPE_WALKABLE;
  static constexpr Type TYPE_SIDEWALK =
    Segmentation_Type_TYPE_SIDEWALK;
  static inline bool Type_IsValid(int value) {
    return Segmentation_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Segmentation_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Segmentation_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Segmentation_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Segmentation_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Segmentation_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Segmentation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Segmentation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Segmentation

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::Segmentation_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Segmentation_Type>() {
  return ::waymo::open_dataset::Segmentation_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto
