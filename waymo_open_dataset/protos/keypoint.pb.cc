// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/keypoint.proto

#include "waymo_open_dataset/protos/keypoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto;
namespace waymo {
namespace open_dataset {
namespace keypoints {
class Vec2dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2d> _instance;
} _Vec2d_default_instance_;
class Vec3dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3d> _instance;
} _Vec3d_default_instance_;
class KeypointVisibilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeypointVisibility> _instance;
} _KeypointVisibility_default_instance_;
class Keypoint2dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Keypoint2d> _instance;
} _Keypoint2d_default_instance_;
class Keypoint3dDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Keypoint3d> _instance;
} _Keypoint3d_default_instance_;
class CameraKeypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraKeypoint> _instance;
} _CameraKeypoint_default_instance_;
class CameraKeypointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraKeypoints> _instance;
} _CameraKeypoints_default_instance_;
class LaserKeypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaserKeypoint> _instance;
} _LaserKeypoint_default_instance_;
class LaserKeypointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaserKeypoints> _instance;
} _LaserKeypoints_default_instance_;
}  // namespace keypoints
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_CameraKeypoint_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::CameraKeypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::CameraKeypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {
      &scc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
      &scc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,}};

static void InitDefaultsscc_info_CameraKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_CameraKeypoints_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::CameraKeypoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::CameraKeypoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CameraKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {
      &scc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,}};

static void InitDefaultsscc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_Keypoint2d_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::Keypoint2d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::Keypoint2d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {
      &scc_info_Vec2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
      &scc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,}};

static void InitDefaultsscc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_Keypoint3d_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::Keypoint3d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::Keypoint3d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {
      &scc_info_Vec3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
      &scc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,}};

static void InitDefaultsscc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_KeypointVisibility_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::KeypointVisibility();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::KeypointVisibility::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {}};

static void InitDefaultsscc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_LaserKeypoint_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::LaserKeypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::LaserKeypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {
      &scc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,}};

static void InitDefaultsscc_info_LaserKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_LaserKeypoints_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::LaserKeypoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::LaserKeypoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaserKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaserKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {
      &scc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,}};

static void InitDefaultsscc_info_Vec2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_Vec2d_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::Vec2d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::Vec2d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Vec2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {}};

static void InitDefaultsscc_info_Vec3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::keypoints::_Vec3d_default_instance_;
    new (ptr) ::waymo::open_dataset::keypoints::Vec3d();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::keypoints::Vec3d::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Vec3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec2d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec2d, x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec2d, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec3d, x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec3d, y_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Vec3d, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::KeypointVisibility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::KeypointVisibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::KeypointVisibility, is_occluded_),
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint2d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint2d, location_px_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint2d, visibility_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint3d, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint3d, location_m_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::Keypoint3d, visibility_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoint, type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoint, keypoint_2d_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoint, keypoint_3d_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::CameraKeypoints, keypoint_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::LaserKeypoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::LaserKeypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::LaserKeypoint, type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::LaserKeypoint, keypoint_3d_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::LaserKeypoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::LaserKeypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::keypoints::LaserKeypoints, keypoint_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::waymo::open_dataset::keypoints::Vec2d)},
  { 9, 17, sizeof(::waymo::open_dataset::keypoints::Vec3d)},
  { 20, 26, sizeof(::waymo::open_dataset::keypoints::KeypointVisibility)},
  { 27, 34, sizeof(::waymo::open_dataset::keypoints::Keypoint2d)},
  { 36, 43, sizeof(::waymo::open_dataset::keypoints::Keypoint3d)},
  { 45, 53, sizeof(::waymo::open_dataset::keypoints::CameraKeypoint)},
  { 56, 62, sizeof(::waymo::open_dataset::keypoints::CameraKeypoints)},
  { 63, 70, sizeof(::waymo::open_dataset::keypoints::LaserKeypoint)},
  { 72, 78, sizeof(::waymo::open_dataset::keypoints::LaserKeypoints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_Vec2d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_Vec3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_KeypointVisibility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_Keypoint2d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_Keypoint3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_CameraKeypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_CameraKeypoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_LaserKeypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::keypoints::_LaserKeypoints_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(waymo_open_dataset/protos/keypoint.pro"
  "to\022\034waymo.open_dataset.keypoints\"\035\n\005Vec2"
  "d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"(\n\005Vec3d\022\t\n\001x\030\001 "
  "\001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\")\n\022KeypointVis"
  "ibility\022\023\n\013is_occluded\030\001 \001(\010\"\214\001\n\nKeypoin"
  "t2d\0228\n\013location_px\030\001 \001(\0132#.waymo.open_da"
  "taset.keypoints.Vec2d\022D\n\nvisibility\030\002 \001("
  "\01320.waymo.open_dataset.keypoints.Keypoin"
  "tVisibility\"\213\001\n\nKeypoint3d\0227\n\nlocation_m"
  "\030\001 \001(\0132#.waymo.open_dataset.keypoints.Ve"
  "c3d\022D\n\nvisibility\030\002 \001(\01320.waymo.open_dat"
  "aset.keypoints.KeypointVisibility\"\310\001\n\016Ca"
  "meraKeypoint\0228\n\004type\030\001 \001(\0162*.waymo.open_"
  "dataset.keypoints.KeypointType\022=\n\013keypoi"
  "nt_2d\030\002 \001(\0132(.waymo.open_dataset.keypoin"
  "ts.Keypoint2d\022=\n\013keypoint_3d\030\003 \001(\0132(.way"
  "mo.open_dataset.keypoints.Keypoint3d\"Q\n\017"
  "CameraKeypoints\022>\n\010keypoint\030\001 \003(\0132,.waym"
  "o.open_dataset.keypoints.CameraKeypoint\""
  "\210\001\n\rLaserKeypoint\0228\n\004type\030\001 \001(\0162*.waymo."
  "open_dataset.keypoints.KeypointType\022=\n\013k"
  "eypoint_3d\030\002 \001(\0132(.waymo.open_dataset.ke"
  "ypoints.Keypoint3d\"O\n\016LaserKeypoints\022=\n\010"
  "keypoint\030\001 \003(\0132+.waymo.open_dataset.keyp"
  "oints.LaserKeypoint*\356\003\n\014KeypointType\022\035\n\031"
  "KEYPOINT_TYPE_UNSPECIFIED\020\000\022\026\n\022KEYPOINT_"
  "TYPE_NOSE\020\001\022\037\n\033KEYPOINT_TYPE_LEFT_SHOULD"
  "ER\020\005\022\034\n\030KEYPOINT_TYPE_LEFT_ELBOW\020\006\022\034\n\030KE"
  "YPOINT_TYPE_LEFT_WRIST\020\007\022\032\n\026KEYPOINT_TYP"
  "E_LEFT_HIP\020\010\022\033\n\027KEYPOINT_TYPE_LEFT_KNEE\020"
  "\t\022\034\n\030KEYPOINT_TYPE_LEFT_ANKLE\020\n\022 \n\034KEYPO"
  "INT_TYPE_RIGHT_SHOULDER\020\r\022\035\n\031KEYPOINT_TY"
  "PE_RIGHT_ELBOW\020\016\022\035\n\031KEYPOINT_TYPE_RIGHT_"
  "WRIST\020\017\022\033\n\027KEYPOINT_TYPE_RIGHT_HIP\020\020\022\034\n\030"
  "KEYPOINT_TYPE_RIGHT_KNEE\020\021\022\035\n\031KEYPOINT_T"
  "YPE_RIGHT_ANKLE\020\022\022\032\n\026KEYPOINT_TYPE_FOREH"
  "EAD\020\023\022\035\n\031KEYPOINT_TYPE_HEAD_CENTER\020\024"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_sccs[9] = {
  &scc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_CameraKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_LaserKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_Vec2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
  &scc_info_Vec3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto, "waymo_open_dataset/protos/keypoint.proto", 1476,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto, 9, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto), true);
namespace waymo {
namespace open_dataset {
namespace keypoints {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeypointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto[0];
}
bool KeypointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vec2d::InitAsDefaultInstance() {
}
class Vec2d::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec2d>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Vec2d::Vec2d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.Vec2d)
}
Vec2d::Vec2d(const Vec2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.Vec2d)
}

void Vec2d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2d::~Vec2d() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.Vec2d)
  SharedDtor();
}

void Vec2d::SharedDtor() {
}

void Vec2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2d& Vec2d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void Vec2d::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.Vec2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vec2d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec2d::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.Vec2d)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.Vec2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.Vec2d)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec2d::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.Vec2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.Vec2d)
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2d::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.Vec2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.Vec2d)
  return target;
}

size_t Vec2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.Vec2d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.Vec2d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.Vec2d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.Vec2d)
    MergeFrom(*source);
  }
}

void Vec2d::MergeFrom(const Vec2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.Vec2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec2d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.Vec2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2d::CopyFrom(const Vec2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.Vec2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2d::IsInitialized() const {
  return true;
}

void Vec2d::InternalSwap(Vec2d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec3d::InitAsDefaultInstance() {
}
class Vec3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Vec3d>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Vec3d::Vec3d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.Vec3d)
}
Vec3d::Vec3d(const Vec3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.Vec3d)
}

void Vec3d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3d::~Vec3d() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.Vec3d)
  SharedDtor();
}

void Vec3d::SharedDtor() {
}

void Vec3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3d& Vec3d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void Vec3d::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.Vec3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vec3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vec3d::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.Vec3d)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.Vec3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.Vec3d)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vec3d::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.Vec3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.Vec3d)
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3d::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.Vec3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.Vec3d)
  return target;
}

size_t Vec3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.Vec3d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.Vec3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.Vec3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.Vec3d)
    MergeFrom(*source);
  }
}

void Vec3d::MergeFrom(const Vec3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.Vec3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vec3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.Vec3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3d::CopyFrom(const Vec3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.Vec3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3d::IsInitialized() const {
  return true;
}

void Vec3d::InternalSwap(Vec3d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeypointVisibility::InitAsDefaultInstance() {
}
class KeypointVisibility::_Internal {
 public:
  using HasBits = decltype(std::declval<KeypointVisibility>()._has_bits_);
  static void set_has_is_occluded(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

KeypointVisibility::KeypointVisibility()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.KeypointVisibility)
}
KeypointVisibility::KeypointVisibility(const KeypointVisibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_occluded_ = from.is_occluded_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.KeypointVisibility)
}

void KeypointVisibility::SharedCtor() {
  is_occluded_ = false;
}

KeypointVisibility::~KeypointVisibility() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.KeypointVisibility)
  SharedDtor();
}

void KeypointVisibility::SharedDtor() {
}

void KeypointVisibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeypointVisibility& KeypointVisibility::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeypointVisibility_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void KeypointVisibility::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.KeypointVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_occluded_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeypointVisibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_occluded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_occluded(&has_bits);
          is_occluded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeypointVisibility::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.KeypointVisibility)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_occluded = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_occluded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_occluded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.KeypointVisibility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.KeypointVisibility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeypointVisibility::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.KeypointVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_occluded = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_occluded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.KeypointVisibility)
}

::PROTOBUF_NAMESPACE_ID::uint8* KeypointVisibility::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.KeypointVisibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_occluded = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_occluded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.KeypointVisibility)
  return target;
}

size_t KeypointVisibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.KeypointVisibility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_occluded = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeypointVisibility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.KeypointVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  const KeypointVisibility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeypointVisibility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.KeypointVisibility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.KeypointVisibility)
    MergeFrom(*source);
  }
}

void KeypointVisibility::MergeFrom(const KeypointVisibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.KeypointVisibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_occluded()) {
    set_is_occluded(from.is_occluded());
  }
}

void KeypointVisibility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.KeypointVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeypointVisibility::CopyFrom(const KeypointVisibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.KeypointVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeypointVisibility::IsInitialized() const {
  return true;
}

void KeypointVisibility::InternalSwap(KeypointVisibility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_occluded_, other->is_occluded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeypointVisibility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Keypoint2d::InitAsDefaultInstance() {
  ::waymo::open_dataset::keypoints::_Keypoint2d_default_instance_._instance.get_mutable()->location_px_ = const_cast< ::waymo::open_dataset::keypoints::Vec2d*>(
      ::waymo::open_dataset::keypoints::Vec2d::internal_default_instance());
  ::waymo::open_dataset::keypoints::_Keypoint2d_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::waymo::open_dataset::keypoints::KeypointVisibility*>(
      ::waymo::open_dataset::keypoints::KeypointVisibility::internal_default_instance());
}
class Keypoint2d::_Internal {
 public:
  using HasBits = decltype(std::declval<Keypoint2d>()._has_bits_);
  static const ::waymo::open_dataset::keypoints::Vec2d& location_px(const Keypoint2d* msg);
  static void set_has_location_px(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::waymo::open_dataset::keypoints::KeypointVisibility& visibility(const Keypoint2d* msg);
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::waymo::open_dataset::keypoints::Vec2d&
Keypoint2d::_Internal::location_px(const Keypoint2d* msg) {
  return *msg->location_px_;
}
const ::waymo::open_dataset::keypoints::KeypointVisibility&
Keypoint2d::_Internal::visibility(const Keypoint2d* msg) {
  return *msg->visibility_;
}
Keypoint2d::Keypoint2d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.Keypoint2d)
}
Keypoint2d::Keypoint2d(const Keypoint2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location_px()) {
    location_px_ = new ::waymo::open_dataset::keypoints::Vec2d(*from.location_px_);
  } else {
    location_px_ = nullptr;
  }
  if (from.has_visibility()) {
    visibility_ = new ::waymo::open_dataset::keypoints::KeypointVisibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.Keypoint2d)
}

void Keypoint2d::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  ::memset(&location_px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&location_px_)) + sizeof(visibility_));
}

Keypoint2d::~Keypoint2d() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.Keypoint2d)
  SharedDtor();
}

void Keypoint2d::SharedDtor() {
  if (this != internal_default_instance()) delete location_px_;
  if (this != internal_default_instance()) delete visibility_;
}

void Keypoint2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Keypoint2d& Keypoint2d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Keypoint2d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void Keypoint2d::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.Keypoint2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_px_ != nullptr);
      location_px_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(visibility_ != nullptr);
      visibility_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Keypoint2d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.keypoints.Vec2d location_px = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_location_px(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Keypoint2d::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.Keypoint2d)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.keypoints.Vec2d location_px = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location_px()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_visibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.Keypoint2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.Keypoint2d)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Keypoint2d::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.Keypoint2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.Vec2d location_px = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::location_px(this), output);
  }

  // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::visibility(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.Keypoint2d)
}

::PROTOBUF_NAMESPACE_ID::uint8* Keypoint2d::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.Keypoint2d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.Vec2d location_px = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::location_px(this), target);
  }

  // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::visibility(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.Keypoint2d)
  return target;
}

size_t Keypoint2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.Keypoint2d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .waymo.open_dataset.keypoints.Vec2d location_px = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_px_);
    }

    // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visibility_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Keypoint2d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.Keypoint2d)
  GOOGLE_DCHECK_NE(&from, this);
  const Keypoint2d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Keypoint2d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.Keypoint2d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.Keypoint2d)
    MergeFrom(*source);
  }
}

void Keypoint2d::MergeFrom(const Keypoint2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.Keypoint2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location_px()->::waymo::open_dataset::keypoints::Vec2d::MergeFrom(from.location_px());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_visibility()->::waymo::open_dataset::keypoints::KeypointVisibility::MergeFrom(from.visibility());
    }
  }
}

void Keypoint2d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.Keypoint2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keypoint2d::CopyFrom(const Keypoint2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.Keypoint2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keypoint2d::IsInitialized() const {
  return true;
}

void Keypoint2d::InternalSwap(Keypoint2d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_px_, other->location_px_);
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Keypoint2d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Keypoint3d::InitAsDefaultInstance() {
  ::waymo::open_dataset::keypoints::_Keypoint3d_default_instance_._instance.get_mutable()->location_m_ = const_cast< ::waymo::open_dataset::keypoints::Vec3d*>(
      ::waymo::open_dataset::keypoints::Vec3d::internal_default_instance());
  ::waymo::open_dataset::keypoints::_Keypoint3d_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::waymo::open_dataset::keypoints::KeypointVisibility*>(
      ::waymo::open_dataset::keypoints::KeypointVisibility::internal_default_instance());
}
class Keypoint3d::_Internal {
 public:
  using HasBits = decltype(std::declval<Keypoint3d>()._has_bits_);
  static const ::waymo::open_dataset::keypoints::Vec3d& location_m(const Keypoint3d* msg);
  static void set_has_location_m(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::waymo::open_dataset::keypoints::KeypointVisibility& visibility(const Keypoint3d* msg);
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::waymo::open_dataset::keypoints::Vec3d&
Keypoint3d::_Internal::location_m(const Keypoint3d* msg) {
  return *msg->location_m_;
}
const ::waymo::open_dataset::keypoints::KeypointVisibility&
Keypoint3d::_Internal::visibility(const Keypoint3d* msg) {
  return *msg->visibility_;
}
Keypoint3d::Keypoint3d()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.Keypoint3d)
}
Keypoint3d::Keypoint3d(const Keypoint3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location_m()) {
    location_m_ = new ::waymo::open_dataset::keypoints::Vec3d(*from.location_m_);
  } else {
    location_m_ = nullptr;
  }
  if (from.has_visibility()) {
    visibility_ = new ::waymo::open_dataset::keypoints::KeypointVisibility(*from.visibility_);
  } else {
    visibility_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.Keypoint3d)
}

void Keypoint3d::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  ::memset(&location_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&location_m_)) + sizeof(visibility_));
}

Keypoint3d::~Keypoint3d() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.Keypoint3d)
  SharedDtor();
}

void Keypoint3d::SharedDtor() {
  if (this != internal_default_instance()) delete location_m_;
  if (this != internal_default_instance()) delete visibility_;
}

void Keypoint3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Keypoint3d& Keypoint3d::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Keypoint3d_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void Keypoint3d::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.Keypoint3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_m_ != nullptr);
      location_m_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(visibility_ != nullptr);
      visibility_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Keypoint3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.keypoints.Vec3d location_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_location_m(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Keypoint3d::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.Keypoint3d)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.keypoints.Vec3d location_m = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location_m()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_visibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.Keypoint3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.Keypoint3d)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Keypoint3d::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.Keypoint3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.Vec3d location_m = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::location_m(this), output);
  }

  // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::visibility(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.Keypoint3d)
}

::PROTOBUF_NAMESPACE_ID::uint8* Keypoint3d::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.Keypoint3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.Vec3d location_m = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::location_m(this), target);
  }

  // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::visibility(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.Keypoint3d)
  return target;
}

size_t Keypoint3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.Keypoint3d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .waymo.open_dataset.keypoints.Vec3d location_m = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_m_);
    }

    // optional .waymo.open_dataset.keypoints.KeypointVisibility visibility = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visibility_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Keypoint3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.Keypoint3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Keypoint3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Keypoint3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.Keypoint3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.Keypoint3d)
    MergeFrom(*source);
  }
}

void Keypoint3d::MergeFrom(const Keypoint3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.Keypoint3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location_m()->::waymo::open_dataset::keypoints::Vec3d::MergeFrom(from.location_m());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_visibility()->::waymo::open_dataset::keypoints::KeypointVisibility::MergeFrom(from.visibility());
    }
  }
}

void Keypoint3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.Keypoint3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keypoint3d::CopyFrom(const Keypoint3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.Keypoint3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keypoint3d::IsInitialized() const {
  return true;
}

void Keypoint3d::InternalSwap(Keypoint3d* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_m_, other->location_m_);
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Keypoint3d::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraKeypoint::InitAsDefaultInstance() {
  ::waymo::open_dataset::keypoints::_CameraKeypoint_default_instance_._instance.get_mutable()->keypoint_2d_ = const_cast< ::waymo::open_dataset::keypoints::Keypoint2d*>(
      ::waymo::open_dataset::keypoints::Keypoint2d::internal_default_instance());
  ::waymo::open_dataset::keypoints::_CameraKeypoint_default_instance_._instance.get_mutable()->keypoint_3d_ = const_cast< ::waymo::open_dataset::keypoints::Keypoint3d*>(
      ::waymo::open_dataset::keypoints::Keypoint3d::internal_default_instance());
}
class CameraKeypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraKeypoint>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::waymo::open_dataset::keypoints::Keypoint2d& keypoint_2d(const CameraKeypoint* msg);
  static void set_has_keypoint_2d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::waymo::open_dataset::keypoints::Keypoint3d& keypoint_3d(const CameraKeypoint* msg);
  static void set_has_keypoint_3d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::waymo::open_dataset::keypoints::Keypoint2d&
CameraKeypoint::_Internal::keypoint_2d(const CameraKeypoint* msg) {
  return *msg->keypoint_2d_;
}
const ::waymo::open_dataset::keypoints::Keypoint3d&
CameraKeypoint::_Internal::keypoint_3d(const CameraKeypoint* msg) {
  return *msg->keypoint_3d_;
}
CameraKeypoint::CameraKeypoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.CameraKeypoint)
}
CameraKeypoint::CameraKeypoint(const CameraKeypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keypoint_2d()) {
    keypoint_2d_ = new ::waymo::open_dataset::keypoints::Keypoint2d(*from.keypoint_2d_);
  } else {
    keypoint_2d_ = nullptr;
  }
  if (from.has_keypoint_3d()) {
    keypoint_3d_ = new ::waymo::open_dataset::keypoints::Keypoint3d(*from.keypoint_3d_);
  } else {
    keypoint_3d_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.CameraKeypoint)
}

void CameraKeypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  ::memset(&keypoint_2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&keypoint_2d_)) + sizeof(type_));
}

CameraKeypoint::~CameraKeypoint() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.CameraKeypoint)
  SharedDtor();
}

void CameraKeypoint::SharedDtor() {
  if (this != internal_default_instance()) delete keypoint_2d_;
  if (this != internal_default_instance()) delete keypoint_3d_;
}

void CameraKeypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraKeypoint& CameraKeypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void CameraKeypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.CameraKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(keypoint_2d_ != nullptr);
      keypoint_2d_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(keypoint_3d_ != nullptr);
      keypoint_3d_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraKeypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::keypoints::KeypointType_IsValid(val))) {
            set_type(static_cast<::waymo::open_dataset::keypoints::KeypointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.keypoints.Keypoint2d keypoint_2d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_keypoint_2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_keypoint_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraKeypoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.CameraKeypoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::keypoints::KeypointType_IsValid(value)) {
            set_type(static_cast< ::waymo::open_dataset::keypoints::KeypointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.keypoints.Keypoint2d keypoint_2d = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keypoint_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keypoint_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.CameraKeypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.CameraKeypoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraKeypoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.CameraKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .waymo.open_dataset.keypoints.Keypoint2d keypoint_2d = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::keypoint_2d(this), output);
  }

  // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::keypoint_3d(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.CameraKeypoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraKeypoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.CameraKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .waymo.open_dataset.keypoints.Keypoint2d keypoint_2d = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::keypoint_2d(this), target);
  }

  // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::keypoint_3d(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.CameraKeypoint)
  return target;
}

size_t CameraKeypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.CameraKeypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .waymo.open_dataset.keypoints.Keypoint2d keypoint_2d = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keypoint_2d_);
    }

    // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keypoint_3d_);
    }

    // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraKeypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.CameraKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraKeypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraKeypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.CameraKeypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.CameraKeypoint)
    MergeFrom(*source);
  }
}

void CameraKeypoint::MergeFrom(const CameraKeypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.CameraKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keypoint_2d()->::waymo::open_dataset::keypoints::Keypoint2d::MergeFrom(from.keypoint_2d());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_keypoint_3d()->::waymo::open_dataset::keypoints::Keypoint3d::MergeFrom(from.keypoint_3d());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraKeypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.CameraKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraKeypoint::CopyFrom(const CameraKeypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.CameraKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraKeypoint::IsInitialized() const {
  return true;
}

void CameraKeypoint::InternalSwap(CameraKeypoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(keypoint_2d_, other->keypoint_2d_);
  swap(keypoint_3d_, other->keypoint_3d_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraKeypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraKeypoints::InitAsDefaultInstance() {
}
class CameraKeypoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraKeypoints>()._has_bits_);
};

CameraKeypoints::CameraKeypoints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.CameraKeypoints)
}
CameraKeypoints::CameraKeypoints(const CameraKeypoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keypoint_(from.keypoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.CameraKeypoints)
}

void CameraKeypoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
}

CameraKeypoints::~CameraKeypoints() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.CameraKeypoints)
  SharedDtor();
}

void CameraKeypoints::SharedDtor() {
}

void CameraKeypoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraKeypoints& CameraKeypoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void CameraKeypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.CameraKeypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoint_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraKeypoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.keypoints.CameraKeypoint keypoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_keypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraKeypoints::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.CameraKeypoints)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.keypoints.CameraKeypoint keypoint = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_keypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.CameraKeypoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.CameraKeypoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraKeypoints::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.CameraKeypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.keypoints.CameraKeypoint keypoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoint_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keypoint(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.CameraKeypoints)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraKeypoints::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.CameraKeypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.keypoints.CameraKeypoint keypoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoint_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keypoint(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.CameraKeypoints)
  return target;
}

size_t CameraKeypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.CameraKeypoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.keypoints.CameraKeypoint keypoint = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->keypoint(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraKeypoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.CameraKeypoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraKeypoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraKeypoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.CameraKeypoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.CameraKeypoints)
    MergeFrom(*source);
  }
}

void CameraKeypoints::MergeFrom(const CameraKeypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.CameraKeypoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoint_.MergeFrom(from.keypoint_);
}

void CameraKeypoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.CameraKeypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraKeypoints::CopyFrom(const CameraKeypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.CameraKeypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraKeypoints::IsInitialized() const {
  return true;
}

void CameraKeypoints::InternalSwap(CameraKeypoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&keypoint_)->InternalSwap(CastToBase(&other->keypoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraKeypoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaserKeypoint::InitAsDefaultInstance() {
  ::waymo::open_dataset::keypoints::_LaserKeypoint_default_instance_._instance.get_mutable()->keypoint_3d_ = const_cast< ::waymo::open_dataset::keypoints::Keypoint3d*>(
      ::waymo::open_dataset::keypoints::Keypoint3d::internal_default_instance());
}
class LaserKeypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<LaserKeypoint>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::waymo::open_dataset::keypoints::Keypoint3d& keypoint_3d(const LaserKeypoint* msg);
  static void set_has_keypoint_3d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::waymo::open_dataset::keypoints::Keypoint3d&
LaserKeypoint::_Internal::keypoint_3d(const LaserKeypoint* msg) {
  return *msg->keypoint_3d_;
}
LaserKeypoint::LaserKeypoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.LaserKeypoint)
}
LaserKeypoint::LaserKeypoint(const LaserKeypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keypoint_3d()) {
    keypoint_3d_ = new ::waymo::open_dataset::keypoints::Keypoint3d(*from.keypoint_3d_);
  } else {
    keypoint_3d_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.LaserKeypoint)
}

void LaserKeypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  ::memset(&keypoint_3d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&keypoint_3d_)) + sizeof(type_));
}

LaserKeypoint::~LaserKeypoint() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.LaserKeypoint)
  SharedDtor();
}

void LaserKeypoint::SharedDtor() {
  if (this != internal_default_instance()) delete keypoint_3d_;
}

void LaserKeypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaserKeypoint& LaserKeypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaserKeypoint_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void LaserKeypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.LaserKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(keypoint_3d_ != nullptr);
    keypoint_3d_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaserKeypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::keypoints::KeypointType_IsValid(val))) {
            set_type(static_cast<::waymo::open_dataset::keypoints::KeypointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_keypoint_3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaserKeypoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.LaserKeypoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::keypoints::KeypointType_IsValid(value)) {
            set_type(static_cast< ::waymo::open_dataset::keypoints::KeypointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keypoint_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.LaserKeypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.LaserKeypoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaserKeypoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.LaserKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::keypoint_3d(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.LaserKeypoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaserKeypoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.LaserKeypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::keypoint_3d(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.LaserKeypoint)
  return target;
}

size_t LaserKeypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.LaserKeypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .waymo.open_dataset.keypoints.Keypoint3d keypoint_3d = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keypoint_3d_);
    }

    // optional .waymo.open_dataset.keypoints.KeypointType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserKeypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.LaserKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserKeypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaserKeypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.LaserKeypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.LaserKeypoint)
    MergeFrom(*source);
  }
}

void LaserKeypoint::MergeFrom(const LaserKeypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.LaserKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keypoint_3d()->::waymo::open_dataset::keypoints::Keypoint3d::MergeFrom(from.keypoint_3d());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaserKeypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.LaserKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserKeypoint::CopyFrom(const LaserKeypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.LaserKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserKeypoint::IsInitialized() const {
  return true;
}

void LaserKeypoint::InternalSwap(LaserKeypoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(keypoint_3d_, other->keypoint_3d_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaserKeypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaserKeypoints::InitAsDefaultInstance() {
}
class LaserKeypoints::_Internal {
 public:
  using HasBits = decltype(std::declval<LaserKeypoints>()._has_bits_);
};

LaserKeypoints::LaserKeypoints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.keypoints.LaserKeypoints)
}
LaserKeypoints::LaserKeypoints(const LaserKeypoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keypoint_(from.keypoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.keypoints.LaserKeypoints)
}

void LaserKeypoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaserKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
}

LaserKeypoints::~LaserKeypoints() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.keypoints.LaserKeypoints)
  SharedDtor();
}

void LaserKeypoints::SharedDtor() {
}

void LaserKeypoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaserKeypoints& LaserKeypoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaserKeypoints_waymo_5fopen_5fdataset_2fprotos_2fkeypoint_2eproto.base);
  return *internal_default_instance();
}


void LaserKeypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.keypoints.LaserKeypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoint_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaserKeypoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.keypoints.LaserKeypoint keypoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_keypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaserKeypoints::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.keypoints.LaserKeypoints)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.keypoints.LaserKeypoint keypoint = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_keypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.keypoints.LaserKeypoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.keypoints.LaserKeypoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaserKeypoints::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.keypoints.LaserKeypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.keypoints.LaserKeypoint keypoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoint_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keypoint(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.keypoints.LaserKeypoints)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaserKeypoints::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.keypoints.LaserKeypoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.keypoints.LaserKeypoint keypoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keypoint_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keypoint(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.keypoints.LaserKeypoints)
  return target;
}

size_t LaserKeypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.keypoints.LaserKeypoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.keypoints.LaserKeypoint keypoint = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keypoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->keypoint(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaserKeypoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.keypoints.LaserKeypoints)
  GOOGLE_DCHECK_NE(&from, this);
  const LaserKeypoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaserKeypoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.keypoints.LaserKeypoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.keypoints.LaserKeypoints)
    MergeFrom(*source);
  }
}

void LaserKeypoints::MergeFrom(const LaserKeypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.keypoints.LaserKeypoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoint_.MergeFrom(from.keypoint_);
}

void LaserKeypoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.keypoints.LaserKeypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserKeypoints::CopyFrom(const LaserKeypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.keypoints.LaserKeypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserKeypoints::IsInitialized() const {
  return true;
}

void LaserKeypoints::InternalSwap(LaserKeypoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&keypoint_)->InternalSwap(CastToBase(&other->keypoint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaserKeypoints::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace keypoints
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::Vec2d* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::Vec2d >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::Vec2d >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::Vec3d* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::Vec3d >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::Vec3d >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::KeypointVisibility* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::KeypointVisibility >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::KeypointVisibility >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::Keypoint2d* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::Keypoint2d >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::Keypoint2d >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::Keypoint3d* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::Keypoint3d >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::Keypoint3d >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::CameraKeypoint* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::CameraKeypoint >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::CameraKeypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::CameraKeypoints* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::CameraKeypoints >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::CameraKeypoints >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::LaserKeypoint* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::LaserKeypoint >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::LaserKeypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::keypoints::LaserKeypoints* Arena::CreateMaybeMessage< ::waymo::open_dataset::keypoints::LaserKeypoints >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::keypoints::LaserKeypoints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
