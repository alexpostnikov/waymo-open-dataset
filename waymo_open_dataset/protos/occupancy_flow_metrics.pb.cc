// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/occupancy_flow_metrics.proto

#include "waymo_open_dataset/protos/occupancy_flow_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace waymo {
namespace open_dataset {
class OccupancyFlowTaskConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OccupancyFlowTaskConfig> _instance;
} _OccupancyFlowTaskConfig_default_instance_;
class OccupancyFlowMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OccupancyFlowMetrics> _instance;
} _OccupancyFlowMetrics_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_OccupancyFlowMetrics_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_OccupancyFlowMetrics_default_instance_;
    new (ptr) ::waymo::open_dataset::OccupancyFlowMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::OccupancyFlowMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OccupancyFlowMetrics_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OccupancyFlowMetrics_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_OccupancyFlowTaskConfig_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_OccupancyFlowTaskConfig_default_instance_;
    new (ptr) ::waymo::open_dataset::OccupancyFlowTaskConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::OccupancyFlowTaskConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OccupancyFlowTaskConfig_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OccupancyFlowTaskConfig_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, num_past_steps_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, num_future_steps_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, num_waypoints_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, cumulative_waypoints_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, normalize_sdc_yaw_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, grid_height_cells_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, grid_width_cells_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, sdc_y_in_grid_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, sdc_x_in_grid_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, pixels_per_meter_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, agent_points_per_side_length_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowTaskConfig, agent_points_per_side_width_),
  1,
  2,
  3,
  8,
  9,
  4,
  5,
  6,
  7,
  10,
  11,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, vehicles_observed_auc_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, vehicles_observed_iou_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, vehicles_occluded_auc_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, vehicles_occluded_iou_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, vehicles_flow_epe_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, vehicles_flow_warped_occupancy_auc_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::OccupancyFlowMetrics, vehicles_flow_warped_occupancy_iou_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::waymo::open_dataset::OccupancyFlowTaskConfig)},
  { 29, 41, sizeof(::waymo::open_dataset::OccupancyFlowMetrics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_OccupancyFlowTaskConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_OccupancyFlowMetrics_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6waymo_open_dataset/protos/occupancy_fl"
  "ow_metrics.proto\022\022waymo.open_dataset\"\233\003\n"
  "\027OccupancyFlowTaskConfig\022\032\n\016num_past_ste"
  "ps\030\001 \001(\005:\00210\022\034\n\020num_future_steps\030\002 \001(\005:\002"
  "80\022\030\n\rnum_waypoints\030\003 \001(\005:\0018\022\"\n\024cumulati"
  "ve_waypoints\030\004 \001(\010:\004true\022\037\n\021normalize_sd"
  "c_yaw\030\014 \001(\010:\004true\022\036\n\021grid_height_cells\030\005"
  " \001(\005:\003256\022\035\n\020grid_width_cells\030\006 \001(\005:\003256"
  "\022\032\n\rsdc_y_in_grid\030\007 \001(\005:\003192\022\032\n\rsdc_x_in"
  "_grid\030\010 \001(\005:\003128\022\035\n\020pixels_per_meter\030\t \001"
  "(\002:\0033.2\022(\n\034agent_points_per_side_length\030"
  "\n \001(\005:\00248\022\'\n\033agent_points_per_side_width"
  "\030\013 \001(\005:\00216\"\205\002\n\024OccupancyFlowMetrics\022\035\n\025v"
  "ehicles_observed_auc\030\001 \001(\002\022\035\n\025vehicles_o"
  "bserved_iou\030\002 \001(\002\022\035\n\025vehicles_occluded_a"
  "uc\030\003 \001(\002\022\035\n\025vehicles_occluded_iou\030\004 \001(\002\022"
  "\031\n\021vehicles_flow_epe\030\005 \001(\002\022*\n\"vehicles_f"
  "low_warped_occupancy_auc\030\006 \001(\002\022*\n\"vehicl"
  "es_flow_warped_occupancy_iou\030\007 \001(\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_sccs[2] = {
  &scc_info_OccupancyFlowMetrics_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto.base,
  &scc_info_OccupancyFlowTaskConfig_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto, "waymo_open_dataset/protos/occupancy_flow_metrics.proto", 754,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto, 2, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto), true);
namespace waymo {
namespace open_dataset {

// ===================================================================

void OccupancyFlowTaskConfig::InitAsDefaultInstance() {
}
class OccupancyFlowTaskConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OccupancyFlowTaskConfig>()._has_bits_);
  static void set_has_num_past_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_future_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_waypoints(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cumulative_waypoints(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_normalize_sdc_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grid_height_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_grid_width_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sdc_y_in_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sdc_x_in_grid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pixels_per_meter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_agent_points_per_side_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_agent_points_per_side_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OccupancyFlowTaskConfig::OccupancyFlowTaskConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.OccupancyFlowTaskConfig)
}
OccupancyFlowTaskConfig::OccupancyFlowTaskConfig(const OccupancyFlowTaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&agent_points_per_side_width_, &from.agent_points_per_side_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&agent_points_per_side_length_) -
    reinterpret_cast<char*>(&agent_points_per_side_width_)) + sizeof(agent_points_per_side_length_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.OccupancyFlowTaskConfig)
}

void OccupancyFlowTaskConfig::SharedCtor() {
  agent_points_per_side_width_ = 16;
  num_past_steps_ = 10;
  num_future_steps_ = 80;
  num_waypoints_ = 8;
  grid_height_cells_ = 256;
  grid_width_cells_ = 256;
  sdc_y_in_grid_ = 192;
  sdc_x_in_grid_ = 128;
  cumulative_waypoints_ = true;
  normalize_sdc_yaw_ = true;
  pixels_per_meter_ = 3.2f;
  agent_points_per_side_length_ = 48;
}

OccupancyFlowTaskConfig::~OccupancyFlowTaskConfig() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.OccupancyFlowTaskConfig)
  SharedDtor();
}

void OccupancyFlowTaskConfig::SharedDtor() {
}

void OccupancyFlowTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OccupancyFlowTaskConfig& OccupancyFlowTaskConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OccupancyFlowTaskConfig_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void OccupancyFlowTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    agent_points_per_side_width_ = 16;
    num_past_steps_ = 10;
    num_future_steps_ = 80;
    num_waypoints_ = 8;
    grid_height_cells_ = 256;
    grid_width_cells_ = 256;
    sdc_y_in_grid_ = 192;
    sdc_x_in_grid_ = 128;
  }
  if (cached_has_bits & 0x00000f00u) {
    cumulative_waypoints_ = true;
    normalize_sdc_yaw_ = true;
    pixels_per_meter_ = 3.2f;
    agent_points_per_side_length_ = 48;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OccupancyFlowTaskConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_past_steps = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_past_steps(&has_bits);
          num_past_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_future_steps = 2 [default = 80];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_future_steps(&has_bits);
          num_future_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_waypoints = 3 [default = 8];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_waypoints(&has_bits);
          num_waypoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cumulative_waypoints = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cumulative_waypoints(&has_bits);
          cumulative_waypoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 grid_height_cells = 5 [default = 256];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_grid_height_cells(&has_bits);
          grid_height_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 grid_width_cells = 6 [default = 256];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_grid_width_cells(&has_bits);
          grid_width_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sdc_y_in_grid = 7 [default = 192];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sdc_y_in_grid(&has_bits);
          sdc_y_in_grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sdc_x_in_grid = 8 [default = 128];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sdc_x_in_grid(&has_bits);
          sdc_x_in_grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float pixels_per_meter = 9 [default = 3.2];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_pixels_per_meter(&has_bits);
          pixels_per_meter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 agent_points_per_side_length = 10 [default = 48];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_agent_points_per_side_length(&has_bits);
          agent_points_per_side_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 agent_points_per_side_width = 11 [default = 16];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_agent_points_per_side_width(&has_bits);
          agent_points_per_side_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool normalize_sdc_yaw = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_normalize_sdc_yaw(&has_bits);
          normalize_sdc_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OccupancyFlowTaskConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_past_steps = 1 [default = 10];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_past_steps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_past_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_future_steps = 2 [default = 80];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_future_steps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_future_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_waypoints = 3 [default = 8];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_waypoints(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_waypoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cumulative_waypoints = 4 [default = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_cumulative_waypoints(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cumulative_waypoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 grid_height_cells = 5 [default = 256];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_grid_height_cells(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_height_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 grid_width_cells = 6 [default = 256];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_grid_width_cells(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_width_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sdc_y_in_grid = 7 [default = 192];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_sdc_y_in_grid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdc_y_in_grid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sdc_x_in_grid = 8 [default = 128];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_sdc_x_in_grid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdc_x_in_grid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pixels_per_meter = 9 [default = 3.2];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_pixels_per_meter(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixels_per_meter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 agent_points_per_side_length = 10 [default = 48];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_agent_points_per_side_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_points_per_side_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 agent_points_per_side_width = 11 [default = 16];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_agent_points_per_side_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_points_per_side_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize_sdc_yaw = 12 [default = true];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_normalize_sdc_yaw(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_sdc_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.OccupancyFlowTaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.OccupancyFlowTaskConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OccupancyFlowTaskConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_past_steps = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_past_steps(), output);
  }

  // optional int32 num_future_steps = 2 [default = 80];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_future_steps(), output);
  }

  // optional int32 num_waypoints = 3 [default = 8];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_waypoints(), output);
  }

  // optional bool cumulative_waypoints = 4 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->cumulative_waypoints(), output);
  }

  // optional int32 grid_height_cells = 5 [default = 256];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->grid_height_cells(), output);
  }

  // optional int32 grid_width_cells = 6 [default = 256];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->grid_width_cells(), output);
  }

  // optional int32 sdc_y_in_grid = 7 [default = 192];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->sdc_y_in_grid(), output);
  }

  // optional int32 sdc_x_in_grid = 8 [default = 128];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->sdc_x_in_grid(), output);
  }

  // optional float pixels_per_meter = 9 [default = 3.2];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->pixels_per_meter(), output);
  }

  // optional int32 agent_points_per_side_length = 10 [default = 48];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->agent_points_per_side_length(), output);
  }

  // optional int32 agent_points_per_side_width = 11 [default = 16];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->agent_points_per_side_width(), output);
  }

  // optional bool normalize_sdc_yaw = 12 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->normalize_sdc_yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.OccupancyFlowTaskConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* OccupancyFlowTaskConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_past_steps = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_past_steps(), target);
  }

  // optional int32 num_future_steps = 2 [default = 80];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_future_steps(), target);
  }

  // optional int32 num_waypoints = 3 [default = 8];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_waypoints(), target);
  }

  // optional bool cumulative_waypoints = 4 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->cumulative_waypoints(), target);
  }

  // optional int32 grid_height_cells = 5 [default = 256];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->grid_height_cells(), target);
  }

  // optional int32 grid_width_cells = 6 [default = 256];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->grid_width_cells(), target);
  }

  // optional int32 sdc_y_in_grid = 7 [default = 192];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->sdc_y_in_grid(), target);
  }

  // optional int32 sdc_x_in_grid = 8 [default = 128];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->sdc_x_in_grid(), target);
  }

  // optional float pixels_per_meter = 9 [default = 3.2];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->pixels_per_meter(), target);
  }

  // optional int32 agent_points_per_side_length = 10 [default = 48];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->agent_points_per_side_length(), target);
  }

  // optional int32 agent_points_per_side_width = 11 [default = 16];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->agent_points_per_side_width(), target);
  }

  // optional bool normalize_sdc_yaw = 12 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->normalize_sdc_yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.OccupancyFlowTaskConfig)
  return target;
}

size_t OccupancyFlowTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 agent_points_per_side_width = 11 [default = 16];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->agent_points_per_side_width());
    }

    // optional int32 num_past_steps = 1 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_past_steps());
    }

    // optional int32 num_future_steps = 2 [default = 80];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_future_steps());
    }

    // optional int32 num_waypoints = 3 [default = 8];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_waypoints());
    }

    // optional int32 grid_height_cells = 5 [default = 256];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->grid_height_cells());
    }

    // optional int32 grid_width_cells = 6 [default = 256];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->grid_width_cells());
    }

    // optional int32 sdc_y_in_grid = 7 [default = 192];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sdc_y_in_grid());
    }

    // optional int32 sdc_x_in_grid = 8 [default = 128];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sdc_x_in_grid());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool cumulative_waypoints = 4 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool normalize_sdc_yaw = 12 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional float pixels_per_meter = 9 [default = 3.2];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 agent_points_per_side_length = 10 [default = 48];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->agent_points_per_side_length());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancyFlowTaskConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancyFlowTaskConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OccupancyFlowTaskConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.OccupancyFlowTaskConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.OccupancyFlowTaskConfig)
    MergeFrom(*source);
  }
}

void OccupancyFlowTaskConfig::MergeFrom(const OccupancyFlowTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      agent_points_per_side_width_ = from.agent_points_per_side_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_past_steps_ = from.num_past_steps_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_future_steps_ = from.num_future_steps_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_waypoints_ = from.num_waypoints_;
    }
    if (cached_has_bits & 0x00000010u) {
      grid_height_cells_ = from.grid_height_cells_;
    }
    if (cached_has_bits & 0x00000020u) {
      grid_width_cells_ = from.grid_width_cells_;
    }
    if (cached_has_bits & 0x00000040u) {
      sdc_y_in_grid_ = from.sdc_y_in_grid_;
    }
    if (cached_has_bits & 0x00000080u) {
      sdc_x_in_grid_ = from.sdc_x_in_grid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      cumulative_waypoints_ = from.cumulative_waypoints_;
    }
    if (cached_has_bits & 0x00000200u) {
      normalize_sdc_yaw_ = from.normalize_sdc_yaw_;
    }
    if (cached_has_bits & 0x00000400u) {
      pixels_per_meter_ = from.pixels_per_meter_;
    }
    if (cached_has_bits & 0x00000800u) {
      agent_points_per_side_length_ = from.agent_points_per_side_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OccupancyFlowTaskConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancyFlowTaskConfig::CopyFrom(const OccupancyFlowTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.OccupancyFlowTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyFlowTaskConfig::IsInitialized() const {
  return true;
}

void OccupancyFlowTaskConfig::InternalSwap(OccupancyFlowTaskConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(agent_points_per_side_width_, other->agent_points_per_side_width_);
  swap(num_past_steps_, other->num_past_steps_);
  swap(num_future_steps_, other->num_future_steps_);
  swap(num_waypoints_, other->num_waypoints_);
  swap(grid_height_cells_, other->grid_height_cells_);
  swap(grid_width_cells_, other->grid_width_cells_);
  swap(sdc_y_in_grid_, other->sdc_y_in_grid_);
  swap(sdc_x_in_grid_, other->sdc_x_in_grid_);
  swap(cumulative_waypoints_, other->cumulative_waypoints_);
  swap(normalize_sdc_yaw_, other->normalize_sdc_yaw_);
  swap(pixels_per_meter_, other->pixels_per_meter_);
  swap(agent_points_per_side_length_, other->agent_points_per_side_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OccupancyFlowTaskConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OccupancyFlowMetrics::InitAsDefaultInstance() {
}
class OccupancyFlowMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<OccupancyFlowMetrics>()._has_bits_);
  static void set_has_vehicles_observed_auc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vehicles_observed_iou(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vehicles_occluded_auc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vehicles_occluded_iou(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vehicles_flow_epe(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vehicles_flow_warped_occupancy_auc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vehicles_flow_warped_occupancy_iou(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

OccupancyFlowMetrics::OccupancyFlowMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.OccupancyFlowMetrics)
}
OccupancyFlowMetrics::OccupancyFlowMetrics(const OccupancyFlowMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicles_observed_auc_, &from.vehicles_observed_auc_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicles_flow_warped_occupancy_iou_) -
    reinterpret_cast<char*>(&vehicles_observed_auc_)) + sizeof(vehicles_flow_warped_occupancy_iou_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.OccupancyFlowMetrics)
}

void OccupancyFlowMetrics::SharedCtor() {
  ::memset(&vehicles_observed_auc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicles_flow_warped_occupancy_iou_) -
      reinterpret_cast<char*>(&vehicles_observed_auc_)) + sizeof(vehicles_flow_warped_occupancy_iou_));
}

OccupancyFlowMetrics::~OccupancyFlowMetrics() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.OccupancyFlowMetrics)
  SharedDtor();
}

void OccupancyFlowMetrics::SharedDtor() {
}

void OccupancyFlowMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OccupancyFlowMetrics& OccupancyFlowMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OccupancyFlowMetrics_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void OccupancyFlowMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.OccupancyFlowMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&vehicles_observed_auc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicles_flow_warped_occupancy_iou_) -
        reinterpret_cast<char*>(&vehicles_observed_auc_)) + sizeof(vehicles_flow_warped_occupancy_iou_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OccupancyFlowMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float vehicles_observed_auc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_vehicles_observed_auc(&has_bits);
          vehicles_observed_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicles_observed_iou = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_vehicles_observed_iou(&has_bits);
          vehicles_observed_iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicles_occluded_auc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_vehicles_occluded_auc(&has_bits);
          vehicles_occluded_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicles_occluded_iou = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_vehicles_occluded_iou(&has_bits);
          vehicles_occluded_iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicles_flow_epe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_vehicles_flow_epe(&has_bits);
          vehicles_flow_epe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicles_flow_warped_occupancy_auc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_vehicles_flow_warped_occupancy_auc(&has_bits);
          vehicles_flow_warped_occupancy_auc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vehicles_flow_warped_occupancy_iou = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_vehicles_flow_warped_occupancy_iou(&has_bits);
          vehicles_flow_warped_occupancy_iou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OccupancyFlowMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.OccupancyFlowMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float vehicles_observed_auc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_vehicles_observed_auc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicles_observed_auc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vehicles_observed_iou = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_vehicles_observed_iou(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicles_observed_iou_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vehicles_occluded_auc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_vehicles_occluded_auc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicles_occluded_auc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vehicles_occluded_iou = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_vehicles_occluded_iou(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicles_occluded_iou_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vehicles_flow_epe = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          _Internal::set_has_vehicles_flow_epe(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicles_flow_epe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vehicles_flow_warped_occupancy_auc = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_vehicles_flow_warped_occupancy_auc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicles_flow_warped_occupancy_auc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vehicles_flow_warped_occupancy_iou = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_vehicles_flow_warped_occupancy_iou(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicles_flow_warped_occupancy_iou_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.OccupancyFlowMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.OccupancyFlowMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OccupancyFlowMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.OccupancyFlowMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vehicles_observed_auc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->vehicles_observed_auc(), output);
  }

  // optional float vehicles_observed_iou = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->vehicles_observed_iou(), output);
  }

  // optional float vehicles_occluded_auc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->vehicles_occluded_auc(), output);
  }

  // optional float vehicles_occluded_iou = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->vehicles_occluded_iou(), output);
  }

  // optional float vehicles_flow_epe = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->vehicles_flow_epe(), output);
  }

  // optional float vehicles_flow_warped_occupancy_auc = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->vehicles_flow_warped_occupancy_auc(), output);
  }

  // optional float vehicles_flow_warped_occupancy_iou = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->vehicles_flow_warped_occupancy_iou(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.OccupancyFlowMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* OccupancyFlowMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.OccupancyFlowMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float vehicles_observed_auc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->vehicles_observed_auc(), target);
  }

  // optional float vehicles_observed_iou = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->vehicles_observed_iou(), target);
  }

  // optional float vehicles_occluded_auc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->vehicles_occluded_auc(), target);
  }

  // optional float vehicles_occluded_iou = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->vehicles_occluded_iou(), target);
  }

  // optional float vehicles_flow_epe = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->vehicles_flow_epe(), target);
  }

  // optional float vehicles_flow_warped_occupancy_auc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->vehicles_flow_warped_occupancy_auc(), target);
  }

  // optional float vehicles_flow_warped_occupancy_iou = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->vehicles_flow_warped_occupancy_iou(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.OccupancyFlowMetrics)
  return target;
}

size_t OccupancyFlowMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.OccupancyFlowMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float vehicles_observed_auc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float vehicles_observed_iou = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float vehicles_occluded_auc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float vehicles_occluded_iou = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float vehicles_flow_epe = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float vehicles_flow_warped_occupancy_auc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float vehicles_flow_warped_occupancy_iou = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancyFlowMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.OccupancyFlowMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancyFlowMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OccupancyFlowMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.OccupancyFlowMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.OccupancyFlowMetrics)
    MergeFrom(*source);
  }
}

void OccupancyFlowMetrics::MergeFrom(const OccupancyFlowMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.OccupancyFlowMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      vehicles_observed_auc_ = from.vehicles_observed_auc_;
    }
    if (cached_has_bits & 0x00000002u) {
      vehicles_observed_iou_ = from.vehicles_observed_iou_;
    }
    if (cached_has_bits & 0x00000004u) {
      vehicles_occluded_auc_ = from.vehicles_occluded_auc_;
    }
    if (cached_has_bits & 0x00000008u) {
      vehicles_occluded_iou_ = from.vehicles_occluded_iou_;
    }
    if (cached_has_bits & 0x00000010u) {
      vehicles_flow_epe_ = from.vehicles_flow_epe_;
    }
    if (cached_has_bits & 0x00000020u) {
      vehicles_flow_warped_occupancy_auc_ = from.vehicles_flow_warped_occupancy_auc_;
    }
    if (cached_has_bits & 0x00000040u) {
      vehicles_flow_warped_occupancy_iou_ = from.vehicles_flow_warped_occupancy_iou_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OccupancyFlowMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.OccupancyFlowMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancyFlowMetrics::CopyFrom(const OccupancyFlowMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.OccupancyFlowMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyFlowMetrics::IsInitialized() const {
  return true;
}

void OccupancyFlowMetrics::InternalSwap(OccupancyFlowMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(vehicles_observed_auc_, other->vehicles_observed_auc_);
  swap(vehicles_observed_iou_, other->vehicles_observed_iou_);
  swap(vehicles_occluded_auc_, other->vehicles_occluded_auc_);
  swap(vehicles_occluded_iou_, other->vehicles_occluded_iou_);
  swap(vehicles_flow_epe_, other->vehicles_flow_epe_);
  swap(vehicles_flow_warped_occupancy_auc_, other->vehicles_flow_warped_occupancy_auc_);
  swap(vehicles_flow_warped_occupancy_iou_, other->vehicles_flow_warped_occupancy_iou_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OccupancyFlowMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::OccupancyFlowTaskConfig* Arena::CreateMaybeMessage< ::waymo::open_dataset::OccupancyFlowTaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::OccupancyFlowTaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::OccupancyFlowMetrics* Arena::CreateMaybeMessage< ::waymo::open_dataset::OccupancyFlowMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::OccupancyFlowMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
