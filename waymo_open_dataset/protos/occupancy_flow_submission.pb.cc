// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/occupancy_flow_submission.proto

#include "waymo_open_dataset/protos/occupancy_flow_submission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto;
namespace waymo {
namespace open_dataset {
namespace occupancy_flow {
class WaypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Waypoint> _instance;
} _Waypoint_default_instance_;
class ScenarioPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScenarioPrediction> _instance;
} _ScenarioPrediction_default_instance_;
class ChallengeSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChallengeSubmission> _instance;
} _ChallengeSubmission_default_instance_;
}  // namespace occupancy_flow
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_ChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::occupancy_flow::_ChallengeSubmission_default_instance_;
    new (ptr) ::waymo::open_dataset::occupancy_flow::ChallengeSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::occupancy_flow::ChallengeSubmission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto}, {
      &scc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::occupancy_flow::_ScenarioPrediction_default_instance_;
    new (ptr) ::waymo::open_dataset::occupancy_flow::ScenarioPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::occupancy_flow::ScenarioPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto}, {
      &scc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::occupancy_flow::_Waypoint_default_instance_;
    new (ptr) ::waymo::open_dataset::occupancy_flow::Waypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::occupancy_flow::Waypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::Waypoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::Waypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::Waypoint, observed_vehicles_occupancy_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::Waypoint, occluded_vehicles_occupancy_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::Waypoint, all_vehicles_flow_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ScenarioPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ScenarioPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ScenarioPrediction, scenario_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ScenarioPrediction, waypoints_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, account_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, unique_method_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, authors_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, affiliation_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, description_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, method_link_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::occupancy_flow::ChallengeSubmission, scenario_predictions_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::waymo::open_dataset::occupancy_flow::Waypoint)},
  { 11, 18, sizeof(::waymo::open_dataset::occupancy_flow::ScenarioPrediction)},
  { 20, 32, sizeof(::waymo::open_dataset::occupancy_flow::ChallengeSubmission)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::occupancy_flow::_Waypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::occupancy_flow::_ScenarioPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::occupancy_flow::_ChallengeSubmission_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n9waymo_open_dataset/protos/occupancy_fl"
  "ow_submission.proto\022!waymo.open_dataset."
  "occupancy_flow\"o\n\010Waypoint\022#\n\033observed_v"
  "ehicles_occupancy\030\001 \001(\014\022#\n\033occluded_vehi"
  "cles_occupancy\030\002 \001(\014\022\031\n\021all_vehicles_flo"
  "w\030\003 \001(\014\"i\n\022ScenarioPrediction\022\023\n\013scenari"
  "o_id\030\001 \001(\t\022>\n\twaypoints\030\002 \003(\0132+.waymo.op"
  "en_dataset.occupancy_flow.Waypoint\"\354\001\n\023C"
  "hallengeSubmission\022\024\n\014account_name\030\001 \001(\t"
  "\022\032\n\022unique_method_name\030\002 \001(\t\022\017\n\007authors\030"
  "\003 \003(\t\022\023\n\013affiliation\030\004 \001(\t\022\023\n\013descriptio"
  "n\030\005 \001(\t\022\023\n\013method_link\030\006 \001(\t\022S\n\024scenario"
  "_predictions\030\007 \003(\01325.waymo.open_dataset."
  "occupancy_flow.ScenarioPrediction"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_sccs[3] = {
  &scc_info_ChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base,
  &scc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base,
  &scc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto, "waymo_open_dataset/protos/occupancy_flow_submission.proto", 553,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto, 3, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto), true);
namespace waymo {
namespace open_dataset {
namespace occupancy_flow {

// ===================================================================

void Waypoint::InitAsDefaultInstance() {
}
class Waypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<Waypoint>()._has_bits_);
  static void set_has_observed_vehicles_occupancy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_occluded_vehicles_occupancy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_all_vehicles_flow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Waypoint::Waypoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.occupancy_flow.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  observed_vehicles_occupancy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_observed_vehicles_occupancy()) {
    observed_vehicles_occupancy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.observed_vehicles_occupancy_);
  }
  occluded_vehicles_occupancy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_occluded_vehicles_occupancy()) {
    occluded_vehicles_occupancy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occluded_vehicles_occupancy_);
  }
  all_vehicles_flow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_all_vehicles_flow()) {
    all_vehicles_flow_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.all_vehicles_flow_);
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.occupancy_flow.Waypoint)
}

void Waypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base);
  observed_vehicles_occupancy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occluded_vehicles_occupancy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  all_vehicles_flow_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.occupancy_flow.Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
  observed_vehicles_occupancy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occluded_vehicles_occupancy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  all_vehicles_flow_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Waypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Waypoint& Waypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Waypoint_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.occupancy_flow.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      observed_vehicles_occupancy_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      occluded_vehicles_occupancy_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      all_vehicles_flow_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Waypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes observed_vehicles_occupancy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_observed_vehicles_occupancy(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes occluded_vehicles_occupancy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_occluded_vehicles_occupancy(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes all_vehicles_flow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_all_vehicles_flow(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Waypoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.occupancy_flow.Waypoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes observed_vehicles_occupancy = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_observed_vehicles_occupancy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes occluded_vehicles_occupancy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_occluded_vehicles_occupancy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes all_vehicles_flow = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_all_vehicles_flow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.occupancy_flow.Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.occupancy_flow.Waypoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Waypoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.occupancy_flow.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes observed_vehicles_occupancy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->observed_vehicles_occupancy(), output);
  }

  // optional bytes occluded_vehicles_occupancy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->occluded_vehicles_occupancy(), output);
  }

  // optional bytes all_vehicles_flow = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->all_vehicles_flow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.occupancy_flow.Waypoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* Waypoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.occupancy_flow.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes observed_vehicles_occupancy = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->observed_vehicles_occupancy(), target);
  }

  // optional bytes occluded_vehicles_occupancy = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->occluded_vehicles_occupancy(), target);
  }

  // optional bytes all_vehicles_flow = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->all_vehicles_flow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.occupancy_flow.Waypoint)
  return target;
}

size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.occupancy_flow.Waypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes observed_vehicles_occupancy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->observed_vehicles_occupancy());
    }

    // optional bytes occluded_vehicles_occupancy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->occluded_vehicles_occupancy());
    }

    // optional bytes all_vehicles_flow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->all_vehicles_flow());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Waypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.occupancy_flow.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Waypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.occupancy_flow.Waypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.occupancy_flow.Waypoint)
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.occupancy_flow.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      observed_vehicles_occupancy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.observed_vehicles_occupancy_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      occluded_vehicles_occupancy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.occluded_vehicles_occupancy_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      all_vehicles_flow_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.all_vehicles_flow_);
    }
  }
}

void Waypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.occupancy_flow.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.occupancy_flow.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  return true;
}

void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  observed_vehicles_occupancy_.Swap(&other->observed_vehicles_occupancy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  occluded_vehicles_occupancy_.Swap(&other->occluded_vehicles_occupancy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  all_vehicles_flow_.Swap(&other->all_vehicles_flow_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Waypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScenarioPrediction::InitAsDefaultInstance() {
}
class ScenarioPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioPrediction>()._has_bits_);
  static void set_has_scenario_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioPrediction::ScenarioPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
}
ScenarioPrediction::ScenarioPrediction(const ScenarioPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenario_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scenario_id()) {
    scenario_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenario_id_);
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
}

void ScenarioPrediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base);
  scenario_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScenarioPrediction::~ScenarioPrediction() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  SharedDtor();
}

void ScenarioPrediction::SharedDtor() {
  scenario_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScenarioPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScenarioPrediction& ScenarioPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScenarioPrediction_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void ScenarioPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    scenario_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScenarioPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scenario_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_scenario_id(), ptr, ctx, "waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.occupancy_flow.Waypoint waypoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScenarioPrediction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scenario_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scenario_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.occupancy_flow.Waypoint waypoints = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScenarioPrediction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scenario_id(), output);
  }

  // repeated .waymo.open_dataset.occupancy_flow.Waypoint waypoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->waypoints(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScenarioPrediction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->scenario_id(), target);
  }

  // repeated .waymo.open_dataset.occupancy_flow.Waypoint waypoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->waypoints(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  return target;
}

size_t ScenarioPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.occupancy_flow.Waypoint waypoints = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->waypoints(static_cast<int>(i)));
    }
  }

  // optional string scenario_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scenario_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScenarioPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
    MergeFrom(*source);
  }
}

void ScenarioPrediction::MergeFrom(const ScenarioPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  if (from.has_scenario_id()) {
    _has_bits_[0] |= 0x00000001u;
    scenario_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenario_id_);
  }
}

void ScenarioPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioPrediction::CopyFrom(const ScenarioPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioPrediction::IsInitialized() const {
  return true;
}

void ScenarioPrediction::InternalSwap(ScenarioPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&waypoints_)->InternalSwap(CastToBase(&other->waypoints_));
  scenario_id_.Swap(&other->scenario_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChallengeSubmission::InitAsDefaultInstance() {
}
class ChallengeSubmission::_Internal {
 public:
  using HasBits = decltype(std::declval<ChallengeSubmission>()._has_bits_);
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unique_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_affiliation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_method_link(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ChallengeSubmission::ChallengeSubmission()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
}
ChallengeSubmission::ChallengeSubmission(const ChallengeSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      authors_(from.authors_),
      scenario_predictions_(from.scenario_predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  unique_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_method_name()) {
    unique_method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_method_name_);
  }
  affiliation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_affiliation()) {
    affiliation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  method_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_link()) {
    method_link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_link_);
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
}

void ChallengeSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChallengeSubmission::~ChallengeSubmission() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  SharedDtor();
}

void ChallengeSubmission::SharedDtor() {
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChallengeSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChallengeSubmission& ChallengeSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void ChallengeSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authors_.Clear();
  scenario_predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      affiliation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      method_link_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChallengeSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_account_name(), ptr, ctx, "waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unique_method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_unique_method_name(), ptr, ctx, "waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string authors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_authors(), ptr, ctx, "waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional string affiliation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_affiliation(), ptr, ctx, "waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_description(), ptr, ctx, "waymo.open_dataset.occupancy_flow.ChallengeSubmission.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string method_link = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_method_link(), ptr, ctx, "waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.occupancy_flow.ScenarioPrediction scenario_predictions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_scenario_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChallengeSubmission::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unique_method_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_method_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string authors = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_authors()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authors(this->authors_size() - 1).data(),
            static_cast<int>(this->authors(this->authors_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string affiliation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_affiliation()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->affiliation().data(), static_cast<int>(this->affiliation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.occupancy_flow.ChallengeSubmission.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_link = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_method_link()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_link().data(), static_cast<int>(this->method_link().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.occupancy_flow.ScenarioPrediction scenario_predictions = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_scenario_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChallengeSubmission::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_name(), output);
  }

  // optional string unique_method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unique_method_name(), output);
  }

  // repeated string authors = 3;
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authors(i).data(), static_cast<int>(this->authors(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->authors(i), output);
  }

  // optional string affiliation = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->affiliation(), output);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string method_link = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_link().data(), static_cast<int>(this->method_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->method_link(), output);
  }

  // repeated .waymo.open_dataset.occupancy_flow.ScenarioPrediction scenario_predictions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenario_predictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->scenario_predictions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChallengeSubmission::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }

  // optional string unique_method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->unique_method_name(), target);
  }

  // repeated string authors = 3;
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authors(i).data(), static_cast<int>(this->authors(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->authors(i), target);
  }

  // optional string affiliation = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->affiliation(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string method_link = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_link().data(), static_cast<int>(this->method_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->method_link(), target);
  }

  // repeated .waymo.open_dataset.occupancy_flow.ScenarioPrediction scenario_predictions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenario_predictions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->scenario_predictions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  return target;
}

size_t ChallengeSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string authors = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->authors_size());
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->authors(i));
  }

  // repeated .waymo.open_dataset.occupancy_flow.ScenarioPrediction scenario_predictions = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->scenario_predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->scenario_predictions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string account_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string unique_method_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_method_name());
    }

    // optional string affiliation = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->affiliation());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string method_link = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->method_link());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChallengeSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChallengeSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
    MergeFrom(*source);
  }
}

void ChallengeSubmission::MergeFrom(const ChallengeSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authors_.MergeFrom(from.authors_);
  scenario_predictions_.MergeFrom(from.scenario_predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      unique_method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_method_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      affiliation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      method_link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_link_);
    }
  }
}

void ChallengeSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeSubmission::CopyFrom(const ChallengeSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeSubmission::IsInitialized() const {
  return true;
}

void ChallengeSubmission::InternalSwap(ChallengeSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  authors_.InternalSwap(CastToBase(&other->authors_));
  CastToBase(&scenario_predictions_)->InternalSwap(CastToBase(&other->scenario_predictions_));
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unique_method_name_.Swap(&other->unique_method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  affiliation_.Swap(&other->affiliation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_link_.Swap(&other->method_link_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChallengeSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace occupancy_flow
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::occupancy_flow::Waypoint* Arena::CreateMaybeMessage< ::waymo::open_dataset::occupancy_flow::Waypoint >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::occupancy_flow::Waypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::occupancy_flow::ScenarioPrediction* Arena::CreateMaybeMessage< ::waymo::open_dataset::occupancy_flow::ScenarioPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::occupancy_flow::ScenarioPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::occupancy_flow::ChallengeSubmission* Arena::CreateMaybeMessage< ::waymo::open_dataset::occupancy_flow::ChallengeSubmission >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::occupancy_flow::ChallengeSubmission >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
