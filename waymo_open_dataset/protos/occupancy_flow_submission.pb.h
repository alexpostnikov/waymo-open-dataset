// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/occupancy_flow_submission.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto;
namespace waymo {
namespace open_dataset {
namespace occupancy_flow {
class ChallengeSubmission;
class ChallengeSubmissionDefaultTypeInternal;
extern ChallengeSubmissionDefaultTypeInternal _ChallengeSubmission_default_instance_;
class ScenarioPrediction;
class ScenarioPredictionDefaultTypeInternal;
extern ScenarioPredictionDefaultTypeInternal _ScenarioPrediction_default_instance_;
class Waypoint;
class WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
}  // namespace occupancy_flow
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::occupancy_flow::ChallengeSubmission* Arena::CreateMaybeMessage<::waymo::open_dataset::occupancy_flow::ChallengeSubmission>(Arena*);
template<> ::waymo::open_dataset::occupancy_flow::ScenarioPrediction* Arena::CreateMaybeMessage<::waymo::open_dataset::occupancy_flow::ScenarioPrediction>(Arena*);
template<> ::waymo::open_dataset::occupancy_flow::Waypoint* Arena::CreateMaybeMessage<::waymo::open_dataset::occupancy_flow::Waypoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {
namespace occupancy_flow {

// ===================================================================

class Waypoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.occupancy_flow.Waypoint) */ {
 public:
  Waypoint();
  virtual ~Waypoint();

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint* New() const final {
    return CreateMaybeMessage<Waypoint>(nullptr);
  }

  Waypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.occupancy_flow.Waypoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObservedVehiclesOccupancyFieldNumber = 1,
    kOccludedVehiclesOccupancyFieldNumber = 2,
    kAllVehiclesFlowFieldNumber = 3,
  };
  // optional bytes observed_vehicles_occupancy = 1;
  bool has_observed_vehicles_occupancy() const;
  void clear_observed_vehicles_occupancy();
  const std::string& observed_vehicles_occupancy() const;
  void set_observed_vehicles_occupancy(const std::string& value);
  void set_observed_vehicles_occupancy(std::string&& value);
  void set_observed_vehicles_occupancy(const char* value);
  void set_observed_vehicles_occupancy(const void* value, size_t size);
  std::string* mutable_observed_vehicles_occupancy();
  std::string* release_observed_vehicles_occupancy();
  void set_allocated_observed_vehicles_occupancy(std::string* observed_vehicles_occupancy);

  // optional bytes occluded_vehicles_occupancy = 2;
  bool has_occluded_vehicles_occupancy() const;
  void clear_occluded_vehicles_occupancy();
  const std::string& occluded_vehicles_occupancy() const;
  void set_occluded_vehicles_occupancy(const std::string& value);
  void set_occluded_vehicles_occupancy(std::string&& value);
  void set_occluded_vehicles_occupancy(const char* value);
  void set_occluded_vehicles_occupancy(const void* value, size_t size);
  std::string* mutable_occluded_vehicles_occupancy();
  std::string* release_occluded_vehicles_occupancy();
  void set_allocated_occluded_vehicles_occupancy(std::string* occluded_vehicles_occupancy);

  // optional bytes all_vehicles_flow = 3;
  bool has_all_vehicles_flow() const;
  void clear_all_vehicles_flow();
  const std::string& all_vehicles_flow() const;
  void set_all_vehicles_flow(const std::string& value);
  void set_all_vehicles_flow(std::string&& value);
  void set_all_vehicles_flow(const char* value);
  void set_all_vehicles_flow(const void* value, size_t size);
  std::string* mutable_all_vehicles_flow();
  std::string* release_all_vehicles_flow();
  void set_allocated_all_vehicles_flow(std::string* all_vehicles_flow);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.occupancy_flow.Waypoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr observed_vehicles_occupancy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr occluded_vehicles_occupancy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr all_vehicles_flow_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class ScenarioPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.occupancy_flow.ScenarioPrediction) */ {
 public:
  ScenarioPrediction();
  virtual ~ScenarioPrediction();

  ScenarioPrediction(const ScenarioPrediction& from);
  ScenarioPrediction(ScenarioPrediction&& from) noexcept
    : ScenarioPrediction() {
    *this = ::std::move(from);
  }

  inline ScenarioPrediction& operator=(const ScenarioPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioPrediction& operator=(ScenarioPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScenarioPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScenarioPrediction* internal_default_instance() {
    return reinterpret_cast<const ScenarioPrediction*>(
               &_ScenarioPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScenarioPrediction& a, ScenarioPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScenarioPrediction* New() const final {
    return CreateMaybeMessage<ScenarioPrediction>(nullptr);
  }

  ScenarioPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScenarioPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScenarioPrediction& from);
  void MergeFrom(const ScenarioPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.occupancy_flow.ScenarioPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 2,
    kScenarioIdFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.occupancy_flow.Waypoint waypoints = 2;
  int waypoints_size() const;
  void clear_waypoints();
  ::waymo::open_dataset::occupancy_flow::Waypoint* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::Waypoint >*
      mutable_waypoints();
  const ::waymo::open_dataset::occupancy_flow::Waypoint& waypoints(int index) const;
  ::waymo::open_dataset::occupancy_flow::Waypoint* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::Waypoint >&
      waypoints() const;

  // optional string scenario_id = 1;
  bool has_scenario_id() const;
  void clear_scenario_id();
  const std::string& scenario_id() const;
  void set_scenario_id(const std::string& value);
  void set_scenario_id(std::string&& value);
  void set_scenario_id(const char* value);
  void set_scenario_id(const char* value, size_t size);
  std::string* mutable_scenario_id();
  std::string* release_scenario_id();
  void set_allocated_scenario_id(std::string* scenario_id);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.occupancy_flow.ScenarioPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::Waypoint > waypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_id_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto;
};
// -------------------------------------------------------------------

class ChallengeSubmission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.occupancy_flow.ChallengeSubmission) */ {
 public:
  ChallengeSubmission();
  virtual ~ChallengeSubmission();

  ChallengeSubmission(const ChallengeSubmission& from);
  ChallengeSubmission(ChallengeSubmission&& from) noexcept
    : ChallengeSubmission() {
    *this = ::std::move(from);
  }

  inline ChallengeSubmission& operator=(const ChallengeSubmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeSubmission& operator=(ChallengeSubmission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeSubmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeSubmission* internal_default_instance() {
    return reinterpret_cast<const ChallengeSubmission*>(
               &_ChallengeSubmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChallengeSubmission& a, ChallengeSubmission& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeSubmission* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeSubmission* New() const final {
    return CreateMaybeMessage<ChallengeSubmission>(nullptr);
  }

  ChallengeSubmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeSubmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeSubmission& from);
  void MergeFrom(const ChallengeSubmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeSubmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.occupancy_flow.ChallengeSubmission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorsFieldNumber = 3,
    kScenarioPredictionsFieldNumber = 7,
    kAccountNameFieldNumber = 1,
    kUniqueMethodNameFieldNumber = 2,
    kAffiliationFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kMethodLinkFieldNumber = 6,
  };
  // repeated string authors = 3;
  int authors_size() const;
  void clear_authors();
  const std::string& authors(int index) const;
  std::string* mutable_authors(int index);
  void set_authors(int index, const std::string& value);
  void set_authors(int index, std::string&& value);
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  std::string* add_authors();
  void add_authors(const std::string& value);
  void add_authors(std::string&& value);
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authors();

  // repeated .waymo.open_dataset.occupancy_flow.ScenarioPrediction scenario_predictions = 7;
  int scenario_predictions_size() const;
  void clear_scenario_predictions();
  ::waymo::open_dataset::occupancy_flow::ScenarioPrediction* mutable_scenario_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::ScenarioPrediction >*
      mutable_scenario_predictions();
  const ::waymo::open_dataset::occupancy_flow::ScenarioPrediction& scenario_predictions(int index) const;
  ::waymo::open_dataset::occupancy_flow::ScenarioPrediction* add_scenario_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::ScenarioPrediction >&
      scenario_predictions() const;

  // optional string account_name = 1;
  bool has_account_name() const;
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);

  // optional string unique_method_name = 2;
  bool has_unique_method_name() const;
  void clear_unique_method_name();
  const std::string& unique_method_name() const;
  void set_unique_method_name(const std::string& value);
  void set_unique_method_name(std::string&& value);
  void set_unique_method_name(const char* value);
  void set_unique_method_name(const char* value, size_t size);
  std::string* mutable_unique_method_name();
  std::string* release_unique_method_name();
  void set_allocated_unique_method_name(std::string* unique_method_name);

  // optional string affiliation = 4;
  bool has_affiliation() const;
  void clear_affiliation();
  const std::string& affiliation() const;
  void set_affiliation(const std::string& value);
  void set_affiliation(std::string&& value);
  void set_affiliation(const char* value);
  void set_affiliation(const char* value, size_t size);
  std::string* mutable_affiliation();
  std::string* release_affiliation();
  void set_allocated_affiliation(std::string* affiliation);

  // optional string description = 5;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string method_link = 6;
  bool has_method_link() const;
  void clear_method_link();
  const std::string& method_link() const;
  void set_method_link(const std::string& value);
  void set_method_link(std::string&& value);
  void set_method_link(const char* value);
  void set_method_link(const char* value, size_t size);
  std::string* mutable_method_link();
  std::string* release_method_link();
  void set_allocated_method_link(std::string* method_link);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.occupancy_flow.ChallengeSubmission)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::ScenarioPrediction > scenario_predictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affiliation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_link_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Waypoint

// optional bytes observed_vehicles_occupancy = 1;
inline bool Waypoint::has_observed_vehicles_occupancy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waypoint::clear_observed_vehicles_occupancy() {
  observed_vehicles_occupancy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Waypoint::observed_vehicles_occupancy() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
  return observed_vehicles_occupancy_.GetNoArena();
}
inline void Waypoint::set_observed_vehicles_occupancy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  observed_vehicles_occupancy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
}
inline void Waypoint::set_observed_vehicles_occupancy(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  observed_vehicles_occupancy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
}
inline void Waypoint::set_observed_vehicles_occupancy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  observed_vehicles_occupancy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
}
inline void Waypoint::set_observed_vehicles_occupancy(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  observed_vehicles_occupancy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
}
inline std::string* Waypoint::mutable_observed_vehicles_occupancy() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
  return observed_vehicles_occupancy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Waypoint::release_observed_vehicles_occupancy() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
  if (!has_observed_vehicles_occupancy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return observed_vehicles_occupancy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Waypoint::set_allocated_observed_vehicles_occupancy(std::string* observed_vehicles_occupancy) {
  if (observed_vehicles_occupancy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  observed_vehicles_occupancy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), observed_vehicles_occupancy);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.Waypoint.observed_vehicles_occupancy)
}

// optional bytes occluded_vehicles_occupancy = 2;
inline bool Waypoint::has_occluded_vehicles_occupancy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Waypoint::clear_occluded_vehicles_occupancy() {
  occluded_vehicles_occupancy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Waypoint::occluded_vehicles_occupancy() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
  return occluded_vehicles_occupancy_.GetNoArena();
}
inline void Waypoint::set_occluded_vehicles_occupancy(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  occluded_vehicles_occupancy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
}
inline void Waypoint::set_occluded_vehicles_occupancy(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  occluded_vehicles_occupancy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
}
inline void Waypoint::set_occluded_vehicles_occupancy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  occluded_vehicles_occupancy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
}
inline void Waypoint::set_occluded_vehicles_occupancy(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  occluded_vehicles_occupancy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
}
inline std::string* Waypoint::mutable_occluded_vehicles_occupancy() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
  return occluded_vehicles_occupancy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Waypoint::release_occluded_vehicles_occupancy() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
  if (!has_occluded_vehicles_occupancy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return occluded_vehicles_occupancy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Waypoint::set_allocated_occluded_vehicles_occupancy(std::string* occluded_vehicles_occupancy) {
  if (occluded_vehicles_occupancy != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  occluded_vehicles_occupancy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), occluded_vehicles_occupancy);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.Waypoint.occluded_vehicles_occupancy)
}

// optional bytes all_vehicles_flow = 3;
inline bool Waypoint::has_all_vehicles_flow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Waypoint::clear_all_vehicles_flow() {
  all_vehicles_flow_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Waypoint::all_vehicles_flow() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
  return all_vehicles_flow_.GetNoArena();
}
inline void Waypoint::set_all_vehicles_flow(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  all_vehicles_flow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
}
inline void Waypoint::set_all_vehicles_flow(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  all_vehicles_flow_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
}
inline void Waypoint::set_all_vehicles_flow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  all_vehicles_flow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
}
inline void Waypoint::set_all_vehicles_flow(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  all_vehicles_flow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
}
inline std::string* Waypoint::mutable_all_vehicles_flow() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
  return all_vehicles_flow_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Waypoint::release_all_vehicles_flow() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
  if (!has_all_vehicles_flow()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return all_vehicles_flow_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Waypoint::set_allocated_all_vehicles_flow(std::string* all_vehicles_flow) {
  if (all_vehicles_flow != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  all_vehicles_flow_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), all_vehicles_flow);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.Waypoint.all_vehicles_flow)
}

// -------------------------------------------------------------------

// ScenarioPrediction

// optional string scenario_id = 1;
inline bool ScenarioPrediction::has_scenario_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenarioPrediction::clear_scenario_id() {
  scenario_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScenarioPrediction::scenario_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
  return scenario_id_.GetNoArena();
}
inline void ScenarioPrediction::set_scenario_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
}
inline void ScenarioPrediction::set_scenario_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
}
inline void ScenarioPrediction::set_scenario_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
}
inline void ScenarioPrediction::set_scenario_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
}
inline std::string* ScenarioPrediction::mutable_scenario_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
  return scenario_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ScenarioPrediction::release_scenario_id() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
  if (!has_scenario_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scenario_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ScenarioPrediction::set_allocated_scenario_id(std::string* scenario_id) {
  if (scenario_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scenario_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario_id);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.ScenarioPrediction.scenario_id)
}

// repeated .waymo.open_dataset.occupancy_flow.Waypoint waypoints = 2;
inline int ScenarioPrediction::waypoints_size() const {
  return waypoints_.size();
}
inline void ScenarioPrediction::clear_waypoints() {
  waypoints_.Clear();
}
inline ::waymo::open_dataset::occupancy_flow::Waypoint* ScenarioPrediction::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ScenarioPrediction.waypoints)
  return waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::Waypoint >*
ScenarioPrediction::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.occupancy_flow.ScenarioPrediction.waypoints)
  return &waypoints_;
}
inline const ::waymo::open_dataset::occupancy_flow::Waypoint& ScenarioPrediction::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ScenarioPrediction.waypoints)
  return waypoints_.Get(index);
}
inline ::waymo::open_dataset::occupancy_flow::Waypoint* ScenarioPrediction::add_waypoints() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.occupancy_flow.ScenarioPrediction.waypoints)
  return waypoints_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::Waypoint >&
ScenarioPrediction::waypoints() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.occupancy_flow.ScenarioPrediction.waypoints)
  return waypoints_;
}

// -------------------------------------------------------------------

// ChallengeSubmission

// optional string account_name = 1;
inline bool ChallengeSubmission::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChallengeSubmission::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChallengeSubmission::account_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
  return account_name_.GetNoArena();
}
inline void ChallengeSubmission::set_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
}
inline void ChallengeSubmission::set_account_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
}
inline void ChallengeSubmission::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
}
inline void ChallengeSubmission::set_account_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
}
inline std::string* ChallengeSubmission::mutable_account_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
  return account_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeSubmission::release_account_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
  if (!has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return account_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeSubmission::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  account_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.ChallengeSubmission.account_name)
}

// optional string unique_method_name = 2;
inline bool ChallengeSubmission::has_unique_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChallengeSubmission::clear_unique_method_name() {
  unique_method_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChallengeSubmission::unique_method_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
  return unique_method_name_.GetNoArena();
}
inline void ChallengeSubmission::set_unique_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
}
inline void ChallengeSubmission::set_unique_method_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
}
inline void ChallengeSubmission::set_unique_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
}
inline void ChallengeSubmission::set_unique_method_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  unique_method_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
}
inline std::string* ChallengeSubmission::mutable_unique_method_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
  return unique_method_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeSubmission::release_unique_method_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
  if (!has_unique_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unique_method_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeSubmission::set_allocated_unique_method_name(std::string* unique_method_name) {
  if (unique_method_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unique_method_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_method_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.ChallengeSubmission.unique_method_name)
}

// repeated string authors = 3;
inline int ChallengeSubmission::authors_size() const {
  return authors_.size();
}
inline void ChallengeSubmission::clear_authors() {
  authors_.Clear();
}
inline const std::string& ChallengeSubmission::authors(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
  return authors_.Get(index);
}
inline std::string* ChallengeSubmission::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
  return authors_.Mutable(index);
}
inline void ChallengeSubmission::set_authors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
  authors_.Mutable(index)->assign(value);
}
inline void ChallengeSubmission::set_authors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
inline void ChallengeSubmission::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
}
inline void ChallengeSubmission::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
}
inline std::string* ChallengeSubmission::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
  return authors_.Add();
}
inline void ChallengeSubmission::add_authors(const std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
}
inline void ChallengeSubmission::add_authors(std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
}
inline void ChallengeSubmission::add_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
}
inline void ChallengeSubmission::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChallengeSubmission::authors() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
  return authors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChallengeSubmission::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.occupancy_flow.ChallengeSubmission.authors)
  return &authors_;
}

// optional string affiliation = 4;
inline bool ChallengeSubmission::has_affiliation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChallengeSubmission::clear_affiliation() {
  affiliation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChallengeSubmission::affiliation() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
  return affiliation_.GetNoArena();
}
inline void ChallengeSubmission::set_affiliation(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
}
inline void ChallengeSubmission::set_affiliation(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
}
inline void ChallengeSubmission::set_affiliation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
}
inline void ChallengeSubmission::set_affiliation(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  affiliation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
}
inline std::string* ChallengeSubmission::mutable_affiliation() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
  return affiliation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeSubmission::release_affiliation() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
  if (!has_affiliation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return affiliation_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeSubmission::set_allocated_affiliation(std::string* affiliation) {
  if (affiliation != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  affiliation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affiliation);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.ChallengeSubmission.affiliation)
}

// optional string description = 5;
inline bool ChallengeSubmission::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChallengeSubmission::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ChallengeSubmission::description() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
  return description_.GetNoArena();
}
inline void ChallengeSubmission::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
}
inline void ChallengeSubmission::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
}
inline void ChallengeSubmission::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
}
inline void ChallengeSubmission::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
}
inline std::string* ChallengeSubmission::mutable_description() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeSubmission::release_description() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeSubmission::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.ChallengeSubmission.description)
}

// optional string method_link = 6;
inline bool ChallengeSubmission::has_method_link() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChallengeSubmission::clear_method_link() {
  method_link_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ChallengeSubmission::method_link() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
  return method_link_.GetNoArena();
}
inline void ChallengeSubmission::set_method_link(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
}
inline void ChallengeSubmission::set_method_link(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
}
inline void ChallengeSubmission::set_method_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
}
inline void ChallengeSubmission::set_method_link(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  method_link_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
}
inline std::string* ChallengeSubmission::mutable_method_link() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
  return method_link_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChallengeSubmission::release_method_link() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
  if (!has_method_link()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return method_link_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChallengeSubmission::set_allocated_method_link(std::string* method_link) {
  if (method_link != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  method_link_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_link);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.occupancy_flow.ChallengeSubmission.method_link)
}

// repeated .waymo.open_dataset.occupancy_flow.ScenarioPrediction scenario_predictions = 7;
inline int ChallengeSubmission::scenario_predictions_size() const {
  return scenario_predictions_.size();
}
inline void ChallengeSubmission::clear_scenario_predictions() {
  scenario_predictions_.Clear();
}
inline ::waymo::open_dataset::occupancy_flow::ScenarioPrediction* ChallengeSubmission::mutable_scenario_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.occupancy_flow.ChallengeSubmission.scenario_predictions)
  return scenario_predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::ScenarioPrediction >*
ChallengeSubmission::mutable_scenario_predictions() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.occupancy_flow.ChallengeSubmission.scenario_predictions)
  return &scenario_predictions_;
}
inline const ::waymo::open_dataset::occupancy_flow::ScenarioPrediction& ChallengeSubmission::scenario_predictions(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.occupancy_flow.ChallengeSubmission.scenario_predictions)
  return scenario_predictions_.Get(index);
}
inline ::waymo::open_dataset::occupancy_flow::ScenarioPrediction* ChallengeSubmission::add_scenario_predictions() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.occupancy_flow.ChallengeSubmission.scenario_predictions)
  return scenario_predictions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::occupancy_flow::ScenarioPrediction >&
ChallengeSubmission::scenario_predictions() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.occupancy_flow.ChallengeSubmission.scenario_predictions)
  return scenario_predictions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace occupancy_flow
}  // namespace open_dataset
}  // namespace waymo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2foccupancy_5fflow_5fsubmission_2eproto
