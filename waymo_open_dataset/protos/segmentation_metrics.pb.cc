// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/segmentation_metrics.proto

#include "waymo_open_dataset/protos/segmentation_metrics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fdataset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Laser_waymo_5fopen_5fdataset_2fdataset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentationMetrics_PerClassIouEntry_DoNotUse_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto;
namespace waymo {
namespace open_dataset {
class SegmentationFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentationFrame> _instance;
} _SegmentationFrame_default_instance_;
class SegmentationFrameListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentationFrameList> _instance;
} _SegmentationFrameList_default_instance_;
class SegmentationMetricsConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentationMetricsConfig> _instance;
} _SegmentationMetricsConfig_default_instance_;
class SegmentationMetrics_PerClassIouEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentationMetrics_PerClassIouEntry_DoNotUse> _instance;
} _SegmentationMetrics_PerClassIouEntry_DoNotUse_default_instance_;
class SegmentationMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SegmentationMetrics> _instance;
} _SegmentationMetrics_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SegmentationFrame_default_instance_;
    new (ptr) ::waymo::open_dataset::SegmentationFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::SegmentationFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto}, {
      &scc_info_Laser_waymo_5fopen_5fdataset_2fdataset_2eproto.base,}};

static void InitDefaultsscc_info_SegmentationFrameList_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SegmentationFrameList_default_instance_;
    new (ptr) ::waymo::open_dataset::SegmentationFrameList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::SegmentationFrameList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegmentationFrameList_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SegmentationFrameList_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto}, {
      &scc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_SegmentationMetrics_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SegmentationMetrics_default_instance_;
    new (ptr) ::waymo::open_dataset::SegmentationMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::SegmentationMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SegmentationMetrics_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SegmentationMetrics_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto}, {
      &scc_info_SegmentationMetrics_PerClassIouEntry_DoNotUse_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_SegmentationMetrics_PerClassIouEntry_DoNotUse_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SegmentationMetrics_PerClassIouEntry_DoNotUse_default_instance_;
    new (ptr) ::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse();
  }
  ::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentationMetrics_PerClassIouEntry_DoNotUse_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SegmentationMetrics_PerClassIouEntry_DoNotUse_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_SegmentationMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SegmentationMetricsConfig_default_instance_;
    new (ptr) ::waymo::open_dataset::SegmentationMetricsConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::SegmentationMetricsConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SegmentationMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SegmentationMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrame, segmentation_labels_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrame, context_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrame, frame_timestamp_micros_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrameList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationFrameList, frames_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetricsConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetricsConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetricsConfig, segmentation_types_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics, per_class_iou_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SegmentationMetrics, miou_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::waymo::open_dataset::SegmentationFrame)},
  { 11, 17, sizeof(::waymo::open_dataset::SegmentationFrameList)},
  { 18, 24, sizeof(::waymo::open_dataset::SegmentationMetricsConfig)},
  { 25, 32, sizeof(::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse)},
  { 34, 41, sizeof(::waymo::open_dataset::SegmentationMetrics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SegmentationFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SegmentationFrameList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SegmentationMetricsConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SegmentationMetrics_PerClassIouEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SegmentationMetrics_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4waymo_open_dataset/protos/segmentation"
  "_metrics.proto\022\022waymo.open_dataset\032 waym"
  "o_open_dataset/dataset.proto\032,waymo_open"
  "_dataset/protos/segmentation.proto\"\201\001\n\021S"
  "egmentationFrame\0226\n\023segmentation_labels\030"
  "\001 \003(\0132\031.waymo.open_dataset.Laser\022\024\n\014cont"
  "ext_name\030\002 \001(\t\022\036\n\026frame_timestamp_micros"
  "\030\003 \001(\003\"N\n\025SegmentationFrameList\0225\n\006frame"
  "s\030\001 \003(\0132%.waymo.open_dataset.Segmentatio"
  "nFrame\"b\n\031SegmentationMetricsConfig\022E\n\022s"
  "egmentation_types\030\001 \003(\0162%.waymo.open_dat"
  "aset.Segmentation.TypeB\002\020\001\"\250\001\n\023Segmentat"
  "ionMetrics\022O\n\rper_class_iou\030\001 \003(\01328.waym"
  "o.open_dataset.SegmentationMetrics.PerCl"
  "assIouEntry\022\014\n\004miou\030\002 \001(\002\0322\n\020PerClassIou"
  "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\002:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_deps[2] = {
  &::descriptor_table_waymo_5fopen_5fdataset_2fdataset_2eproto,
  &::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_sccs[5] = {
  &scc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base,
  &scc_info_SegmentationFrameList_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base,
  &scc_info_SegmentationMetrics_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base,
  &scc_info_SegmentationMetrics_PerClassIouEntry_DoNotUse_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base,
  &scc_info_SegmentationMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto, "waymo_open_dataset/protos/segmentation_metrics.proto", 637,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto, 5, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto), true);
namespace waymo {
namespace open_dataset {

// ===================================================================

void SegmentationFrame::InitAsDefaultInstance() {
}
class SegmentationFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmentationFrame>()._has_bits_);
  static void set_has_context_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_timestamp_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void SegmentationFrame::clear_segmentation_labels() {
  segmentation_labels_.Clear();
}
SegmentationFrame::SegmentationFrame()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.SegmentationFrame)
}
SegmentationFrame::SegmentationFrame(const SegmentationFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      segmentation_labels_(from.segmentation_labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_context_name()) {
    context_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_name_);
  }
  frame_timestamp_micros_ = from.frame_timestamp_micros_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.SegmentationFrame)
}

void SegmentationFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base);
  context_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_timestamp_micros_ = PROTOBUF_LONGLONG(0);
}

SegmentationFrame::~SegmentationFrame() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.SegmentationFrame)
  SharedDtor();
}

void SegmentationFrame::SharedDtor() {
  context_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SegmentationFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentationFrame& SegmentationFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentationFrame_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void SegmentationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.SegmentationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentation_labels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    context_name_.ClearNonDefaultToEmptyNoArena();
  }
  frame_timestamp_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmentationFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.Laser segmentation_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_segmentation_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string context_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_context_name(), ptr, ctx, "waymo.open_dataset.SegmentationFrame.context_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 frame_timestamp_micros = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frame_timestamp_micros(&has_bits);
          frame_timestamp_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmentationFrame::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.SegmentationFrame)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.Laser segmentation_labels = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_segmentation_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string context_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_context_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context_name().data(), static_cast<int>(this->context_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.SegmentationFrame.context_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 frame_timestamp_micros = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_frame_timestamp_micros(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_timestamp_micros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.SegmentationFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.SegmentationFrame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmentationFrame::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.SegmentationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Laser segmentation_labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segmentation_labels_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->segmentation_labels(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string context_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_name().data(), static_cast<int>(this->context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.SegmentationFrame.context_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->context_name(), output);
  }

  // optional int64 frame_timestamp_micros = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->frame_timestamp_micros(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.SegmentationFrame)
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentationFrame::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.SegmentationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Laser segmentation_labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segmentation_labels_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->segmentation_labels(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string context_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_name().data(), static_cast<int>(this->context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.SegmentationFrame.context_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->context_name(), target);
  }

  // optional int64 frame_timestamp_micros = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->frame_timestamp_micros(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.SegmentationFrame)
  return target;
}

size_t SegmentationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.SegmentationFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Laser segmentation_labels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segmentation_labels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->segmentation_labels(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string context_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->context_name());
    }

    // optional int64 frame_timestamp_micros = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->frame_timestamp_micros());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentationFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.SegmentationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentationFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentationFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.SegmentationFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.SegmentationFrame)
    MergeFrom(*source);
  }
}

void SegmentationFrame::MergeFrom(const SegmentationFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.SegmentationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentation_labels_.MergeFrom(from.segmentation_labels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      context_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.context_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      frame_timestamp_micros_ = from.frame_timestamp_micros_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SegmentationFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.SegmentationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationFrame::CopyFrom(const SegmentationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.SegmentationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationFrame::IsInitialized() const {
  return true;
}

void SegmentationFrame::InternalSwap(SegmentationFrame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&segmentation_labels_)->InternalSwap(CastToBase(&other->segmentation_labels_));
  context_name_.Swap(&other->context_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_timestamp_micros_, other->frame_timestamp_micros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentationFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentationFrameList::InitAsDefaultInstance() {
}
class SegmentationFrameList::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmentationFrameList>()._has_bits_);
};

SegmentationFrameList::SegmentationFrameList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.SegmentationFrameList)
}
SegmentationFrameList::SegmentationFrameList(const SegmentationFrameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.SegmentationFrameList)
}

void SegmentationFrameList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentationFrameList_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base);
}

SegmentationFrameList::~SegmentationFrameList() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.SegmentationFrameList)
  SharedDtor();
}

void SegmentationFrameList::SharedDtor() {
}

void SegmentationFrameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentationFrameList& SegmentationFrameList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentationFrameList_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void SegmentationFrameList::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.SegmentationFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmentationFrameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.SegmentationFrame frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmentationFrameList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.SegmentationFrameList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.SegmentationFrame frames = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.SegmentationFrameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.SegmentationFrameList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmentationFrameList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.SegmentationFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SegmentationFrame frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->frames(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.SegmentationFrameList)
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentationFrameList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.SegmentationFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SegmentationFrame frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frames_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->frames(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.SegmentationFrameList)
  return target;
}

size_t SegmentationFrameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.SegmentationFrameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SegmentationFrame frames = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->frames_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->frames(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentationFrameList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.SegmentationFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentationFrameList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentationFrameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.SegmentationFrameList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.SegmentationFrameList)
    MergeFrom(*source);
  }
}

void SegmentationFrameList::MergeFrom(const SegmentationFrameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.SegmentationFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void SegmentationFrameList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.SegmentationFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationFrameList::CopyFrom(const SegmentationFrameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.SegmentationFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationFrameList::IsInitialized() const {
  return true;
}

void SegmentationFrameList::InternalSwap(SegmentationFrameList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&frames_)->InternalSwap(CastToBase(&other->frames_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentationFrameList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SegmentationMetricsConfig::InitAsDefaultInstance() {
}
class SegmentationMetricsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmentationMetricsConfig>()._has_bits_);
};

SegmentationMetricsConfig::SegmentationMetricsConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.SegmentationMetricsConfig)
}
SegmentationMetricsConfig::SegmentationMetricsConfig(const SegmentationMetricsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      segmentation_types_(from.segmentation_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.SegmentationMetricsConfig)
}

void SegmentationMetricsConfig::SharedCtor() {
}

SegmentationMetricsConfig::~SegmentationMetricsConfig() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.SegmentationMetricsConfig)
  SharedDtor();
}

void SegmentationMetricsConfig::SharedDtor() {
}

void SegmentationMetricsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentationMetricsConfig& SegmentationMetricsConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentationMetricsConfig_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void SegmentationMetricsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.SegmentationMetricsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmentation_types_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmentationMetricsConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.Segmentation.Type segmentation_types = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_segmentation_types(), ptr, ctx, ::waymo::open_dataset::Segmentation_Type_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::Segmentation_Type_IsValid(val))) {
            add_segmentation_types(static_cast<::waymo::open_dataset::Segmentation_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmentationMetricsConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.SegmentationMetricsConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.Segmentation.Type segmentation_types = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::waymo::open_dataset::Segmentation_Type_IsValid(value)) {
              add_segmentation_types(static_cast< ::waymo::open_dataset::Segmentation_Type >(value));
            } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
            }
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::Segmentation_Type_IsValid(value)) {
            add_segmentation_types(static_cast< ::waymo::open_dataset::Segmentation_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.SegmentationMetricsConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.SegmentationMetricsConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmentationMetricsConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.SegmentationMetricsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Segmentation.Type segmentation_types = 1 [packed = true];
  if (this->segmentation_types_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_segmentation_types_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->segmentation_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->segmentation_types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.SegmentationMetricsConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentationMetricsConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.SegmentationMetricsConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Segmentation.Type segmentation_types = 1 [packed = true];
  if (this->segmentation_types_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _segmentation_types_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->segmentation_types_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.SegmentationMetricsConfig)
  return target;
}

size_t SegmentationMetricsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.SegmentationMetricsConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.Segmentation.Type segmentation_types = 1 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->segmentation_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->segmentation_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _segmentation_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentationMetricsConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.SegmentationMetricsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentationMetricsConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentationMetricsConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.SegmentationMetricsConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.SegmentationMetricsConfig)
    MergeFrom(*source);
  }
}

void SegmentationMetricsConfig::MergeFrom(const SegmentationMetricsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.SegmentationMetricsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmentation_types_.MergeFrom(from.segmentation_types_);
}

void SegmentationMetricsConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.SegmentationMetricsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationMetricsConfig::CopyFrom(const SegmentationMetricsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.SegmentationMetricsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationMetricsConfig::IsInitialized() const {
  return true;
}

void SegmentationMetricsConfig::InternalSwap(SegmentationMetricsConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segmentation_types_.InternalSwap(&other->segmentation_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentationMetricsConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SegmentationMetrics_PerClassIouEntry_DoNotUse::SegmentationMetrics_PerClassIouEntry_DoNotUse() {}
SegmentationMetrics_PerClassIouEntry_DoNotUse::SegmentationMetrics_PerClassIouEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SegmentationMetrics_PerClassIouEntry_DoNotUse::MergeFrom(const SegmentationMetrics_PerClassIouEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SegmentationMetrics_PerClassIouEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SegmentationMetrics_PerClassIouEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SegmentationMetrics::InitAsDefaultInstance() {
}
class SegmentationMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<SegmentationMetrics>()._has_bits_);
  static void set_has_miou(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SegmentationMetrics::SegmentationMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.SegmentationMetrics)
}
SegmentationMetrics::SegmentationMetrics(const SegmentationMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  per_class_iou_.MergeFrom(from.per_class_iou_);
  miou_ = from.miou_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.SegmentationMetrics)
}

void SegmentationMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SegmentationMetrics_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base);
  miou_ = 0;
}

SegmentationMetrics::~SegmentationMetrics() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.SegmentationMetrics)
  SharedDtor();
}

void SegmentationMetrics::SharedDtor() {
}

void SegmentationMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SegmentationMetrics& SegmentationMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SegmentationMetrics_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.base);
  return *internal_default_instance();
}


void SegmentationMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.SegmentationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_class_iou_.Clear();
  miou_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SegmentationMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, float> per_class_iou = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&per_class_iou_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional float miou = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_miou(&has_bits);
          miou_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SegmentationMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.SegmentationMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, float> per_class_iou = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          SegmentationMetrics_PerClassIouEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SegmentationMetrics_PerClassIouEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float > > parser(&per_class_iou_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float miou = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_miou(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &miou_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.SegmentationMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.SegmentationMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SegmentationMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.SegmentationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, float> per_class_iou = 1;
  if (!this->per_class_iou().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->per_class_iou().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->per_class_iou().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->per_class_iou().begin();
          it != this->per_class_iou().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SegmentationMetrics_PerClassIouEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->per_class_iou().begin();
          it != this->per_class_iou().end(); ++it) {
        SegmentationMetrics_PerClassIouEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional float miou = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->miou(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.SegmentationMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* SegmentationMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.SegmentationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, float> per_class_iou = 1;
  if (!this->per_class_iou().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->per_class_iou().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->per_class_iou().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->per_class_iou().begin();
          it != this->per_class_iou().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SegmentationMetrics_PerClassIouEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->per_class_iou().begin();
          it != this->per_class_iou().end(); ++it) {
        target = SegmentationMetrics_PerClassIouEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional float miou = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->miou(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.SegmentationMetrics)
  return target;
}

size_t SegmentationMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.SegmentationMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, float> per_class_iou = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->per_class_iou_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
      it = this->per_class_iou().begin();
      it != this->per_class_iou().end(); ++it) {
    total_size += SegmentationMetrics_PerClassIouEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional float miou = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SegmentationMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.SegmentationMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const SegmentationMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SegmentationMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.SegmentationMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.SegmentationMetrics)
    MergeFrom(*source);
  }
}

void SegmentationMetrics::MergeFrom(const SegmentationMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.SegmentationMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  per_class_iou_.MergeFrom(from.per_class_iou_);
  if (from.has_miou()) {
    set_miou(from.miou());
  }
}

void SegmentationMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.SegmentationMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationMetrics::CopyFrom(const SegmentationMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.SegmentationMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationMetrics::IsInitialized() const {
  return true;
}

void SegmentationMetrics::InternalSwap(SegmentationMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  per_class_iou_.Swap(&other->per_class_iou_);
  swap(miou_, other->miou_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SegmentationMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SegmentationFrame* Arena::CreateMaybeMessage< ::waymo::open_dataset::SegmentationFrame >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SegmentationFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SegmentationFrameList* Arena::CreateMaybeMessage< ::waymo::open_dataset::SegmentationFrameList >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SegmentationFrameList >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SegmentationMetricsConfig* Arena::CreateMaybeMessage< ::waymo::open_dataset::SegmentationMetricsConfig >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SegmentationMetricsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse* Arena::CreateMaybeMessage< ::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SegmentationMetrics* Arena::CreateMaybeMessage< ::waymo::open_dataset::SegmentationMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SegmentationMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
