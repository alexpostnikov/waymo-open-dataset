// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/segmentation_metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "waymo_open_dataset/dataset.pb.h"
#include "waymo_open_dataset/protos/segmentation.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto;
namespace waymo {
namespace open_dataset {
class SegmentationFrame;
class SegmentationFrameDefaultTypeInternal;
extern SegmentationFrameDefaultTypeInternal _SegmentationFrame_default_instance_;
class SegmentationFrameList;
class SegmentationFrameListDefaultTypeInternal;
extern SegmentationFrameListDefaultTypeInternal _SegmentationFrameList_default_instance_;
class SegmentationMetrics;
class SegmentationMetricsDefaultTypeInternal;
extern SegmentationMetricsDefaultTypeInternal _SegmentationMetrics_default_instance_;
class SegmentationMetricsConfig;
class SegmentationMetricsConfigDefaultTypeInternal;
extern SegmentationMetricsConfigDefaultTypeInternal _SegmentationMetricsConfig_default_instance_;
class SegmentationMetrics_PerClassIouEntry_DoNotUse;
class SegmentationMetrics_PerClassIouEntry_DoNotUseDefaultTypeInternal;
extern SegmentationMetrics_PerClassIouEntry_DoNotUseDefaultTypeInternal _SegmentationMetrics_PerClassIouEntry_DoNotUse_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::SegmentationFrame* Arena::CreateMaybeMessage<::waymo::open_dataset::SegmentationFrame>(Arena*);
template<> ::waymo::open_dataset::SegmentationFrameList* Arena::CreateMaybeMessage<::waymo::open_dataset::SegmentationFrameList>(Arena*);
template<> ::waymo::open_dataset::SegmentationMetrics* Arena::CreateMaybeMessage<::waymo::open_dataset::SegmentationMetrics>(Arena*);
template<> ::waymo::open_dataset::SegmentationMetricsConfig* Arena::CreateMaybeMessage<::waymo::open_dataset::SegmentationMetricsConfig>(Arena*);
template<> ::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse* Arena::CreateMaybeMessage<::waymo::open_dataset::SegmentationMetrics_PerClassIouEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

// ===================================================================

class SegmentationFrame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.SegmentationFrame) */ {
 public:
  SegmentationFrame();
  virtual ~SegmentationFrame();

  SegmentationFrame(const SegmentationFrame& from);
  SegmentationFrame(SegmentationFrame&& from) noexcept
    : SegmentationFrame() {
    *this = ::std::move(from);
  }

  inline SegmentationFrame& operator=(const SegmentationFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentationFrame& operator=(SegmentationFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentationFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentationFrame* internal_default_instance() {
    return reinterpret_cast<const SegmentationFrame*>(
               &_SegmentationFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SegmentationFrame& a, SegmentationFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentationFrame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentationFrame* New() const final {
    return CreateMaybeMessage<SegmentationFrame>(nullptr);
  }

  SegmentationFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentationFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentationFrame& from);
  void MergeFrom(const SegmentationFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentationFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.SegmentationFrame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentationLabelsFieldNumber = 1,
    kContextNameFieldNumber = 2,
    kFrameTimestampMicrosFieldNumber = 3,
  };
  // repeated .waymo.open_dataset.Laser segmentation_labels = 1;
  int segmentation_labels_size() const;
  void clear_segmentation_labels();
  ::waymo::open_dataset::Laser* mutable_segmentation_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >*
      mutable_segmentation_labels();
  const ::waymo::open_dataset::Laser& segmentation_labels(int index) const;
  ::waymo::open_dataset::Laser* add_segmentation_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >&
      segmentation_labels() const;

  // optional string context_name = 2;
  bool has_context_name() const;
  void clear_context_name();
  const std::string& context_name() const;
  void set_context_name(const std::string& value);
  void set_context_name(std::string&& value);
  void set_context_name(const char* value);
  void set_context_name(const char* value, size_t size);
  std::string* mutable_context_name();
  std::string* release_context_name();
  void set_allocated_context_name(std::string* context_name);

  // optional int64 frame_timestamp_micros = 3;
  bool has_frame_timestamp_micros() const;
  void clear_frame_timestamp_micros();
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_micros() const;
  void set_frame_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.SegmentationFrame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser > segmentation_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 frame_timestamp_micros_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class SegmentationFrameList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.SegmentationFrameList) */ {
 public:
  SegmentationFrameList();
  virtual ~SegmentationFrameList();

  SegmentationFrameList(const SegmentationFrameList& from);
  SegmentationFrameList(SegmentationFrameList&& from) noexcept
    : SegmentationFrameList() {
    *this = ::std::move(from);
  }

  inline SegmentationFrameList& operator=(const SegmentationFrameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentationFrameList& operator=(SegmentationFrameList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentationFrameList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentationFrameList* internal_default_instance() {
    return reinterpret_cast<const SegmentationFrameList*>(
               &_SegmentationFrameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SegmentationFrameList& a, SegmentationFrameList& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentationFrameList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentationFrameList* New() const final {
    return CreateMaybeMessage<SegmentationFrameList>(nullptr);
  }

  SegmentationFrameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentationFrameList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentationFrameList& from);
  void MergeFrom(const SegmentationFrameList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentationFrameList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.SegmentationFrameList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.SegmentationFrame frames = 1;
  int frames_size() const;
  void clear_frames();
  ::waymo::open_dataset::SegmentationFrame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SegmentationFrame >*
      mutable_frames();
  const ::waymo::open_dataset::SegmentationFrame& frames(int index) const;
  ::waymo::open_dataset::SegmentationFrame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SegmentationFrame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.SegmentationFrameList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SegmentationFrame > frames_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class SegmentationMetricsConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.SegmentationMetricsConfig) */ {
 public:
  SegmentationMetricsConfig();
  virtual ~SegmentationMetricsConfig();

  SegmentationMetricsConfig(const SegmentationMetricsConfig& from);
  SegmentationMetricsConfig(SegmentationMetricsConfig&& from) noexcept
    : SegmentationMetricsConfig() {
    *this = ::std::move(from);
  }

  inline SegmentationMetricsConfig& operator=(const SegmentationMetricsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentationMetricsConfig& operator=(SegmentationMetricsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentationMetricsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentationMetricsConfig* internal_default_instance() {
    return reinterpret_cast<const SegmentationMetricsConfig*>(
               &_SegmentationMetricsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SegmentationMetricsConfig& a, SegmentationMetricsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentationMetricsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentationMetricsConfig* New() const final {
    return CreateMaybeMessage<SegmentationMetricsConfig>(nullptr);
  }

  SegmentationMetricsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentationMetricsConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentationMetricsConfig& from);
  void MergeFrom(const SegmentationMetricsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentationMetricsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.SegmentationMetricsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentationTypesFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.Segmentation.Type segmentation_types = 1 [packed = true];
  int segmentation_types_size() const;
  void clear_segmentation_types();
  ::waymo::open_dataset::Segmentation_Type segmentation_types(int index) const;
  void set_segmentation_types(int index, ::waymo::open_dataset::Segmentation_Type value);
  void add_segmentation_types(::waymo::open_dataset::Segmentation_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& segmentation_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_segmentation_types();

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.SegmentationMetricsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> segmentation_types_;
  mutable std::atomic<int> _segmentation_types_cached_byte_size_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto;
};
// -------------------------------------------------------------------

class SegmentationMetrics_PerClassIouEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SegmentationMetrics_PerClassIouEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SegmentationMetrics_PerClassIouEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  SegmentationMetrics_PerClassIouEntry_DoNotUse();
  SegmentationMetrics_PerClassIouEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SegmentationMetrics_PerClassIouEntry_DoNotUse& other);
  static const SegmentationMetrics_PerClassIouEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SegmentationMetrics_PerClassIouEntry_DoNotUse*>(&_SegmentationMetrics_PerClassIouEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class SegmentationMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.SegmentationMetrics) */ {
 public:
  SegmentationMetrics();
  virtual ~SegmentationMetrics();

  SegmentationMetrics(const SegmentationMetrics& from);
  SegmentationMetrics(SegmentationMetrics&& from) noexcept
    : SegmentationMetrics() {
    *this = ::std::move(from);
  }

  inline SegmentationMetrics& operator=(const SegmentationMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentationMetrics& operator=(SegmentationMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SegmentationMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SegmentationMetrics* internal_default_instance() {
    return reinterpret_cast<const SegmentationMetrics*>(
               &_SegmentationMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SegmentationMetrics& a, SegmentationMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentationMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SegmentationMetrics* New() const final {
    return CreateMaybeMessage<SegmentationMetrics>(nullptr);
  }

  SegmentationMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SegmentationMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SegmentationMetrics& from);
  void MergeFrom(const SegmentationMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentationMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.SegmentationMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPerClassIouFieldNumber = 1,
    kMiouFieldNumber = 2,
  };
  // map<int32, float> per_class_iou = 1;
  int per_class_iou_size() const;
  void clear_per_class_iou();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      per_class_iou() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      mutable_per_class_iou();

  // optional float miou = 2;
  bool has_miou() const;
  void clear_miou();
  float miou() const;
  void set_miou(float value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.SegmentationMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SegmentationMetrics_PerClassIouEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > per_class_iou_;
  float miou_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SegmentationFrame

// repeated .waymo.open_dataset.Laser segmentation_labels = 1;
inline int SegmentationFrame::segmentation_labels_size() const {
  return segmentation_labels_.size();
}
inline ::waymo::open_dataset::Laser* SegmentationFrame::mutable_segmentation_labels(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.SegmentationFrame.segmentation_labels)
  return segmentation_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >*
SegmentationFrame::mutable_segmentation_labels() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.SegmentationFrame.segmentation_labels)
  return &segmentation_labels_;
}
inline const ::waymo::open_dataset::Laser& SegmentationFrame::segmentation_labels(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SegmentationFrame.segmentation_labels)
  return segmentation_labels_.Get(index);
}
inline ::waymo::open_dataset::Laser* SegmentationFrame::add_segmentation_labels() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.SegmentationFrame.segmentation_labels)
  return segmentation_labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Laser >&
SegmentationFrame::segmentation_labels() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.SegmentationFrame.segmentation_labels)
  return segmentation_labels_;
}

// optional string context_name = 2;
inline bool SegmentationFrame::has_context_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationFrame::clear_context_name() {
  context_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SegmentationFrame::context_name() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SegmentationFrame.context_name)
  return context_name_.GetNoArena();
}
inline void SegmentationFrame::set_context_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SegmentationFrame.context_name)
}
inline void SegmentationFrame::set_context_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.SegmentationFrame.context_name)
}
inline void SegmentationFrame::set_context_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.SegmentationFrame.context_name)
}
inline void SegmentationFrame::set_context_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  context_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.SegmentationFrame.context_name)
}
inline std::string* SegmentationFrame::mutable_context_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.SegmentationFrame.context_name)
  return context_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SegmentationFrame::release_context_name() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.SegmentationFrame.context_name)
  if (!has_context_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return context_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SegmentationFrame::set_allocated_context_name(std::string* context_name) {
  if (context_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  context_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context_name);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.SegmentationFrame.context_name)
}

// optional int64 frame_timestamp_micros = 3;
inline bool SegmentationFrame::has_frame_timestamp_micros() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentationFrame::clear_frame_timestamp_micros() {
  frame_timestamp_micros_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SegmentationFrame::frame_timestamp_micros() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SegmentationFrame.frame_timestamp_micros)
  return frame_timestamp_micros_;
}
inline void SegmentationFrame::set_frame_timestamp_micros(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  frame_timestamp_micros_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SegmentationFrame.frame_timestamp_micros)
}

// -------------------------------------------------------------------

// SegmentationFrameList

// repeated .waymo.open_dataset.SegmentationFrame frames = 1;
inline int SegmentationFrameList::frames_size() const {
  return frames_.size();
}
inline void SegmentationFrameList::clear_frames() {
  frames_.Clear();
}
inline ::waymo::open_dataset::SegmentationFrame* SegmentationFrameList::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.SegmentationFrameList.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SegmentationFrame >*
SegmentationFrameList::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.SegmentationFrameList.frames)
  return &frames_;
}
inline const ::waymo::open_dataset::SegmentationFrame& SegmentationFrameList::frames(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SegmentationFrameList.frames)
  return frames_.Get(index);
}
inline ::waymo::open_dataset::SegmentationFrame* SegmentationFrameList::add_frames() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.SegmentationFrameList.frames)
  return frames_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::SegmentationFrame >&
SegmentationFrameList::frames() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.SegmentationFrameList.frames)
  return frames_;
}

// -------------------------------------------------------------------

// SegmentationMetricsConfig

// repeated .waymo.open_dataset.Segmentation.Type segmentation_types = 1 [packed = true];
inline int SegmentationMetricsConfig::segmentation_types_size() const {
  return segmentation_types_.size();
}
inline void SegmentationMetricsConfig::clear_segmentation_types() {
  segmentation_types_.Clear();
}
inline ::waymo::open_dataset::Segmentation_Type SegmentationMetricsConfig::segmentation_types(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SegmentationMetricsConfig.segmentation_types)
  return static_cast< ::waymo::open_dataset::Segmentation_Type >(segmentation_types_.Get(index));
}
inline void SegmentationMetricsConfig::set_segmentation_types(int index, ::waymo::open_dataset::Segmentation_Type value) {
  assert(::waymo::open_dataset::Segmentation_Type_IsValid(value));
  segmentation_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SegmentationMetricsConfig.segmentation_types)
}
inline void SegmentationMetricsConfig::add_segmentation_types(::waymo::open_dataset::Segmentation_Type value) {
  assert(::waymo::open_dataset::Segmentation_Type_IsValid(value));
  segmentation_types_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.SegmentationMetricsConfig.segmentation_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SegmentationMetricsConfig::segmentation_types() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.SegmentationMetricsConfig.segmentation_types)
  return segmentation_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SegmentationMetricsConfig::mutable_segmentation_types() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.SegmentationMetricsConfig.segmentation_types)
  return &segmentation_types_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SegmentationMetrics

// map<int32, float> per_class_iou = 1;
inline int SegmentationMetrics::per_class_iou_size() const {
  return per_class_iou_.size();
}
inline void SegmentationMetrics::clear_per_class_iou() {
  per_class_iou_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
SegmentationMetrics::per_class_iou() const {
  // @@protoc_insertion_point(field_map:waymo.open_dataset.SegmentationMetrics.per_class_iou)
  return per_class_iou_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
SegmentationMetrics::mutable_per_class_iou() {
  // @@protoc_insertion_point(field_mutable_map:waymo.open_dataset.SegmentationMetrics.per_class_iou)
  return per_class_iou_.MutableMap();
}

// optional float miou = 2;
inline bool SegmentationMetrics::has_miou() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationMetrics::clear_miou() {
  miou_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SegmentationMetrics::miou() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.SegmentationMetrics.miou)
  return miou_;
}
inline void SegmentationMetrics::set_miou(float value) {
  _has_bits_[0] |= 0x00000001u;
  miou_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.SegmentationMetrics.miou)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fsegmentation_5fmetrics_2eproto
