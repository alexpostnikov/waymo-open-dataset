// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/motion_submission.proto

#include "waymo_open_dataset/protos/motion_submission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto;
namespace waymo {
namespace open_dataset {
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class ScoredTrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoredTrajectory> _instance;
} _ScoredTrajectory_default_instance_;
class SingleObjectPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SingleObjectPrediction> _instance;
} _SingleObjectPrediction_default_instance_;
class PredictionSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictionSet> _instance;
} _PredictionSet_default_instance_;
class ObjectTrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectTrajectory> _instance;
} _ObjectTrajectory_default_instance_;
class ScoredJointTrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScoredJointTrajectory> _instance;
} _ScoredJointTrajectory_default_instance_;
class JointPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointPrediction> _instance;
} _JointPrediction_default_instance_;
class ChallengeScenarioPredictionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChallengeScenarioPredictions> _instance;
  const ::waymo::open_dataset::PredictionSet* single_predictions_;
  const ::waymo::open_dataset::JointPrediction* joint_prediction_;
} _ChallengeScenarioPredictions_default_instance_;
class MotionChallengeSubmissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionChallengeSubmission> _instance;
} _MotionChallengeSubmission_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_ChallengeScenarioPredictions_default_instance_;
    new (ptr) ::waymo::open_dataset::ChallengeScenarioPredictions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::ChallengeScenarioPredictions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
      &scc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_JointPrediction_default_instance_;
    new (ptr) ::waymo::open_dataset::JointPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::JointPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_MotionChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MotionChallengeSubmission_default_instance_;
    new (ptr) ::waymo::open_dataset::MotionChallengeSubmission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MotionChallengeSubmission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MotionChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MotionChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_ObjectTrajectory_default_instance_;
    new (ptr) ::waymo::open_dataset::ObjectTrajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::ObjectTrajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_PredictionSet_default_instance_;
    new (ptr) ::waymo::open_dataset::PredictionSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::PredictionSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_ScoredJointTrajectory_default_instance_;
    new (ptr) ::waymo::open_dataset::ScoredJointTrajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::ScoredJointTrajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_ScoredTrajectory_default_instance_;
    new (ptr) ::waymo::open_dataset::ScoredTrajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::ScoredTrajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SingleObjectPrediction_default_instance_;
    new (ptr) ::waymo::open_dataset::SingleObjectPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::SingleObjectPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {
      &scc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,}};

static void InitDefaultsscc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Trajectory_default_instance_;
    new (ptr) ::waymo::open_dataset::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Trajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Trajectory, center_x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Trajectory, center_y_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredTrajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredTrajectory, trajectory_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredTrajectory, confidence_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleObjectPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleObjectPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleObjectPrediction, object_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SingleObjectPrediction, trajectories_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::PredictionSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::PredictionSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::PredictionSet, predictions_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ObjectTrajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ObjectTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ObjectTrajectory, object_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ObjectTrajectory, trajectory_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredJointTrajectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredJointTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredJointTrajectory, trajectories_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ScoredJointTrajectory, confidence_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::JointPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::JointPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::JointPrediction, joint_trajectories_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ChallengeScenarioPredictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ChallengeScenarioPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ChallengeScenarioPredictions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ChallengeScenarioPredictions, scenario_id_),
  offsetof(::waymo::open_dataset::ChallengeScenarioPredictionsDefaultTypeInternal, single_predictions_),
  offsetof(::waymo::open_dataset::ChallengeScenarioPredictionsDefaultTypeInternal, joint_prediction_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::ChallengeScenarioPredictions, prediction_set_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, account_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, unique_method_name_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, authors_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, affiliation_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, description_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, method_link_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, submission_type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MotionChallengeSubmission, scenario_predictions_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  5,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::waymo::open_dataset::Trajectory)},
  { 9, 16, sizeof(::waymo::open_dataset::ScoredTrajectory)},
  { 18, 25, sizeof(::waymo::open_dataset::SingleObjectPrediction)},
  { 27, 33, sizeof(::waymo::open_dataset::PredictionSet)},
  { 34, 41, sizeof(::waymo::open_dataset::ObjectTrajectory)},
  { 43, 50, sizeof(::waymo::open_dataset::ScoredJointTrajectory)},
  { 52, 58, sizeof(::waymo::open_dataset::JointPrediction)},
  { 59, 68, sizeof(::waymo::open_dataset::ChallengeScenarioPredictions)},
  { 71, 84, sizeof(::waymo::open_dataset::MotionChallengeSubmission)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_ScoredTrajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SingleObjectPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_PredictionSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_ObjectTrajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_ScoredJointTrajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_JointPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_ChallengeScenarioPredictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MotionChallengeSubmission_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1waymo_open_dataset/protos/motion_submi"
  "ssion.proto\022\022waymo.open_dataset\"8\n\nTraje"
  "ctory\022\024\n\010center_x\030\002 \003(\002B\002\020\001\022\024\n\010center_y\030"
  "\003 \003(\002B\002\020\001\"Z\n\020ScoredTrajectory\0222\n\ntraject"
  "ory\030\001 \001(\0132\036.waymo.open_dataset.Trajector"
  "y\022\022\n\nconfidence\030\002 \001(\002\"g\n\026SingleObjectPre"
  "diction\022\021\n\tobject_id\030\001 \001(\005\022:\n\014trajectori"
  "es\030\002 \003(\0132$.waymo.open_dataset.ScoredTraj"
  "ectory\"P\n\rPredictionSet\022\?\n\013predictions\030\001"
  " \003(\0132*.waymo.open_dataset.SingleObjectPr"
  "ediction\"Y\n\020ObjectTrajectory\022\021\n\tobject_i"
  "d\030\001 \001(\005\0222\n\ntrajectory\030\002 \001(\0132\036.waymo.open"
  "_dataset.Trajectory\"g\n\025ScoredJointTrajec"
  "tory\022:\n\014trajectories\030\002 \003(\0132$.waymo.open_"
  "dataset.ObjectTrajectory\022\022\n\nconfidence\030\003"
  " \001(\002\"X\n\017JointPrediction\022E\n\022joint_traject"
  "ories\030\001 \003(\0132).waymo.open_dataset.ScoredJ"
  "ointTrajectory\"\307\001\n\034ChallengeScenarioPred"
  "ictions\022\023\n\013scenario_id\030\001 \001(\t\022\?\n\022single_p"
  "redictions\030\002 \001(\0132!.waymo.open_dataset.Pr"
  "edictionSetH\000\022\?\n\020joint_prediction\030\003 \001(\0132"
  "#.waymo.open_dataset.JointPredictionH\000B\020"
  "\n\016prediction_set\"\226\003\n\031MotionChallengeSubm"
  "ission\022\024\n\014account_name\030\003 \001(\t\022\032\n\022unique_m"
  "ethod_name\030\004 \001(\t\022\017\n\007authors\030\005 \003(\t\022\023\n\013aff"
  "iliation\030\006 \001(\t\022\023\n\013description\030\007 \001(\t\022\023\n\013m"
  "ethod_link\030\010 \001(\t\022U\n\017submission_type\030\002 \001("
  "\0162<.waymo.open_dataset.MotionChallengeSu"
  "bmission.SubmissionType\022N\n\024scenario_pred"
  "ictions\030\001 \003(\01320.waymo.open_dataset.Chall"
  "engeScenarioPredictions\"P\n\016SubmissionTyp"
  "e\022\013\n\007UNKNOWN\020\000\022\025\n\021MOTION_PREDICTION\020\001\022\032\n"
  "\026INTERACTION_PREDICTION\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_sccs[9] = {
  &scc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_MotionChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
  &scc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto, "waymo_open_dataset/protos/motion_submission.proto", 1305,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto, 9, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto), true);
namespace waymo {
namespace open_dataset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionChallengeSubmission_SubmissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto[0];
}
bool MotionChallengeSubmission_SubmissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionChallengeSubmission_SubmissionType MotionChallengeSubmission::UNKNOWN;
constexpr MotionChallengeSubmission_SubmissionType MotionChallengeSubmission::MOTION_PREDICTION;
constexpr MotionChallengeSubmission_SubmissionType MotionChallengeSubmission::INTERACTION_PREDICTION;
constexpr MotionChallengeSubmission_SubmissionType MotionChallengeSubmission::SubmissionType_MIN;
constexpr MotionChallengeSubmission_SubmissionType MotionChallengeSubmission::SubmissionType_MAX;
constexpr int MotionChallengeSubmission::SubmissionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
class Trajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<Trajectory>()._has_bits_);
};

Trajectory::Trajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      center_x_(from.center_x_),
      center_y_(from.center_y_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Trajectory)
}

void Trajectory::SharedCtor() {
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_x_.Clear();
  center_y_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float center_x = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_center_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_center_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float center_y = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_center_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_center_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trajectory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Trajectory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float center_x = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_center_x())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_center_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float center_y = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_center_y())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_center_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Trajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trajectory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float center_x = 2 [packed = true];
  if (this->center_x_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_center_x_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->center_x().data(), this->center_x_size(), output);
  }

  // repeated float center_y = 3 [packed = true];
  if (this->center_y_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_center_y_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->center_y().data(), this->center_y_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Trajectory)
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float center_x = 2 [packed = true];
  if (this->center_x_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _center_x_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->center_x_, target);
  }

  // repeated float center_y = 3 [packed = true];
  if (this->center_y_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _center_y_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->center_y_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float center_x = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->center_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _center_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float center_y = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->center_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _center_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_x_.MergeFrom(from.center_x_);
  center_y_.MergeFrom(from.center_y_);
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  center_x_.InternalSwap(&other->center_x_);
  center_y_.InternalSwap(&other->center_y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScoredTrajectory::InitAsDefaultInstance() {
  ::waymo::open_dataset::_ScoredTrajectory_default_instance_._instance.get_mutable()->trajectory_ = const_cast< ::waymo::open_dataset::Trajectory*>(
      ::waymo::open_dataset::Trajectory::internal_default_instance());
}
class ScoredTrajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoredTrajectory>()._has_bits_);
  static const ::waymo::open_dataset::Trajectory& trajectory(const ScoredTrajectory* msg);
  static void set_has_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::waymo::open_dataset::Trajectory&
ScoredTrajectory::_Internal::trajectory(const ScoredTrajectory* msg) {
  return *msg->trajectory_;
}
ScoredTrajectory::ScoredTrajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.ScoredTrajectory)
}
ScoredTrajectory::ScoredTrajectory(const ScoredTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory()) {
    trajectory_ = new ::waymo::open_dataset::Trajectory(*from.trajectory_);
  } else {
    trajectory_ = nullptr;
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.ScoredTrajectory)
}

void ScoredTrajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  ::memset(&trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&trajectory_)) + sizeof(confidence_));
}

ScoredTrajectory::~ScoredTrajectory() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.ScoredTrajectory)
  SharedDtor();
}

void ScoredTrajectory::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_;
}

void ScoredTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoredTrajectory& ScoredTrajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoredTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void ScoredTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.ScoredTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(trajectory_ != nullptr);
    trajectory_->Clear();
  }
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScoredTrajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.Trajectory trajectory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScoredTrajectory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.ScoredTrajectory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.Trajectory trajectory = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_confidence(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.ScoredTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.ScoredTrajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScoredTrajectory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.ScoredTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Trajectory trajectory = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::trajectory(this), output);
  }

  // optional float confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.ScoredTrajectory)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScoredTrajectory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.ScoredTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.Trajectory trajectory = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::trajectory(this), target);
  }

  // optional float confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.ScoredTrajectory)
  return target;
}

size_t ScoredTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.ScoredTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .waymo.open_dataset.Trajectory trajectory = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_);
    }

    // optional float confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoredTrajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.ScoredTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoredTrajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScoredTrajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.ScoredTrajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.ScoredTrajectory)
    MergeFrom(*source);
  }
}

void ScoredTrajectory::MergeFrom(const ScoredTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.ScoredTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectory()->::waymo::open_dataset::Trajectory::MergeFrom(from.trajectory());
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScoredTrajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.ScoredTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoredTrajectory::CopyFrom(const ScoredTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.ScoredTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoredTrajectory::IsInitialized() const {
  return true;
}

void ScoredTrajectory::InternalSwap(ScoredTrajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(trajectory_, other->trajectory_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoredTrajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SingleObjectPrediction::InitAsDefaultInstance() {
}
class SingleObjectPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleObjectPrediction>()._has_bits_);
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SingleObjectPrediction::SingleObjectPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.SingleObjectPrediction)
}
SingleObjectPrediction::SingleObjectPrediction(const SingleObjectPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectories_(from.trajectories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.SingleObjectPrediction)
}

void SingleObjectPrediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  object_id_ = 0;
}

SingleObjectPrediction::~SingleObjectPrediction() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.SingleObjectPrediction)
  SharedDtor();
}

void SingleObjectPrediction::SharedDtor() {
}

void SingleObjectPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SingleObjectPrediction& SingleObjectPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SingleObjectPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void SingleObjectPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.SingleObjectPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_.Clear();
  object_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SingleObjectPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.ScoredTrajectory trajectories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SingleObjectPrediction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.SingleObjectPrediction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 object_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_object_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.ScoredTrajectory trajectories = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trajectories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.SingleObjectPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.SingleObjectPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SingleObjectPrediction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.SingleObjectPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->object_id(), output);
  }

  // repeated .waymo.open_dataset.ScoredTrajectory trajectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectories(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.SingleObjectPrediction)
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleObjectPrediction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.SingleObjectPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->object_id(), target);
  }

  // repeated .waymo.open_dataset.ScoredTrajectory trajectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectories(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.SingleObjectPrediction)
  return target;
}

size_t SingleObjectPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.SingleObjectPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ScoredTrajectory trajectories = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trajectories(static_cast<int>(i)));
    }
  }

  // optional int32 object_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->object_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleObjectPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.SingleObjectPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleObjectPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleObjectPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.SingleObjectPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.SingleObjectPrediction)
    MergeFrom(*source);
  }
}

void SingleObjectPrediction::MergeFrom(const SingleObjectPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.SingleObjectPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_.MergeFrom(from.trajectories_);
  if (from.has_object_id()) {
    set_object_id(from.object_id());
  }
}

void SingleObjectPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.SingleObjectPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleObjectPrediction::CopyFrom(const SingleObjectPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.SingleObjectPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleObjectPrediction::IsInitialized() const {
  return true;
}

void SingleObjectPrediction::InternalSwap(SingleObjectPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectories_)->InternalSwap(CastToBase(&other->trajectories_));
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleObjectPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictionSet::InitAsDefaultInstance() {
}
class PredictionSet::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionSet>()._has_bits_);
};

PredictionSet::PredictionSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.PredictionSet)
}
PredictionSet::PredictionSet(const PredictionSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.PredictionSet)
}

void PredictionSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
}

PredictionSet::~PredictionSet() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.PredictionSet)
  SharedDtor();
}

void PredictionSet::SharedDtor() {
}

void PredictionSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictionSet& PredictionSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictionSet_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void PredictionSet::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.PredictionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictionSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.SingleObjectPrediction predictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictionSet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.PredictionSet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.SingleObjectPrediction predictions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.PredictionSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.PredictionSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictionSet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.PredictionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SingleObjectPrediction predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->predictions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.PredictionSet)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictionSet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.PredictionSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SingleObjectPrediction predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predictions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->predictions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.PredictionSet)
  return target;
}

size_t PredictionSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.PredictionSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.SingleObjectPrediction predictions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->predictions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.PredictionSet)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictionSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.PredictionSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.PredictionSet)
    MergeFrom(*source);
  }
}

void PredictionSet::MergeFrom(const PredictionSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.PredictionSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
}

void PredictionSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.PredictionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionSet::CopyFrom(const PredictionSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.PredictionSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionSet::IsInitialized() const {
  return true;
}

void PredictionSet::InternalSwap(PredictionSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&predictions_)->InternalSwap(CastToBase(&other->predictions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectTrajectory::InitAsDefaultInstance() {
  ::waymo::open_dataset::_ObjectTrajectory_default_instance_._instance.get_mutable()->trajectory_ = const_cast< ::waymo::open_dataset::Trajectory*>(
      ::waymo::open_dataset::Trajectory::internal_default_instance());
}
class ObjectTrajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectTrajectory>()._has_bits_);
  static void set_has_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::waymo::open_dataset::Trajectory& trajectory(const ObjectTrajectory* msg);
  static void set_has_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::waymo::open_dataset::Trajectory&
ObjectTrajectory::_Internal::trajectory(const ObjectTrajectory* msg) {
  return *msg->trajectory_;
}
ObjectTrajectory::ObjectTrajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.ObjectTrajectory)
}
ObjectTrajectory::ObjectTrajectory(const ObjectTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory()) {
    trajectory_ = new ::waymo::open_dataset::Trajectory(*from.trajectory_);
  } else {
    trajectory_ = nullptr;
  }
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.ObjectTrajectory)
}

void ObjectTrajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  ::memset(&trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_id_) -
      reinterpret_cast<char*>(&trajectory_)) + sizeof(object_id_));
}

ObjectTrajectory::~ObjectTrajectory() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.ObjectTrajectory)
  SharedDtor();
}

void ObjectTrajectory::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_;
}

void ObjectTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectTrajectory& ObjectTrajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void ObjectTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.ObjectTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(trajectory_ != nullptr);
    trajectory_->Clear();
  }
  object_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectTrajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_object_id(&has_bits);
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Trajectory trajectory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectTrajectory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.ObjectTrajectory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 object_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_object_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Trajectory trajectory = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.ObjectTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.ObjectTrajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectTrajectory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.ObjectTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->object_id(), output);
  }

  // optional .waymo.open_dataset.Trajectory trajectory = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::trajectory(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.ObjectTrajectory)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectTrajectory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.ObjectTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 object_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->object_id(), target);
  }

  // optional .waymo.open_dataset.Trajectory trajectory = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::trajectory(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.ObjectTrajectory)
  return target;
}

size_t ObjectTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.ObjectTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .waymo.open_dataset.Trajectory trajectory = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trajectory_);
    }

    // optional int32 object_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->object_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectTrajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.ObjectTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectTrajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectTrajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.ObjectTrajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.ObjectTrajectory)
    MergeFrom(*source);
  }
}

void ObjectTrajectory::MergeFrom(const ObjectTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.ObjectTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectory()->::waymo::open_dataset::Trajectory::MergeFrom(from.trajectory());
    }
    if (cached_has_bits & 0x00000002u) {
      object_id_ = from.object_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectTrajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.ObjectTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectTrajectory::CopyFrom(const ObjectTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.ObjectTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectTrajectory::IsInitialized() const {
  return true;
}

void ObjectTrajectory::InternalSwap(ObjectTrajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(trajectory_, other->trajectory_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectTrajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScoredJointTrajectory::InitAsDefaultInstance() {
}
class ScoredJointTrajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoredJointTrajectory>()._has_bits_);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScoredJointTrajectory::ScoredJointTrajectory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.ScoredJointTrajectory)
}
ScoredJointTrajectory::ScoredJointTrajectory(const ScoredJointTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      trajectories_(from.trajectories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.ScoredJointTrajectory)
}

void ScoredJointTrajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  confidence_ = 0;
}

ScoredJointTrajectory::~ScoredJointTrajectory() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.ScoredJointTrajectory)
  SharedDtor();
}

void ScoredJointTrajectory::SharedDtor() {
}

void ScoredJointTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScoredJointTrajectory& ScoredJointTrajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScoredJointTrajectory_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void ScoredJointTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.ScoredJointTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_.Clear();
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScoredJointTrajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.ObjectTrajectory trajectories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScoredJointTrajectory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.ScoredJointTrajectory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.ObjectTrajectory trajectories = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trajectories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_confidence(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.ScoredJointTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.ScoredJointTrajectory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScoredJointTrajectory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.ScoredJointTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ObjectTrajectory trajectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectories(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float confidence = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.ScoredJointTrajectory)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScoredJointTrajectory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.ScoredJointTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ObjectTrajectory trajectories = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectories_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectories(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float confidence = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.ScoredJointTrajectory)
  return target;
}

size_t ScoredJointTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.ScoredJointTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ObjectTrajectory trajectories = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trajectories(static_cast<int>(i)));
    }
  }

  // optional float confidence = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScoredJointTrajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.ScoredJointTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ScoredJointTrajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScoredJointTrajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.ScoredJointTrajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.ScoredJointTrajectory)
    MergeFrom(*source);
  }
}

void ScoredJointTrajectory::MergeFrom(const ScoredJointTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.ScoredJointTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_.MergeFrom(from.trajectories_);
  if (from.has_confidence()) {
    set_confidence(from.confidence());
  }
}

void ScoredJointTrajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.ScoredJointTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoredJointTrajectory::CopyFrom(const ScoredJointTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.ScoredJointTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoredJointTrajectory::IsInitialized() const {
  return true;
}

void ScoredJointTrajectory::InternalSwap(ScoredJointTrajectory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&trajectories_)->InternalSwap(CastToBase(&other->trajectories_));
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoredJointTrajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointPrediction::InitAsDefaultInstance() {
}
class JointPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<JointPrediction>()._has_bits_);
};

JointPrediction::JointPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.JointPrediction)
}
JointPrediction::JointPrediction(const JointPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      joint_trajectories_(from.joint_trajectories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.JointPrediction)
}

void JointPrediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
}

JointPrediction::~JointPrediction() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.JointPrediction)
  SharedDtor();
}

void JointPrediction::SharedDtor() {
}

void JointPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointPrediction& JointPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointPrediction_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void JointPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.JointPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_trajectories_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JointPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.ScoredJointTrajectory joint_trajectories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_joint_trajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JointPrediction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.JointPrediction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.ScoredJointTrajectory joint_trajectories = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_joint_trajectories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.JointPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.JointPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JointPrediction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.JointPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ScoredJointTrajectory joint_trajectories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_trajectories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->joint_trajectories(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.JointPrediction)
}

::PROTOBUF_NAMESPACE_ID::uint8* JointPrediction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.JointPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ScoredJointTrajectory joint_trajectories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joint_trajectories_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->joint_trajectories(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.JointPrediction)
  return target;
}

size_t JointPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.JointPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ScoredJointTrajectory joint_trajectories = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_trajectories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->joint_trajectories(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.JointPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const JointPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.JointPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.JointPrediction)
    MergeFrom(*source);
  }
}

void JointPrediction::MergeFrom(const JointPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.JointPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_trajectories_.MergeFrom(from.joint_trajectories_);
}

void JointPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.JointPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointPrediction::CopyFrom(const JointPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.JointPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointPrediction::IsInitialized() const {
  return true;
}

void JointPrediction::InternalSwap(JointPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&joint_trajectories_)->InternalSwap(CastToBase(&other->joint_trajectories_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChallengeScenarioPredictions::InitAsDefaultInstance() {
  ::waymo::open_dataset::_ChallengeScenarioPredictions_default_instance_.single_predictions_ = const_cast< ::waymo::open_dataset::PredictionSet*>(
      ::waymo::open_dataset::PredictionSet::internal_default_instance());
  ::waymo::open_dataset::_ChallengeScenarioPredictions_default_instance_.joint_prediction_ = const_cast< ::waymo::open_dataset::JointPrediction*>(
      ::waymo::open_dataset::JointPrediction::internal_default_instance());
}
class ChallengeScenarioPredictions::_Internal {
 public:
  using HasBits = decltype(std::declval<ChallengeScenarioPredictions>()._has_bits_);
  static void set_has_scenario_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::waymo::open_dataset::PredictionSet& single_predictions(const ChallengeScenarioPredictions* msg);
  static const ::waymo::open_dataset::JointPrediction& joint_prediction(const ChallengeScenarioPredictions* msg);
};

const ::waymo::open_dataset::PredictionSet&
ChallengeScenarioPredictions::_Internal::single_predictions(const ChallengeScenarioPredictions* msg) {
  return *msg->prediction_set_.single_predictions_;
}
const ::waymo::open_dataset::JointPrediction&
ChallengeScenarioPredictions::_Internal::joint_prediction(const ChallengeScenarioPredictions* msg) {
  return *msg->prediction_set_.joint_prediction_;
}
void ChallengeScenarioPredictions::set_allocated_single_predictions(::waymo::open_dataset::PredictionSet* single_predictions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_prediction_set();
  if (single_predictions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      single_predictions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_predictions, submessage_arena);
    }
    set_has_single_predictions();
    prediction_set_.single_predictions_ = single_predictions;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.ChallengeScenarioPredictions.single_predictions)
}
void ChallengeScenarioPredictions::set_allocated_joint_prediction(::waymo::open_dataset::JointPrediction* joint_prediction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_prediction_set();
  if (joint_prediction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      joint_prediction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joint_prediction, submessage_arena);
    }
    set_has_joint_prediction();
    prediction_set_.joint_prediction_ = joint_prediction;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.ChallengeScenarioPredictions.joint_prediction)
}
ChallengeScenarioPredictions::ChallengeScenarioPredictions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.ChallengeScenarioPredictions)
}
ChallengeScenarioPredictions::ChallengeScenarioPredictions(const ChallengeScenarioPredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenario_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scenario_id()) {
    scenario_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenario_id_);
  }
  clear_has_prediction_set();
  switch (from.prediction_set_case()) {
    case kSinglePredictions: {
      mutable_single_predictions()->::waymo::open_dataset::PredictionSet::MergeFrom(from.single_predictions());
      break;
    }
    case kJointPrediction: {
      mutable_joint_prediction()->::waymo::open_dataset::JointPrediction::MergeFrom(from.joint_prediction());
      break;
    }
    case PREDICTION_SET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.ChallengeScenarioPredictions)
}

void ChallengeScenarioPredictions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  scenario_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_prediction_set();
}

ChallengeScenarioPredictions::~ChallengeScenarioPredictions() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.ChallengeScenarioPredictions)
  SharedDtor();
}

void ChallengeScenarioPredictions::SharedDtor() {
  scenario_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_prediction_set()) {
    clear_prediction_set();
  }
}

void ChallengeScenarioPredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChallengeScenarioPredictions& ChallengeScenarioPredictions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChallengeScenarioPredictions_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void ChallengeScenarioPredictions::clear_prediction_set() {
// @@protoc_insertion_point(one_of_clear_start:waymo.open_dataset.ChallengeScenarioPredictions)
  switch (prediction_set_case()) {
    case kSinglePredictions: {
      delete prediction_set_.single_predictions_;
      break;
    }
    case kJointPrediction: {
      delete prediction_set_.joint_prediction_;
      break;
    }
    case PREDICTION_SET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREDICTION_SET_NOT_SET;
}


void ChallengeScenarioPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.ChallengeScenarioPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    scenario_id_.ClearNonDefaultToEmptyNoArena();
  }
  clear_prediction_set();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChallengeScenarioPredictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scenario_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_scenario_id(), ptr, ctx, "waymo.open_dataset.ChallengeScenarioPredictions.scenario_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.PredictionSet single_predictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_single_predictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.JointPrediction joint_prediction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_joint_prediction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChallengeScenarioPredictions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.ChallengeScenarioPredictions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scenario_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scenario_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.ChallengeScenarioPredictions.scenario_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.PredictionSet single_predictions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_single_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.JointPrediction joint_prediction = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_joint_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.ChallengeScenarioPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.ChallengeScenarioPredictions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChallengeScenarioPredictions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.ChallengeScenarioPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.ChallengeScenarioPredictions.scenario_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scenario_id(), output);
  }

  switch (prediction_set_case()) {
    case kSinglePredictions:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::single_predictions(this), output);
      break;
    case kJointPrediction:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::joint_prediction(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.ChallengeScenarioPredictions)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChallengeScenarioPredictions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.ChallengeScenarioPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scenario_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario_id().data(), static_cast<int>(this->scenario_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.ChallengeScenarioPredictions.scenario_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->scenario_id(), target);
  }

  switch (prediction_set_case()) {
    case kSinglePredictions:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::single_predictions(this), target);
      break;
    case kJointPrediction:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::joint_prediction(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.ChallengeScenarioPredictions)
  return target;
}

size_t ChallengeScenarioPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.ChallengeScenarioPredictions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string scenario_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scenario_id());
  }

  switch (prediction_set_case()) {
    // optional .waymo.open_dataset.PredictionSet single_predictions = 2;
    case kSinglePredictions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_set_.single_predictions_);
      break;
    }
    // optional .waymo.open_dataset.JointPrediction joint_prediction = 3;
    case kJointPrediction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_set_.joint_prediction_);
      break;
    }
    case PREDICTION_SET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChallengeScenarioPredictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.ChallengeScenarioPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeScenarioPredictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChallengeScenarioPredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.ChallengeScenarioPredictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.ChallengeScenarioPredictions)
    MergeFrom(*source);
  }
}

void ChallengeScenarioPredictions::MergeFrom(const ChallengeScenarioPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.ChallengeScenarioPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scenario_id()) {
    _has_bits_[0] |= 0x00000001u;
    scenario_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenario_id_);
  }
  switch (from.prediction_set_case()) {
    case kSinglePredictions: {
      mutable_single_predictions()->::waymo::open_dataset::PredictionSet::MergeFrom(from.single_predictions());
      break;
    }
    case kJointPrediction: {
      mutable_joint_prediction()->::waymo::open_dataset::JointPrediction::MergeFrom(from.joint_prediction());
      break;
    }
    case PREDICTION_SET_NOT_SET: {
      break;
    }
  }
}

void ChallengeScenarioPredictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.ChallengeScenarioPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeScenarioPredictions::CopyFrom(const ChallengeScenarioPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.ChallengeScenarioPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeScenarioPredictions::IsInitialized() const {
  return true;
}

void ChallengeScenarioPredictions::InternalSwap(ChallengeScenarioPredictions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scenario_id_.Swap(&other->scenario_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prediction_set_, other->prediction_set_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChallengeScenarioPredictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotionChallengeSubmission::InitAsDefaultInstance() {
}
class MotionChallengeSubmission::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionChallengeSubmission>()._has_bits_);
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unique_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_affiliation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_method_link(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_submission_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MotionChallengeSubmission::MotionChallengeSubmission()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MotionChallengeSubmission)
}
MotionChallengeSubmission::MotionChallengeSubmission(const MotionChallengeSubmission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scenario_predictions_(from.scenario_predictions_),
      authors_(from.authors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_account_name()) {
    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  unique_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_unique_method_name()) {
    unique_method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_method_name_);
  }
  affiliation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_affiliation()) {
    affiliation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  method_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_link()) {
    method_link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_link_);
  }
  submission_type_ = from.submission_type_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MotionChallengeSubmission)
}

void MotionChallengeSubmission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotionChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  submission_type_ = 0;
}

MotionChallengeSubmission::~MotionChallengeSubmission() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MotionChallengeSubmission)
  SharedDtor();
}

void MotionChallengeSubmission::SharedDtor() {
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  affiliation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MotionChallengeSubmission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionChallengeSubmission& MotionChallengeSubmission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionChallengeSubmission_waymo_5fopen_5fdataset_2fprotos_2fmotion_5fsubmission_2eproto.base);
  return *internal_default_instance();
}


void MotionChallengeSubmission::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MotionChallengeSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scenario_predictions_.Clear();
  authors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      unique_method_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      affiliation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      method_link_.ClearNonDefaultToEmptyNoArena();
    }
  }
  submission_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotionChallengeSubmission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.ChallengeScenarioPredictions scenario_predictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_scenario_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.MotionChallengeSubmission.SubmissionType submission_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::MotionChallengeSubmission_SubmissionType_IsValid(val))) {
            set_submission_type(static_cast<::waymo::open_dataset::MotionChallengeSubmission_SubmissionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string account_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_account_name(), ptr, ctx, "waymo.open_dataset.MotionChallengeSubmission.account_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unique_method_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_unique_method_name(), ptr, ctx, "waymo.open_dataset.MotionChallengeSubmission.unique_method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string authors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_authors(), ptr, ctx, "waymo.open_dataset.MotionChallengeSubmission.authors");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional string affiliation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_affiliation(), ptr, ctx, "waymo.open_dataset.MotionChallengeSubmission.affiliation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_description(), ptr, ctx, "waymo.open_dataset.MotionChallengeSubmission.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string method_link = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_method_link(), ptr, ctx, "waymo.open_dataset.MotionChallengeSubmission.method_link");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotionChallengeSubmission::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MotionChallengeSubmission)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.ChallengeScenarioPredictions scenario_predictions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_scenario_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.MotionChallengeSubmission.SubmissionType submission_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::MotionChallengeSubmission_SubmissionType_IsValid(value)) {
            set_submission_type(static_cast< ::waymo::open_dataset::MotionChallengeSubmission_SubmissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string account_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.MotionChallengeSubmission.account_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unique_method_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_method_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.MotionChallengeSubmission.unique_method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string authors = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_authors()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authors(this->authors_size() - 1).data(),
            static_cast<int>(this->authors(this->authors_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.MotionChallengeSubmission.authors");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string affiliation = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_affiliation()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->affiliation().data(), static_cast<int>(this->affiliation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.MotionChallengeSubmission.affiliation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.MotionChallengeSubmission.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string method_link = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_method_link()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_link().data(), static_cast<int>(this->method_link().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "waymo.open_dataset.MotionChallengeSubmission.method_link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MotionChallengeSubmission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MotionChallengeSubmission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotionChallengeSubmission::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MotionChallengeSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ChallengeScenarioPredictions scenario_predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenario_predictions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->scenario_predictions(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.MotionChallengeSubmission.SubmissionType submission_type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->submission_type(), output);
  }

  // optional string account_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.account_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account_name(), output);
  }

  // optional string unique_method_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.unique_method_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->unique_method_name(), output);
  }

  // repeated string authors = 5;
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authors(i).data(), static_cast<int>(this->authors(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.authors");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->authors(i), output);
  }

  // optional string affiliation = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.affiliation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->affiliation(), output);
  }

  // optional string description = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // optional string method_link = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_link().data(), static_cast<int>(this->method_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.method_link");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->method_link(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MotionChallengeSubmission)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionChallengeSubmission::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MotionChallengeSubmission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ChallengeScenarioPredictions scenario_predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenario_predictions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->scenario_predictions(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.MotionChallengeSubmission.SubmissionType submission_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->submission_type(), target);
  }

  // optional string account_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.account_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->account_name(), target);
  }

  // optional string unique_method_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unique_method_name().data(), static_cast<int>(this->unique_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.unique_method_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->unique_method_name(), target);
  }

  // repeated string authors = 5;
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authors(i).data(), static_cast<int>(this->authors(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.authors");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->authors(i), target);
  }

  // optional string affiliation = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->affiliation().data(), static_cast<int>(this->affiliation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.affiliation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->affiliation(), target);
  }

  // optional string description = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // optional string method_link = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_link().data(), static_cast<int>(this->method_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "waymo.open_dataset.MotionChallengeSubmission.method_link");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->method_link(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MotionChallengeSubmission)
  return target;
}

size_t MotionChallengeSubmission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MotionChallengeSubmission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.ChallengeScenarioPredictions scenario_predictions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->scenario_predictions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->scenario_predictions(static_cast<int>(i)));
    }
  }

  // repeated string authors = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->authors_size());
  for (int i = 0, n = this->authors_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->authors(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string account_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // optional string unique_method_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->unique_method_name());
    }

    // optional string affiliation = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->affiliation());
    }

    // optional string description = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string method_link = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->method_link());
    }

    // optional .waymo.open_dataset.MotionChallengeSubmission.SubmissionType submission_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->submission_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionChallengeSubmission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MotionChallengeSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionChallengeSubmission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionChallengeSubmission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MotionChallengeSubmission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MotionChallengeSubmission)
    MergeFrom(*source);
  }
}

void MotionChallengeSubmission::MergeFrom(const MotionChallengeSubmission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MotionChallengeSubmission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scenario_predictions_.MergeFrom(from.scenario_predictions_);
  authors_.MergeFrom(from.authors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      unique_method_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unique_method_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      affiliation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.affiliation_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      method_link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_link_);
    }
    if (cached_has_bits & 0x00000020u) {
      submission_type_ = from.submission_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MotionChallengeSubmission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MotionChallengeSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionChallengeSubmission::CopyFrom(const MotionChallengeSubmission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MotionChallengeSubmission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionChallengeSubmission::IsInitialized() const {
  return true;
}

void MotionChallengeSubmission::InternalSwap(MotionChallengeSubmission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&scenario_predictions_)->InternalSwap(CastToBase(&other->scenario_predictions_));
  authors_.InternalSwap(CastToBase(&other->authors_));
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unique_method_name_.Swap(&other->unique_method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  affiliation_.Swap(&other->affiliation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_link_.Swap(&other->method_link_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(submission_type_, other->submission_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionChallengeSubmission::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Trajectory* Arena::CreateMaybeMessage< ::waymo::open_dataset::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::ScoredTrajectory* Arena::CreateMaybeMessage< ::waymo::open_dataset::ScoredTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::ScoredTrajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SingleObjectPrediction* Arena::CreateMaybeMessage< ::waymo::open_dataset::SingleObjectPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SingleObjectPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::PredictionSet* Arena::CreateMaybeMessage< ::waymo::open_dataset::PredictionSet >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::PredictionSet >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::ObjectTrajectory* Arena::CreateMaybeMessage< ::waymo::open_dataset::ObjectTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::ObjectTrajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::ScoredJointTrajectory* Arena::CreateMaybeMessage< ::waymo::open_dataset::ScoredJointTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::ScoredJointTrajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::JointPrediction* Arena::CreateMaybeMessage< ::waymo::open_dataset::JointPrediction >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::JointPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::ChallengeScenarioPredictions* Arena::CreateMaybeMessage< ::waymo::open_dataset::ChallengeScenarioPredictions >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::ChallengeScenarioPredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MotionChallengeSubmission* Arena::CreateMaybeMessage< ::waymo::open_dataset::MotionChallengeSubmission >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MotionChallengeSubmission >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
