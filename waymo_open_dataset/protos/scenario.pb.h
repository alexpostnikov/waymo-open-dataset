// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/scenario.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "waymo_open_dataset/protos/map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto;
namespace waymo {
namespace open_dataset {
class DynamicMapState;
class DynamicMapStateDefaultTypeInternal;
extern DynamicMapStateDefaultTypeInternal _DynamicMapState_default_instance_;
class ObjectState;
class ObjectStateDefaultTypeInternal;
extern ObjectStateDefaultTypeInternal _ObjectState_default_instance_;
class RequiredPrediction;
class RequiredPredictionDefaultTypeInternal;
extern RequiredPredictionDefaultTypeInternal _RequiredPrediction_default_instance_;
class Scenario;
class ScenarioDefaultTypeInternal;
extern ScenarioDefaultTypeInternal _Scenario_default_instance_;
class Track;
class TrackDefaultTypeInternal;
extern TrackDefaultTypeInternal _Track_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> ::waymo::open_dataset::DynamicMapState* Arena::CreateMaybeMessage<::waymo::open_dataset::DynamicMapState>(Arena*);
template<> ::waymo::open_dataset::ObjectState* Arena::CreateMaybeMessage<::waymo::open_dataset::ObjectState>(Arena*);
template<> ::waymo::open_dataset::RequiredPrediction* Arena::CreateMaybeMessage<::waymo::open_dataset::RequiredPrediction>(Arena*);
template<> ::waymo::open_dataset::Scenario* Arena::CreateMaybeMessage<::waymo::open_dataset::Scenario>(Arena*);
template<> ::waymo::open_dataset::Track* Arena::CreateMaybeMessage<::waymo::open_dataset::Track>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace waymo {
namespace open_dataset {

enum Track_ObjectType : int {
  Track_ObjectType_TYPE_UNSET = 0,
  Track_ObjectType_TYPE_VEHICLE = 1,
  Track_ObjectType_TYPE_PEDESTRIAN = 2,
  Track_ObjectType_TYPE_CYCLIST = 3,
  Track_ObjectType_TYPE_OTHER = 4
};
bool Track_ObjectType_IsValid(int value);
constexpr Track_ObjectType Track_ObjectType_ObjectType_MIN = Track_ObjectType_TYPE_UNSET;
constexpr Track_ObjectType Track_ObjectType_ObjectType_MAX = Track_ObjectType_TYPE_OTHER;
constexpr int Track_ObjectType_ObjectType_ARRAYSIZE = Track_ObjectType_ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Track_ObjectType_descriptor();
template<typename T>
inline const std::string& Track_ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Track_ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Track_ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Track_ObjectType_descriptor(), enum_t_value);
}
inline bool Track_ObjectType_Parse(
    const std::string& name, Track_ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Track_ObjectType>(
    Track_ObjectType_descriptor(), name, value);
}
enum RequiredPrediction_DifficultyLevel : int {
  RequiredPrediction_DifficultyLevel_NONE = 0,
  RequiredPrediction_DifficultyLevel_LEVEL_1 = 1,
  RequiredPrediction_DifficultyLevel_LEVEL_2 = 2
};
bool RequiredPrediction_DifficultyLevel_IsValid(int value);
constexpr RequiredPrediction_DifficultyLevel RequiredPrediction_DifficultyLevel_DifficultyLevel_MIN = RequiredPrediction_DifficultyLevel_NONE;
constexpr RequiredPrediction_DifficultyLevel RequiredPrediction_DifficultyLevel_DifficultyLevel_MAX = RequiredPrediction_DifficultyLevel_LEVEL_2;
constexpr int RequiredPrediction_DifficultyLevel_DifficultyLevel_ARRAYSIZE = RequiredPrediction_DifficultyLevel_DifficultyLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequiredPrediction_DifficultyLevel_descriptor();
template<typename T>
inline const std::string& RequiredPrediction_DifficultyLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequiredPrediction_DifficultyLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequiredPrediction_DifficultyLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequiredPrediction_DifficultyLevel_descriptor(), enum_t_value);
}
inline bool RequiredPrediction_DifficultyLevel_Parse(
    const std::string& name, RequiredPrediction_DifficultyLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequiredPrediction_DifficultyLevel>(
    RequiredPrediction_DifficultyLevel_descriptor(), name, value);
}
// ===================================================================

class ObjectState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.ObjectState) */ {
 public:
  ObjectState();
  virtual ~ObjectState();

  ObjectState(const ObjectState& from);
  ObjectState(ObjectState&& from) noexcept
    : ObjectState() {
    *this = ::std::move(from);
  }

  inline ObjectState& operator=(const ObjectState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectState& operator=(ObjectState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectState* internal_default_instance() {
    return reinterpret_cast<const ObjectState*>(
               &_ObjectState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectState& a, ObjectState& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectState* New() const final {
    return CreateMaybeMessage<ObjectState>(nullptr);
  }

  ObjectState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectState& from);
  void MergeFrom(const ObjectState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.ObjectState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterXFieldNumber = 2,
    kCenterYFieldNumber = 3,
    kCenterZFieldNumber = 4,
    kLengthFieldNumber = 5,
    kWidthFieldNumber = 6,
    kHeightFieldNumber = 7,
    kHeadingFieldNumber = 8,
    kVelocityXFieldNumber = 9,
    kVelocityYFieldNumber = 10,
    kValidFieldNumber = 11,
  };
  // optional double center_x = 2;
  bool has_center_x() const;
  void clear_center_x();
  double center_x() const;
  void set_center_x(double value);

  // optional double center_y = 3;
  bool has_center_y() const;
  void clear_center_y();
  double center_y() const;
  void set_center_y(double value);

  // optional double center_z = 4;
  bool has_center_z() const;
  void clear_center_z();
  double center_z() const;
  void set_center_z(double value);

  // optional float length = 5;
  bool has_length() const;
  void clear_length();
  float length() const;
  void set_length(float value);

  // optional float width = 6;
  bool has_width() const;
  void clear_width();
  float width() const;
  void set_width(float value);

  // optional float height = 7;
  bool has_height() const;
  void clear_height();
  float height() const;
  void set_height(float value);

  // optional float heading = 8;
  bool has_heading() const;
  void clear_heading();
  float heading() const;
  void set_heading(float value);

  // optional float velocity_x = 9;
  bool has_velocity_x() const;
  void clear_velocity_x();
  float velocity_x() const;
  void set_velocity_x(float value);

  // optional float velocity_y = 10;
  bool has_velocity_y() const;
  void clear_velocity_y();
  float velocity_y() const;
  void set_velocity_y(float value);

  // optional bool valid = 11;
  bool has_valid() const;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.ObjectState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double center_x_;
  double center_y_;
  double center_z_;
  float length_;
  float width_;
  float height_;
  float heading_;
  float velocity_x_;
  float velocity_y_;
  bool valid_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class Track :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Track) */ {
 public:
  Track();
  virtual ~Track();

  Track(const Track& from);
  Track(Track&& from) noexcept
    : Track() {
    *this = ::std::move(from);
  }

  inline Track& operator=(const Track& from) {
    CopyFrom(from);
    return *this;
  }
  inline Track& operator=(Track&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Track& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Track* internal_default_instance() {
    return reinterpret_cast<const Track*>(
               &_Track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Track& a, Track& b) {
    a.Swap(&b);
  }
  inline void Swap(Track* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Track* New() const final {
    return CreateMaybeMessage<Track>(nullptr);
  }

  Track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Track>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Track& from);
  void MergeFrom(const Track& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Track* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Track";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Track_ObjectType ObjectType;
  static constexpr ObjectType TYPE_UNSET =
    Track_ObjectType_TYPE_UNSET;
  static constexpr ObjectType TYPE_VEHICLE =
    Track_ObjectType_TYPE_VEHICLE;
  static constexpr ObjectType TYPE_PEDESTRIAN =
    Track_ObjectType_TYPE_PEDESTRIAN;
  static constexpr ObjectType TYPE_CYCLIST =
    Track_ObjectType_TYPE_CYCLIST;
  static constexpr ObjectType TYPE_OTHER =
    Track_ObjectType_TYPE_OTHER;
  static inline bool ObjectType_IsValid(int value) {
    return Track_ObjectType_IsValid(value);
  }
  static constexpr ObjectType ObjectType_MIN =
    Track_ObjectType_ObjectType_MIN;
  static constexpr ObjectType ObjectType_MAX =
    Track_ObjectType_ObjectType_MAX;
  static constexpr int ObjectType_ARRAYSIZE =
    Track_ObjectType_ObjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ObjectType_descriptor() {
    return Track_ObjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& ObjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ObjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ObjectType_Name.");
    return Track_ObjectType_Name(enum_t_value);
  }
  static inline bool ObjectType_Parse(const std::string& name,
      ObjectType* value) {
    return Track_ObjectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 3,
    kIdFieldNumber = 1,
    kObjectTypeFieldNumber = 2,
  };
  // repeated .waymo.open_dataset.ObjectState states = 3;
  int states_size() const;
  void clear_states();
  ::waymo::open_dataset::ObjectState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectState >*
      mutable_states();
  const ::waymo::open_dataset::ObjectState& states(int index) const;
  ::waymo::open_dataset::ObjectState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectState >&
      states() const;

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .waymo.open_dataset.Track.ObjectType object_type = 2;
  bool has_object_type() const;
  void clear_object_type();
  ::waymo::open_dataset::Track_ObjectType object_type() const;
  void set_object_type(::waymo::open_dataset::Track_ObjectType value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Track)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectState > states_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int object_type_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class DynamicMapState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.DynamicMapState) */ {
 public:
  DynamicMapState();
  virtual ~DynamicMapState();

  DynamicMapState(const DynamicMapState& from);
  DynamicMapState(DynamicMapState&& from) noexcept
    : DynamicMapState() {
    *this = ::std::move(from);
  }

  inline DynamicMapState& operator=(const DynamicMapState& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicMapState& operator=(DynamicMapState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicMapState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicMapState* internal_default_instance() {
    return reinterpret_cast<const DynamicMapState*>(
               &_DynamicMapState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DynamicMapState& a, DynamicMapState& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicMapState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicMapState* New() const final {
    return CreateMaybeMessage<DynamicMapState>(nullptr);
  }

  DynamicMapState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicMapState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicMapState& from);
  void MergeFrom(const DynamicMapState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicMapState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.DynamicMapState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneStatesFieldNumber = 1,
  };
  // repeated .waymo.open_dataset.TrafficSignalLaneState lane_states = 1;
  int lane_states_size() const;
  void clear_lane_states();
  ::waymo::open_dataset::TrafficSignalLaneState* mutable_lane_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrafficSignalLaneState >*
      mutable_lane_states();
  const ::waymo::open_dataset::TrafficSignalLaneState& lane_states(int index) const;
  ::waymo::open_dataset::TrafficSignalLaneState* add_lane_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrafficSignalLaneState >&
      lane_states() const;

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.DynamicMapState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrafficSignalLaneState > lane_states_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class RequiredPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.RequiredPrediction) */ {
 public:
  RequiredPrediction();
  virtual ~RequiredPrediction();

  RequiredPrediction(const RequiredPrediction& from);
  RequiredPrediction(RequiredPrediction&& from) noexcept
    : RequiredPrediction() {
    *this = ::std::move(from);
  }

  inline RequiredPrediction& operator=(const RequiredPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequiredPrediction& operator=(RequiredPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequiredPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequiredPrediction* internal_default_instance() {
    return reinterpret_cast<const RequiredPrediction*>(
               &_RequiredPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequiredPrediction& a, RequiredPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(RequiredPrediction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequiredPrediction* New() const final {
    return CreateMaybeMessage<RequiredPrediction>(nullptr);
  }

  RequiredPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequiredPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequiredPrediction& from);
  void MergeFrom(const RequiredPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequiredPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.RequiredPrediction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequiredPrediction_DifficultyLevel DifficultyLevel;
  static constexpr DifficultyLevel NONE =
    RequiredPrediction_DifficultyLevel_NONE;
  static constexpr DifficultyLevel LEVEL_1 =
    RequiredPrediction_DifficultyLevel_LEVEL_1;
  static constexpr DifficultyLevel LEVEL_2 =
    RequiredPrediction_DifficultyLevel_LEVEL_2;
  static inline bool DifficultyLevel_IsValid(int value) {
    return RequiredPrediction_DifficultyLevel_IsValid(value);
  }
  static constexpr DifficultyLevel DifficultyLevel_MIN =
    RequiredPrediction_DifficultyLevel_DifficultyLevel_MIN;
  static constexpr DifficultyLevel DifficultyLevel_MAX =
    RequiredPrediction_DifficultyLevel_DifficultyLevel_MAX;
  static constexpr int DifficultyLevel_ARRAYSIZE =
    RequiredPrediction_DifficultyLevel_DifficultyLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DifficultyLevel_descriptor() {
    return RequiredPrediction_DifficultyLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& DifficultyLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DifficultyLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DifficultyLevel_Name.");
    return RequiredPrediction_DifficultyLevel_Name(enum_t_value);
  }
  static inline bool DifficultyLevel_Parse(const std::string& name,
      DifficultyLevel* value) {
    return RequiredPrediction_DifficultyLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrackIndexFieldNumber = 1,
    kDifficultyFieldNumber = 2,
  };
  // optional int32 track_index = 1;
  bool has_track_index() const;
  void clear_track_index();
  ::PROTOBUF_NAMESPACE_ID::int32 track_index() const;
  void set_track_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .waymo.open_dataset.RequiredPrediction.DifficultyLevel difficulty = 2;
  bool has_difficulty() const;
  void clear_difficulty();
  ::waymo::open_dataset::RequiredPrediction_DifficultyLevel difficulty() const;
  void set_difficulty(::waymo::open_dataset::RequiredPrediction_DifficultyLevel value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.RequiredPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 track_index_;
  int difficulty_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto;
};
// -------------------------------------------------------------------

class Scenario :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:waymo.open_dataset.Scenario) */ {
 public:
  Scenario();
  virtual ~Scenario();

  Scenario(const Scenario& from);
  Scenario(Scenario&& from) noexcept
    : Scenario() {
    *this = ::std::move(from);
  }

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario& operator=(Scenario&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scenario& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scenario* internal_default_instance() {
    return reinterpret_cast<const Scenario*>(
               &_Scenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Scenario& a, Scenario& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scenario* New() const final {
    return CreateMaybeMessage<Scenario>(nullptr);
  }

  Scenario* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scenario>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scenario& from);
  void MergeFrom(const Scenario& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "waymo.open_dataset.Scenario";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto);
    return ::descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampsSecondsFieldNumber = 1,
    kTracksFieldNumber = 2,
    kObjectsOfInterestFieldNumber = 4,
    kDynamicMapStatesFieldNumber = 7,
    kMapFeaturesFieldNumber = 8,
    kTracksToPredictFieldNumber = 11,
    kScenarioIdFieldNumber = 5,
    kSdcTrackIndexFieldNumber = 6,
    kCurrentTimeIndexFieldNumber = 10,
  };
  // repeated double timestamps_seconds = 1;
  int timestamps_seconds_size() const;
  void clear_timestamps_seconds();
  double timestamps_seconds(int index) const;
  void set_timestamps_seconds(int index, double value);
  void add_timestamps_seconds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      timestamps_seconds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_timestamps_seconds();

  // repeated .waymo.open_dataset.Track tracks = 2;
  int tracks_size() const;
  void clear_tracks();
  ::waymo::open_dataset::Track* mutable_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Track >*
      mutable_tracks();
  const ::waymo::open_dataset::Track& tracks(int index) const;
  ::waymo::open_dataset::Track* add_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Track >&
      tracks() const;

  // repeated int32 objects_of_interest = 4;
  int objects_of_interest_size() const;
  void clear_objects_of_interest();
  ::PROTOBUF_NAMESPACE_ID::int32 objects_of_interest(int index) const;
  void set_objects_of_interest(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_objects_of_interest(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      objects_of_interest() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_objects_of_interest();

  // repeated .waymo.open_dataset.DynamicMapState dynamic_map_states = 7;
  int dynamic_map_states_size() const;
  void clear_dynamic_map_states();
  ::waymo::open_dataset::DynamicMapState* mutable_dynamic_map_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DynamicMapState >*
      mutable_dynamic_map_states();
  const ::waymo::open_dataset::DynamicMapState& dynamic_map_states(int index) const;
  ::waymo::open_dataset::DynamicMapState* add_dynamic_map_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DynamicMapState >&
      dynamic_map_states() const;

  // repeated .waymo.open_dataset.MapFeature map_features = 8;
  int map_features_size() const;
  void clear_map_features();
  ::waymo::open_dataset::MapFeature* mutable_map_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MapFeature >*
      mutable_map_features();
  const ::waymo::open_dataset::MapFeature& map_features(int index) const;
  ::waymo::open_dataset::MapFeature* add_map_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MapFeature >&
      map_features() const;

  // repeated .waymo.open_dataset.RequiredPrediction tracks_to_predict = 11;
  int tracks_to_predict_size() const;
  void clear_tracks_to_predict();
  ::waymo::open_dataset::RequiredPrediction* mutable_tracks_to_predict(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::RequiredPrediction >*
      mutable_tracks_to_predict();
  const ::waymo::open_dataset::RequiredPrediction& tracks_to_predict(int index) const;
  ::waymo::open_dataset::RequiredPrediction* add_tracks_to_predict();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::RequiredPrediction >&
      tracks_to_predict() const;

  // optional string scenario_id = 5;
  bool has_scenario_id() const;
  void clear_scenario_id();
  const std::string& scenario_id() const;
  void set_scenario_id(const std::string& value);
  void set_scenario_id(std::string&& value);
  void set_scenario_id(const char* value);
  void set_scenario_id(const char* value, size_t size);
  std::string* mutable_scenario_id();
  std::string* release_scenario_id();
  void set_allocated_scenario_id(std::string* scenario_id);

  // optional int32 sdc_track_index = 6;
  bool has_sdc_track_index() const;
  void clear_sdc_track_index();
  ::PROTOBUF_NAMESPACE_ID::int32 sdc_track_index() const;
  void set_sdc_track_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 current_time_index = 10;
  bool has_current_time_index() const;
  void clear_current_time_index();
  ::PROTOBUF_NAMESPACE_ID::int32 current_time_index() const;
  void set_current_time_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:waymo.open_dataset.Scenario)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > timestamps_seconds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Track > tracks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > objects_of_interest_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DynamicMapState > dynamic_map_states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MapFeature > map_features_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::RequiredPrediction > tracks_to_predict_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sdc_track_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_time_index_;
  friend struct ::TableStruct_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectState

// optional double center_x = 2;
inline bool ObjectState::has_center_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectState::clear_center_x() {
  center_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ObjectState::center_x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.center_x)
  return center_x_;
}
inline void ObjectState::set_center_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  center_x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.center_x)
}

// optional double center_y = 3;
inline bool ObjectState::has_center_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectState::clear_center_y() {
  center_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ObjectState::center_y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.center_y)
  return center_y_;
}
inline void ObjectState::set_center_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  center_y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.center_y)
}

// optional double center_z = 4;
inline bool ObjectState::has_center_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectState::clear_center_z() {
  center_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ObjectState::center_z() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.center_z)
  return center_z_;
}
inline void ObjectState::set_center_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  center_z_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.center_z)
}

// optional float length = 5;
inline bool ObjectState::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectState::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ObjectState::length() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.length)
  return length_;
}
inline void ObjectState::set_length(float value) {
  _has_bits_[0] |= 0x00000008u;
  length_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.length)
}

// optional float width = 6;
inline bool ObjectState::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectState::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ObjectState::width() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.width)
  return width_;
}
inline void ObjectState::set_width(float value) {
  _has_bits_[0] |= 0x00000010u;
  width_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.width)
}

// optional float height = 7;
inline bool ObjectState::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectState::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ObjectState::height() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.height)
  return height_;
}
inline void ObjectState::set_height(float value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.height)
}

// optional float heading = 8;
inline bool ObjectState::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObjectState::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ObjectState::heading() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.heading)
  return heading_;
}
inline void ObjectState::set_heading(float value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.heading)
}

// optional float velocity_x = 9;
inline bool ObjectState::has_velocity_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObjectState::clear_velocity_x() {
  velocity_x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ObjectState::velocity_x() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.velocity_x)
  return velocity_x_;
}
inline void ObjectState::set_velocity_x(float value) {
  _has_bits_[0] |= 0x00000080u;
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.velocity_x)
}

// optional float velocity_y = 10;
inline bool ObjectState::has_velocity_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObjectState::clear_velocity_y() {
  velocity_y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ObjectState::velocity_y() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.velocity_y)
  return velocity_y_;
}
inline void ObjectState::set_velocity_y(float value) {
  _has_bits_[0] |= 0x00000100u;
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.velocity_y)
}

// optional bool valid = 11;
inline bool ObjectState::has_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObjectState::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ObjectState::valid() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.ObjectState.valid)
  return valid_;
}
inline void ObjectState::set_valid(bool value) {
  _has_bits_[0] |= 0x00000200u;
  valid_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.ObjectState.valid)
}

// -------------------------------------------------------------------

// Track

// optional int32 id = 1;
inline bool Track::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Track::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Track::id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Track.id)
  return id_;
}
inline void Track::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Track.id)
}

// optional .waymo.open_dataset.Track.ObjectType object_type = 2;
inline bool Track::has_object_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Track::clear_object_type() {
  object_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::waymo::open_dataset::Track_ObjectType Track::object_type() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Track.object_type)
  return static_cast< ::waymo::open_dataset::Track_ObjectType >(object_type_);
}
inline void Track::set_object_type(::waymo::open_dataset::Track_ObjectType value) {
  assert(::waymo::open_dataset::Track_ObjectType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  object_type_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Track.object_type)
}

// repeated .waymo.open_dataset.ObjectState states = 3;
inline int Track::states_size() const {
  return states_.size();
}
inline void Track::clear_states() {
  states_.Clear();
}
inline ::waymo::open_dataset::ObjectState* Track::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Track.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectState >*
Track::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Track.states)
  return &states_;
}
inline const ::waymo::open_dataset::ObjectState& Track::states(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Track.states)
  return states_.Get(index);
}
inline ::waymo::open_dataset::ObjectState* Track::add_states() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Track.states)
  return states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::ObjectState >&
Track::states() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Track.states)
  return states_;
}

// -------------------------------------------------------------------

// DynamicMapState

// repeated .waymo.open_dataset.TrafficSignalLaneState lane_states = 1;
inline int DynamicMapState::lane_states_size() const {
  return lane_states_.size();
}
inline ::waymo::open_dataset::TrafficSignalLaneState* DynamicMapState::mutable_lane_states(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.DynamicMapState.lane_states)
  return lane_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrafficSignalLaneState >*
DynamicMapState::mutable_lane_states() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.DynamicMapState.lane_states)
  return &lane_states_;
}
inline const ::waymo::open_dataset::TrafficSignalLaneState& DynamicMapState::lane_states(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.DynamicMapState.lane_states)
  return lane_states_.Get(index);
}
inline ::waymo::open_dataset::TrafficSignalLaneState* DynamicMapState::add_lane_states() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.DynamicMapState.lane_states)
  return lane_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::TrafficSignalLaneState >&
DynamicMapState::lane_states() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.DynamicMapState.lane_states)
  return lane_states_;
}

// -------------------------------------------------------------------

// RequiredPrediction

// optional int32 track_index = 1;
inline bool RequiredPrediction::has_track_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequiredPrediction::clear_track_index() {
  track_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequiredPrediction::track_index() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.RequiredPrediction.track_index)
  return track_index_;
}
inline void RequiredPrediction::set_track_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  track_index_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.RequiredPrediction.track_index)
}

// optional .waymo.open_dataset.RequiredPrediction.DifficultyLevel difficulty = 2;
inline bool RequiredPrediction::has_difficulty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequiredPrediction::clear_difficulty() {
  difficulty_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::waymo::open_dataset::RequiredPrediction_DifficultyLevel RequiredPrediction::difficulty() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.RequiredPrediction.difficulty)
  return static_cast< ::waymo::open_dataset::RequiredPrediction_DifficultyLevel >(difficulty_);
}
inline void RequiredPrediction::set_difficulty(::waymo::open_dataset::RequiredPrediction_DifficultyLevel value) {
  assert(::waymo::open_dataset::RequiredPrediction_DifficultyLevel_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.RequiredPrediction.difficulty)
}

// -------------------------------------------------------------------

// Scenario

// optional string scenario_id = 5;
inline bool Scenario::has_scenario_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scenario::clear_scenario_id() {
  scenario_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Scenario::scenario_id() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.scenario_id)
  return scenario_id_.GetNoArena();
}
inline void Scenario::set_scenario_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Scenario.scenario_id)
}
inline void Scenario::set_scenario_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:waymo.open_dataset.Scenario.scenario_id)
}
inline void Scenario::set_scenario_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:waymo.open_dataset.Scenario.scenario_id)
}
inline void Scenario::set_scenario_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scenario_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:waymo.open_dataset.Scenario.scenario_id)
}
inline std::string* Scenario::mutable_scenario_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Scenario.scenario_id)
  return scenario_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Scenario::release_scenario_id() {
  // @@protoc_insertion_point(field_release:waymo.open_dataset.Scenario.scenario_id)
  if (!has_scenario_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scenario_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Scenario::set_allocated_scenario_id(std::string* scenario_id) {
  if (scenario_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scenario_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario_id);
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.Scenario.scenario_id)
}

// repeated double timestamps_seconds = 1;
inline int Scenario::timestamps_seconds_size() const {
  return timestamps_seconds_.size();
}
inline void Scenario::clear_timestamps_seconds() {
  timestamps_seconds_.Clear();
}
inline double Scenario::timestamps_seconds(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.timestamps_seconds)
  return timestamps_seconds_.Get(index);
}
inline void Scenario::set_timestamps_seconds(int index, double value) {
  timestamps_seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Scenario.timestamps_seconds)
}
inline void Scenario::add_timestamps_seconds(double value) {
  timestamps_seconds_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Scenario.timestamps_seconds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Scenario::timestamps_seconds() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Scenario.timestamps_seconds)
  return timestamps_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Scenario::mutable_timestamps_seconds() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Scenario.timestamps_seconds)
  return &timestamps_seconds_;
}

// optional int32 current_time_index = 10;
inline bool Scenario::has_current_time_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scenario::clear_current_time_index() {
  current_time_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scenario::current_time_index() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.current_time_index)
  return current_time_index_;
}
inline void Scenario::set_current_time_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  current_time_index_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Scenario.current_time_index)
}

// repeated .waymo.open_dataset.Track tracks = 2;
inline int Scenario::tracks_size() const {
  return tracks_.size();
}
inline void Scenario::clear_tracks() {
  tracks_.Clear();
}
inline ::waymo::open_dataset::Track* Scenario::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Scenario.tracks)
  return tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Track >*
Scenario::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Scenario.tracks)
  return &tracks_;
}
inline const ::waymo::open_dataset::Track& Scenario::tracks(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.tracks)
  return tracks_.Get(index);
}
inline ::waymo::open_dataset::Track* Scenario::add_tracks() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Scenario.tracks)
  return tracks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::Track >&
Scenario::tracks() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Scenario.tracks)
  return tracks_;
}

// repeated .waymo.open_dataset.DynamicMapState dynamic_map_states = 7;
inline int Scenario::dynamic_map_states_size() const {
  return dynamic_map_states_.size();
}
inline void Scenario::clear_dynamic_map_states() {
  dynamic_map_states_.Clear();
}
inline ::waymo::open_dataset::DynamicMapState* Scenario::mutable_dynamic_map_states(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Scenario.dynamic_map_states)
  return dynamic_map_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DynamicMapState >*
Scenario::mutable_dynamic_map_states() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Scenario.dynamic_map_states)
  return &dynamic_map_states_;
}
inline const ::waymo::open_dataset::DynamicMapState& Scenario::dynamic_map_states(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.dynamic_map_states)
  return dynamic_map_states_.Get(index);
}
inline ::waymo::open_dataset::DynamicMapState* Scenario::add_dynamic_map_states() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Scenario.dynamic_map_states)
  return dynamic_map_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::DynamicMapState >&
Scenario::dynamic_map_states() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Scenario.dynamic_map_states)
  return dynamic_map_states_;
}

// repeated .waymo.open_dataset.MapFeature map_features = 8;
inline int Scenario::map_features_size() const {
  return map_features_.size();
}
inline ::waymo::open_dataset::MapFeature* Scenario::mutable_map_features(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Scenario.map_features)
  return map_features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MapFeature >*
Scenario::mutable_map_features() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Scenario.map_features)
  return &map_features_;
}
inline const ::waymo::open_dataset::MapFeature& Scenario::map_features(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.map_features)
  return map_features_.Get(index);
}
inline ::waymo::open_dataset::MapFeature* Scenario::add_map_features() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Scenario.map_features)
  return map_features_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::MapFeature >&
Scenario::map_features() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Scenario.map_features)
  return map_features_;
}

// optional int32 sdc_track_index = 6;
inline bool Scenario::has_sdc_track_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scenario::clear_sdc_track_index() {
  sdc_track_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scenario::sdc_track_index() const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.sdc_track_index)
  return sdc_track_index_;
}
inline void Scenario::set_sdc_track_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sdc_track_index_ = value;
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Scenario.sdc_track_index)
}

// repeated int32 objects_of_interest = 4;
inline int Scenario::objects_of_interest_size() const {
  return objects_of_interest_.size();
}
inline void Scenario::clear_objects_of_interest() {
  objects_of_interest_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scenario::objects_of_interest(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.objects_of_interest)
  return objects_of_interest_.Get(index);
}
inline void Scenario::set_objects_of_interest(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  objects_of_interest_.Set(index, value);
  // @@protoc_insertion_point(field_set:waymo.open_dataset.Scenario.objects_of_interest)
}
inline void Scenario::add_objects_of_interest(::PROTOBUF_NAMESPACE_ID::int32 value) {
  objects_of_interest_.Add(value);
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Scenario.objects_of_interest)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Scenario::objects_of_interest() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Scenario.objects_of_interest)
  return objects_of_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Scenario::mutable_objects_of_interest() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Scenario.objects_of_interest)
  return &objects_of_interest_;
}

// repeated .waymo.open_dataset.RequiredPrediction tracks_to_predict = 11;
inline int Scenario::tracks_to_predict_size() const {
  return tracks_to_predict_.size();
}
inline void Scenario::clear_tracks_to_predict() {
  tracks_to_predict_.Clear();
}
inline ::waymo::open_dataset::RequiredPrediction* Scenario::mutable_tracks_to_predict(int index) {
  // @@protoc_insertion_point(field_mutable:waymo.open_dataset.Scenario.tracks_to_predict)
  return tracks_to_predict_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::RequiredPrediction >*
Scenario::mutable_tracks_to_predict() {
  // @@protoc_insertion_point(field_mutable_list:waymo.open_dataset.Scenario.tracks_to_predict)
  return &tracks_to_predict_;
}
inline const ::waymo::open_dataset::RequiredPrediction& Scenario::tracks_to_predict(int index) const {
  // @@protoc_insertion_point(field_get:waymo.open_dataset.Scenario.tracks_to_predict)
  return tracks_to_predict_.Get(index);
}
inline ::waymo::open_dataset::RequiredPrediction* Scenario::add_tracks_to_predict() {
  // @@protoc_insertion_point(field_add:waymo.open_dataset.Scenario.tracks_to_predict)
  return tracks_to_predict_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::waymo::open_dataset::RequiredPrediction >&
Scenario::tracks_to_predict() const {
  // @@protoc_insertion_point(field_list:waymo.open_dataset.Scenario.tracks_to_predict)
  return tracks_to_predict_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace open_dataset
}  // namespace waymo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::waymo::open_dataset::Track_ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::Track_ObjectType>() {
  return ::waymo::open_dataset::Track_ObjectType_descriptor();
}
template <> struct is_proto_enum< ::waymo::open_dataset::RequiredPrediction_DifficultyLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::waymo::open_dataset::RequiredPrediction_DifficultyLevel>() {
  return ::waymo::open_dataset::RequiredPrediction_DifficultyLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waymo_5fopen_5fdataset_2fprotos_2fscenario_2eproto
