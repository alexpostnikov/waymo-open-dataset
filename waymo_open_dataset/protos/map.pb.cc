// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waymo_open_dataset/protos/map.proto

#include "waymo_open_dataset/protos/map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto;
namespace waymo {
namespace open_dataset {
class MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Map> _instance;
} _Map_default_instance_;
class DynamicStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicState> _instance;
} _DynamicState_default_instance_;
class TrafficSignalLaneStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignalLaneState> _instance;
} _TrafficSignalLaneState_default_instance_;
class MapFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapFeature> _instance;
  const ::waymo::open_dataset::LaneCenter* lane_;
  const ::waymo::open_dataset::RoadLine* road_line_;
  const ::waymo::open_dataset::RoadEdge* road_edge_;
  const ::waymo::open_dataset::StopSign* stop_sign_;
  const ::waymo::open_dataset::Crosswalk* crosswalk_;
  const ::waymo::open_dataset::SpeedBump* speed_bump_;
} _MapFeature_default_instance_;
class MapPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapPoint> _instance;
} _MapPoint_default_instance_;
class BoundarySegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundarySegment> _instance;
} _BoundarySegment_default_instance_;
class LaneNeighborDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneNeighbor> _instance;
} _LaneNeighbor_default_instance_;
class LaneCenterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneCenter> _instance;
} _LaneCenter_default_instance_;
class RoadEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadEdge> _instance;
} _RoadEdge_default_instance_;
class RoadLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadLine> _instance;
} _RoadLine_default_instance_;
class StopSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopSign> _instance;
} _StopSign_default_instance_;
class CrosswalkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Crosswalk> _instance;
} _Crosswalk_default_instance_;
class SpeedBumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedBump> _instance;
} _SpeedBump_default_instance_;
}  // namespace open_dataset
}  // namespace waymo
static void InitDefaultsscc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_BoundarySegment_default_instance_;
    new (ptr) ::waymo::open_dataset::BoundarySegment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::BoundarySegment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {}};

static void InitDefaultsscc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Crosswalk_default_instance_;
    new (ptr) ::waymo::open_dataset::Crosswalk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Crosswalk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_DynamicState_default_instance_;
    new (ptr) ::waymo::open_dataset::DynamicState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::DynamicState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_LaneCenter_default_instance_;
    new (ptr) ::waymo::open_dataset::LaneCenter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::LaneCenter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_LaneNeighbor_default_instance_;
    new (ptr) ::waymo::open_dataset::LaneNeighbor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::LaneNeighbor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_Map_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_Map_default_instance_;
    new (ptr) ::waymo::open_dataset::Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::Map::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Map_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Map_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MapFeature_default_instance_;
    new (ptr) ::waymo::open_dataset::MapFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MapFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
      &scc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_MapPoint_default_instance_;
    new (ptr) ::waymo::open_dataset::MapPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::MapPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {}};

static void InitDefaultsscc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_RoadEdge_default_instance_;
    new (ptr) ::waymo::open_dataset::RoadEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::RoadEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_RoadLine_default_instance_;
    new (ptr) ::waymo::open_dataset::RoadLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::RoadLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_SpeedBump_default_instance_;
    new (ptr) ::waymo::open_dataset::SpeedBump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::SpeedBump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_StopSign_default_instance_;
    new (ptr) ::waymo::open_dataset::StopSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::StopSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::waymo::open_dataset::_TrafficSignalLaneState_default_instance_;
    new (ptr) ::waymo::open_dataset::TrafficSignalLaneState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::waymo::open_dataset::TrafficSignalLaneState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto}, {
      &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Map, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Map, map_features_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Map, dynamic_states_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DynamicState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DynamicState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DynamicState, timestamp_seconds_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::DynamicState, lane_states_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrafficSignalLaneState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrafficSignalLaneState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrafficSignalLaneState, lane_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrafficSignalLaneState, state_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::TrafficSignalLaneState, stop_point_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapFeature, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapFeature, id_),
  offsetof(::waymo::open_dataset::MapFeatureDefaultTypeInternal, lane_),
  offsetof(::waymo::open_dataset::MapFeatureDefaultTypeInternal, road_line_),
  offsetof(::waymo::open_dataset::MapFeatureDefaultTypeInternal, road_edge_),
  offsetof(::waymo::open_dataset::MapFeatureDefaultTypeInternal, stop_sign_),
  offsetof(::waymo::open_dataset::MapFeatureDefaultTypeInternal, crosswalk_),
  offsetof(::waymo::open_dataset::MapFeatureDefaultTypeInternal, speed_bump_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapFeature, feature_data_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapPoint, x_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapPoint, y_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::MapPoint, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::BoundarySegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::BoundarySegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::BoundarySegment, lane_start_index_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::BoundarySegment, lane_end_index_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::BoundarySegment, boundary_feature_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::BoundarySegment, boundary_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, feature_id_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, self_start_index_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, self_end_index_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, neighbor_start_index_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, neighbor_end_index_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneNeighbor, boundaries_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, speed_limit_mph_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, interpolating_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, polyline_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, entry_lanes_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, exit_lanes_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, left_boundaries_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, right_boundaries_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, left_neighbors_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::LaneCenter, right_neighbors_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadEdge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadEdge, type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadEdge, polyline_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadLine, type_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::RoadLine, polyline_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::StopSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::StopSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::StopSign, lane_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::StopSign, position_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Crosswalk, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Crosswalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::Crosswalk, polygon_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SpeedBump, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SpeedBump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::waymo::open_dataset::SpeedBump, polygon_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::waymo::open_dataset::Map)},
  { 9, 16, sizeof(::waymo::open_dataset::DynamicState)},
  { 18, 26, sizeof(::waymo::open_dataset::TrafficSignalLaneState)},
  { 29, 42, sizeof(::waymo::open_dataset::MapFeature)},
  { 49, 57, sizeof(::waymo::open_dataset::MapPoint)},
  { 60, 69, sizeof(::waymo::open_dataset::BoundarySegment)},
  { 73, 84, sizeof(::waymo::open_dataset::LaneNeighbor)},
  { 90, 105, sizeof(::waymo::open_dataset::LaneCenter)},
  { 115, 122, sizeof(::waymo::open_dataset::RoadEdge)},
  { 124, 131, sizeof(::waymo::open_dataset::RoadLine)},
  { 133, 140, sizeof(::waymo::open_dataset::StopSign)},
  { 142, 148, sizeof(::waymo::open_dataset::Crosswalk)},
  { 149, 155, sizeof(::waymo::open_dataset::SpeedBump)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_DynamicState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_TrafficSignalLaneState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MapFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_MapPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_BoundarySegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_LaneNeighbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_LaneCenter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_RoadEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_RoadLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_StopSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_Crosswalk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::waymo::open_dataset::_SpeedBump_default_instance_),
};

const char descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#waymo_open_dataset/protos/map.proto\022\022w"
  "aymo.open_dataset\"u\n\003Map\0224\n\014map_features"
  "\030\001 \003(\0132\036.waymo.open_dataset.MapFeature\0228"
  "\n\016dynamic_states\030\002 \003(\0132 .waymo.open_data"
  "set.DynamicState\"j\n\014DynamicState\022\031\n\021time"
  "stamp_seconds\030\001 \001(\001\022\?\n\013lane_states\030\002 \003(\013"
  "2*.waymo.open_dataset.TrafficSignalLaneS"
  "tate\"\214\003\n\026TrafficSignalLaneState\022\014\n\004lane\030"
  "\001 \001(\003\022\?\n\005state\030\002 \001(\01620.waymo.open_datase"
  "t.TrafficSignalLaneState.State\0220\n\nstop_p"
  "oint\030\003 \001(\0132\034.waymo.open_dataset.MapPoint"
  "\"\360\001\n\005State\022\026\n\022LANE_STATE_UNKNOWN\020\000\022\031\n\025LA"
  "NE_STATE_ARROW_STOP\020\001\022\034\n\030LANE_STATE_ARRO"
  "W_CAUTION\020\002\022\027\n\023LANE_STATE_ARROW_GO\020\003\022\023\n\017"
  "LANE_STATE_STOP\020\004\022\026\n\022LANE_STATE_CAUTION\020"
  "\005\022\021\n\rLANE_STATE_GO\020\006\022\034\n\030LANE_STATE_FLASH"
  "ING_STOP\020\007\022\037\n\033LANE_STATE_FLASHING_CAUTIO"
  "N\020\010\"\332\002\n\nMapFeature\022\n\n\002id\030\001 \001(\003\022.\n\004lane\030\003"
  " \001(\0132\036.waymo.open_dataset.LaneCenterH\000\0221"
  "\n\troad_line\030\004 \001(\0132\034.waymo.open_dataset.R"
  "oadLineH\000\0221\n\troad_edge\030\005 \001(\0132\034.waymo.ope"
  "n_dataset.RoadEdgeH\000\0221\n\tstop_sign\030\007 \001(\0132"
  "\034.waymo.open_dataset.StopSignH\000\0222\n\tcross"
  "walk\030\010 \001(\0132\035.waymo.open_dataset.Crosswal"
  "kH\000\0223\n\nspeed_bump\030\t \001(\0132\035.waymo.open_dat"
  "aset.SpeedBumpH\000B\016\n\014feature_data\"+\n\010MapP"
  "oint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\242\001"
  "\n\017BoundarySegment\022\030\n\020lane_start_index\030\001 "
  "\001(\005\022\026\n\016lane_end_index\030\002 \001(\005\022\033\n\023boundary_"
  "feature_id\030\003 \001(\003\022@\n\rboundary_type\030\004 \001(\0162"
  ").waymo.open_dataset.RoadLine.RoadLineTy"
  "pe\"\307\001\n\014LaneNeighbor\022\022\n\nfeature_id\030\001 \001(\003\022"
  "\030\n\020self_start_index\030\002 \001(\005\022\026\n\016self_end_in"
  "dex\030\003 \001(\005\022\034\n\024neighbor_start_index\030\004 \001(\005\022"
  "\032\n\022neighbor_end_index\030\005 \001(\005\0227\n\nboundarie"
  "s\030\006 \003(\0132#.waymo.open_dataset.BoundarySeg"
  "ment\"\245\004\n\nLaneCenter\022\027\n\017speed_limit_mph\030\001"
  " \001(\001\0225\n\004type\030\002 \001(\0162\'.waymo.open_dataset."
  "LaneCenter.LaneType\022\025\n\rinterpolating\030\003 \001"
  "(\010\022.\n\010polyline\030\010 \003(\0132\034.waymo.open_datase"
  "t.MapPoint\022\027\n\013entry_lanes\030\t \003(\003B\002\020\001\022\026\n\ne"
  "xit_lanes\030\n \003(\003B\002\020\001\022<\n\017left_boundaries\030\r"
  " \003(\0132#.waymo.open_dataset.BoundarySegmen"
  "t\022=\n\020right_boundaries\030\016 \003(\0132#.waymo.open"
  "_dataset.BoundarySegment\0228\n\016left_neighbo"
  "rs\030\013 \003(\0132 .waymo.open_dataset.LaneNeighb"
  "or\0229\n\017right_neighbors\030\014 \003(\0132 .waymo.open"
  "_dataset.LaneNeighbor\"]\n\010LaneType\022\022\n\016TYP"
  "E_UNDEFINED\020\000\022\020\n\014TYPE_FREEWAY\020\001\022\027\n\023TYPE_"
  "SURFACE_STREET\020\002\022\022\n\016TYPE_BIKE_LANE\020\003\"\315\001\n"
  "\010RoadEdge\0227\n\004type\030\001 \001(\0162).waymo.open_dat"
  "aset.RoadEdge.RoadEdgeType\022.\n\010polyline\030\002"
  " \003(\0132\034.waymo.open_dataset.MapPoint\"X\n\014Ro"
  "adEdgeType\022\020\n\014TYPE_UNKNOWN\020\000\022\033\n\027TYPE_ROA"
  "D_EDGE_BOUNDARY\020\001\022\031\n\025TYPE_ROAD_EDGE_MEDI"
  "AN\020\002\"\210\003\n\010RoadLine\0227\n\004type\030\001 \001(\0162).waymo."
  "open_dataset.RoadLine.RoadLineType\022.\n\010po"
  "lyline\030\002 \003(\0132\034.waymo.open_dataset.MapPoi"
  "nt\"\222\002\n\014RoadLineType\022\020\n\014TYPE_UNKNOWN\020\000\022\034\n"
  "\030TYPE_BROKEN_SINGLE_WHITE\020\001\022\033\n\027TYPE_SOLI"
  "D_SINGLE_WHITE\020\002\022\033\n\027TYPE_SOLID_DOUBLE_WH"
  "ITE\020\003\022\035\n\031TYPE_BROKEN_SINGLE_YELLOW\020\004\022\035\n\031"
  "TYPE_BROKEN_DOUBLE_YELLOW\020\005\022\034\n\030TYPE_SOLI"
  "D_SINGLE_YELLOW\020\006\022\034\n\030TYPE_SOLID_DOUBLE_Y"
  "ELLOW\020\007\022\036\n\032TYPE_PASSING_DOUBLE_YELLOW\020\010\""
  "H\n\010StopSign\022\014\n\004lane\030\001 \003(\003\022.\n\010position\030\002 "
  "\001(\0132\034.waymo.open_dataset.MapPoint\":\n\tCro"
  "sswalk\022-\n\007polygon\030\001 \003(\0132\034.waymo.open_dat"
  "aset.MapPoint\":\n\tSpeedBump\022-\n\007polygon\030\001 "
  "\003(\0132\034.waymo.open_dataset.MapPoint"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_sccs[13] = {
  &scc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_Map_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
  &scc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_once;
static bool descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto = {
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_initialized, descriptor_table_protodef_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto, "waymo_open_dataset/protos/map.proto", 2793,
  &descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_once, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_sccs, descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto::offsets,
  file_level_metadata_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto, 13, file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto, file_level_service_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto), true);
namespace waymo {
namespace open_dataset {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignalLaneState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto[0];
}
bool TrafficSignalLaneState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_UNKNOWN;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_ARROW_STOP;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_ARROW_CAUTION;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_ARROW_GO;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_STOP;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_CAUTION;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_GO;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_FLASHING_STOP;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::LANE_STATE_FLASHING_CAUTION;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::State_MIN;
constexpr TrafficSignalLaneState_State TrafficSignalLaneState::State_MAX;
constexpr int TrafficSignalLaneState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneCenter_LaneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto[1];
}
bool LaneCenter_LaneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneCenter_LaneType LaneCenter::TYPE_UNDEFINED;
constexpr LaneCenter_LaneType LaneCenter::TYPE_FREEWAY;
constexpr LaneCenter_LaneType LaneCenter::TYPE_SURFACE_STREET;
constexpr LaneCenter_LaneType LaneCenter::TYPE_BIKE_LANE;
constexpr LaneCenter_LaneType LaneCenter::LaneType_MIN;
constexpr LaneCenter_LaneType LaneCenter::LaneType_MAX;
constexpr int LaneCenter::LaneType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadEdge_RoadEdgeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto[2];
}
bool RoadEdge_RoadEdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RoadEdge_RoadEdgeType RoadEdge::TYPE_UNKNOWN;
constexpr RoadEdge_RoadEdgeType RoadEdge::TYPE_ROAD_EDGE_BOUNDARY;
constexpr RoadEdge_RoadEdgeType RoadEdge::TYPE_ROAD_EDGE_MEDIAN;
constexpr RoadEdge_RoadEdgeType RoadEdge::RoadEdgeType_MIN;
constexpr RoadEdge_RoadEdgeType RoadEdge::RoadEdgeType_MAX;
constexpr int RoadEdge::RoadEdgeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadLine_RoadLineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto);
  return file_level_enum_descriptors_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto[3];
}
bool RoadLine_RoadLineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RoadLine_RoadLineType RoadLine::TYPE_UNKNOWN;
constexpr RoadLine_RoadLineType RoadLine::TYPE_BROKEN_SINGLE_WHITE;
constexpr RoadLine_RoadLineType RoadLine::TYPE_SOLID_SINGLE_WHITE;
constexpr RoadLine_RoadLineType RoadLine::TYPE_SOLID_DOUBLE_WHITE;
constexpr RoadLine_RoadLineType RoadLine::TYPE_BROKEN_SINGLE_YELLOW;
constexpr RoadLine_RoadLineType RoadLine::TYPE_BROKEN_DOUBLE_YELLOW;
constexpr RoadLine_RoadLineType RoadLine::TYPE_SOLID_SINGLE_YELLOW;
constexpr RoadLine_RoadLineType RoadLine::TYPE_SOLID_DOUBLE_YELLOW;
constexpr RoadLine_RoadLineType RoadLine::TYPE_PASSING_DOUBLE_YELLOW;
constexpr RoadLine_RoadLineType RoadLine::RoadLineType_MIN;
constexpr RoadLine_RoadLineType RoadLine::RoadLineType_MAX;
constexpr int RoadLine::RoadLineType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Map::InitAsDefaultInstance() {
}
class Map::_Internal {
 public:
  using HasBits = decltype(std::declval<Map>()._has_bits_);
};

Map::Map()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      map_features_(from.map_features_),
      dynamic_states_(from.dynamic_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Map)
}

void Map::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Map_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Map)
  SharedDtor();
}

void Map::SharedDtor() {
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Map& Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Map_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_features_.Clear();
  dynamic_states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.MapFeature map_features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.DynamicState dynamic_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dynamic_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Map::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Map)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.MapFeature map_features = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.DynamicState dynamic_states = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dynamic_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Map)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Map::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapFeature map_features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_features_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_features(static_cast<int>(i)),
      output);
  }

  // repeated .waymo.open_dataset.DynamicState dynamic_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dynamic_states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Map)
}

::PROTOBUF_NAMESPACE_ID::uint8* Map::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapFeature map_features = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_features_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_features(static_cast<int>(i)), target);
  }

  // repeated .waymo.open_dataset.DynamicState dynamic_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dynamic_states(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Map)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapFeature map_features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map_features(static_cast<int>(i)));
    }
  }

  // repeated .waymo.open_dataset.DynamicState dynamic_states = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dynamic_states(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_features_.MergeFrom(from.map_features_);
  dynamic_states_.MergeFrom(from.dynamic_states_);
}

void Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&map_features_)->InternalSwap(CastToBase(&other->map_features_));
  CastToBase(&dynamic_states_)->InternalSwap(CastToBase(&other->dynamic_states_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicState::InitAsDefaultInstance() {
}
class DynamicState::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicState>()._has_bits_);
  static void set_has_timestamp_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DynamicState::DynamicState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.DynamicState)
}
DynamicState::DynamicState(const DynamicState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lane_states_(from.lane_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_seconds_ = from.timestamp_seconds_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.DynamicState)
}

void DynamicState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  timestamp_seconds_ = 0;
}

DynamicState::~DynamicState() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.DynamicState)
  SharedDtor();
}

void DynamicState::SharedDtor() {
}

void DynamicState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicState& DynamicState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void DynamicState::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.DynamicState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_states_.Clear();
  timestamp_seconds_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DynamicState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double timestamp_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_timestamp_seconds(&has_bits);
          timestamp_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.TrafficSignalLaneState lane_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DynamicState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.DynamicState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_seconds = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_timestamp_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.TrafficSignalLaneState lane_states = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.DynamicState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.DynamicState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DynamicState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.DynamicState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->timestamp_seconds(), output);
  }

  // repeated .waymo.open_dataset.TrafficSignalLaneState lane_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lane_states(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.DynamicState)
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.DynamicState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_seconds(), target);
  }

  // repeated .waymo.open_dataset.TrafficSignalLaneState lane_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_states_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_states(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.DynamicState)
  return target;
}

size_t DynamicState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.DynamicState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.TrafficSignalLaneState lane_states = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_states(static_cast<int>(i)));
    }
  }

  // optional double timestamp_seconds = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.DynamicState)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.DynamicState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.DynamicState)
    MergeFrom(*source);
  }
}

void DynamicState::MergeFrom(const DynamicState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.DynamicState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_states_.MergeFrom(from.lane_states_);
  if (from.has_timestamp_seconds()) {
    set_timestamp_seconds(from.timestamp_seconds());
  }
}

void DynamicState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.DynamicState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicState::CopyFrom(const DynamicState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.DynamicState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicState::IsInitialized() const {
  return true;
}

void DynamicState::InternalSwap(DynamicState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&lane_states_)->InternalSwap(CastToBase(&other->lane_states_));
  swap(timestamp_seconds_, other->timestamp_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSignalLaneState::InitAsDefaultInstance() {
  ::waymo::open_dataset::_TrafficSignalLaneState_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::waymo::open_dataset::MapPoint*>(
      ::waymo::open_dataset::MapPoint::internal_default_instance());
}
class TrafficSignalLaneState::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficSignalLaneState>()._has_bits_);
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::waymo::open_dataset::MapPoint& stop_point(const TrafficSignalLaneState* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::waymo::open_dataset::MapPoint&
TrafficSignalLaneState::_Internal::stop_point(const TrafficSignalLaneState* msg) {
  return *msg->stop_point_;
}
TrafficSignalLaneState::TrafficSignalLaneState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.TrafficSignalLaneState)
}
TrafficSignalLaneState::TrafficSignalLaneState(const TrafficSignalLaneState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_point()) {
    stop_point_ = new ::waymo::open_dataset::MapPoint(*from.stop_point_);
  } else {
    stop_point_ = nullptr;
  }
  ::memcpy(&lane_, &from.lane_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&lane_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.TrafficSignalLaneState)
}

void TrafficSignalLaneState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(state_));
}

TrafficSignalLaneState::~TrafficSignalLaneState() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.TrafficSignalLaneState)
  SharedDtor();
}

void TrafficSignalLaneState::SharedDtor() {
  if (this != internal_default_instance()) delete stop_point_;
}

void TrafficSignalLaneState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignalLaneState& TrafficSignalLaneState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignalLaneState_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignalLaneState::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.TrafficSignalLaneState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stop_point_ != nullptr);
    stop_point_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lane_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&lane_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSignalLaneState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.TrafficSignalLaneState.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::TrafficSignalLaneState_State_IsValid(val))) {
            set_state(static_cast<::waymo::open_dataset::TrafficSignalLaneState_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.MapPoint stop_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_stop_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSignalLaneState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.TrafficSignalLaneState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lane = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_lane(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.TrafficSignalLaneState.State state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::TrafficSignalLaneState_State_IsValid(value)) {
            set_state(static_cast< ::waymo::open_dataset::TrafficSignalLaneState_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.MapPoint stop_point = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.TrafficSignalLaneState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.TrafficSignalLaneState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSignalLaneState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.TrafficSignalLaneState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lane = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lane(), output);
  }

  // optional .waymo.open_dataset.TrafficSignalLaneState.State state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional .waymo.open_dataset.MapPoint stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::stop_point(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.TrafficSignalLaneState)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignalLaneState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.TrafficSignalLaneState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lane = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lane(), target);
  }

  // optional .waymo.open_dataset.TrafficSignalLaneState.State state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional .waymo.open_dataset.MapPoint stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::stop_point(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.TrafficSignalLaneState)
  return target;
}

size_t TrafficSignalLaneState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.TrafficSignalLaneState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .waymo.open_dataset.MapPoint stop_point = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stop_point_);
    }

    // optional int64 lane = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lane());
    }

    // optional .waymo.open_dataset.TrafficSignalLaneState.State state = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignalLaneState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.TrafficSignalLaneState)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignalLaneState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignalLaneState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.TrafficSignalLaneState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.TrafficSignalLaneState)
    MergeFrom(*source);
  }
}

void TrafficSignalLaneState::MergeFrom(const TrafficSignalLaneState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.TrafficSignalLaneState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stop_point()->::waymo::open_dataset::MapPoint::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficSignalLaneState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.TrafficSignalLaneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignalLaneState::CopyFrom(const TrafficSignalLaneState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.TrafficSignalLaneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignalLaneState::IsInitialized() const {
  return true;
}

void TrafficSignalLaneState::InternalSwap(TrafficSignalLaneState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stop_point_, other->stop_point_);
  swap(lane_, other->lane_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignalLaneState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapFeature::InitAsDefaultInstance() {
  ::waymo::open_dataset::_MapFeature_default_instance_.lane_ = const_cast< ::waymo::open_dataset::LaneCenter*>(
      ::waymo::open_dataset::LaneCenter::internal_default_instance());
  ::waymo::open_dataset::_MapFeature_default_instance_.road_line_ = const_cast< ::waymo::open_dataset::RoadLine*>(
      ::waymo::open_dataset::RoadLine::internal_default_instance());
  ::waymo::open_dataset::_MapFeature_default_instance_.road_edge_ = const_cast< ::waymo::open_dataset::RoadEdge*>(
      ::waymo::open_dataset::RoadEdge::internal_default_instance());
  ::waymo::open_dataset::_MapFeature_default_instance_.stop_sign_ = const_cast< ::waymo::open_dataset::StopSign*>(
      ::waymo::open_dataset::StopSign::internal_default_instance());
  ::waymo::open_dataset::_MapFeature_default_instance_.crosswalk_ = const_cast< ::waymo::open_dataset::Crosswalk*>(
      ::waymo::open_dataset::Crosswalk::internal_default_instance());
  ::waymo::open_dataset::_MapFeature_default_instance_.speed_bump_ = const_cast< ::waymo::open_dataset::SpeedBump*>(
      ::waymo::open_dataset::SpeedBump::internal_default_instance());
}
class MapFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<MapFeature>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::waymo::open_dataset::LaneCenter& lane(const MapFeature* msg);
  static const ::waymo::open_dataset::RoadLine& road_line(const MapFeature* msg);
  static const ::waymo::open_dataset::RoadEdge& road_edge(const MapFeature* msg);
  static const ::waymo::open_dataset::StopSign& stop_sign(const MapFeature* msg);
  static const ::waymo::open_dataset::Crosswalk& crosswalk(const MapFeature* msg);
  static const ::waymo::open_dataset::SpeedBump& speed_bump(const MapFeature* msg);
};

const ::waymo::open_dataset::LaneCenter&
MapFeature::_Internal::lane(const MapFeature* msg) {
  return *msg->feature_data_.lane_;
}
const ::waymo::open_dataset::RoadLine&
MapFeature::_Internal::road_line(const MapFeature* msg) {
  return *msg->feature_data_.road_line_;
}
const ::waymo::open_dataset::RoadEdge&
MapFeature::_Internal::road_edge(const MapFeature* msg) {
  return *msg->feature_data_.road_edge_;
}
const ::waymo::open_dataset::StopSign&
MapFeature::_Internal::stop_sign(const MapFeature* msg) {
  return *msg->feature_data_.stop_sign_;
}
const ::waymo::open_dataset::Crosswalk&
MapFeature::_Internal::crosswalk(const MapFeature* msg) {
  return *msg->feature_data_.crosswalk_;
}
const ::waymo::open_dataset::SpeedBump&
MapFeature::_Internal::speed_bump(const MapFeature* msg) {
  return *msg->feature_data_.speed_bump_;
}
void MapFeature::set_allocated_lane(::waymo::open_dataset::LaneCenter* lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_data();
  if (lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane, submessage_arena);
    }
    set_has_lane();
    feature_data_.lane_ = lane;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MapFeature.lane)
}
void MapFeature::set_allocated_road_line(::waymo::open_dataset::RoadLine* road_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_data();
  if (road_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      road_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, road_line, submessage_arena);
    }
    set_has_road_line();
    feature_data_.road_line_ = road_line;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MapFeature.road_line)
}
void MapFeature::set_allocated_road_edge(::waymo::open_dataset::RoadEdge* road_edge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_data();
  if (road_edge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      road_edge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, road_edge, submessage_arena);
    }
    set_has_road_edge();
    feature_data_.road_edge_ = road_edge;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MapFeature.road_edge)
}
void MapFeature::set_allocated_stop_sign(::waymo::open_dataset::StopSign* stop_sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_data();
  if (stop_sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop_sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_sign, submessage_arena);
    }
    set_has_stop_sign();
    feature_data_.stop_sign_ = stop_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MapFeature.stop_sign)
}
void MapFeature::set_allocated_crosswalk(::waymo::open_dataset::Crosswalk* crosswalk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_data();
  if (crosswalk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crosswalk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosswalk, submessage_arena);
    }
    set_has_crosswalk();
    feature_data_.crosswalk_ = crosswalk;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MapFeature.crosswalk)
}
void MapFeature::set_allocated_speed_bump(::waymo::open_dataset::SpeedBump* speed_bump) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_data();
  if (speed_bump) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_bump = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_bump, submessage_arena);
    }
    set_has_speed_bump();
    feature_data_.speed_bump_ = speed_bump;
  }
  // @@protoc_insertion_point(field_set_allocated:waymo.open_dataset.MapFeature.speed_bump)
}
MapFeature::MapFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MapFeature)
}
MapFeature::MapFeature(const MapFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  clear_has_feature_data();
  switch (from.feature_data_case()) {
    case kLane: {
      mutable_lane()->::waymo::open_dataset::LaneCenter::MergeFrom(from.lane());
      break;
    }
    case kRoadLine: {
      mutable_road_line()->::waymo::open_dataset::RoadLine::MergeFrom(from.road_line());
      break;
    }
    case kRoadEdge: {
      mutable_road_edge()->::waymo::open_dataset::RoadEdge::MergeFrom(from.road_edge());
      break;
    }
    case kStopSign: {
      mutable_stop_sign()->::waymo::open_dataset::StopSign::MergeFrom(from.stop_sign());
      break;
    }
    case kCrosswalk: {
      mutable_crosswalk()->::waymo::open_dataset::Crosswalk::MergeFrom(from.crosswalk());
      break;
    }
    case kSpeedBump: {
      mutable_speed_bump()->::waymo::open_dataset::SpeedBump::MergeFrom(from.speed_bump());
      break;
    }
    case FEATURE_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MapFeature)
}

void MapFeature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  id_ = PROTOBUF_LONGLONG(0);
  clear_has_feature_data();
}

MapFeature::~MapFeature() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MapFeature)
  SharedDtor();
}

void MapFeature::SharedDtor() {
  if (has_feature_data()) {
    clear_feature_data();
  }
}

void MapFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapFeature& MapFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapFeature_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void MapFeature::clear_feature_data() {
// @@protoc_insertion_point(one_of_clear_start:waymo.open_dataset.MapFeature)
  switch (feature_data_case()) {
    case kLane: {
      delete feature_data_.lane_;
      break;
    }
    case kRoadLine: {
      delete feature_data_.road_line_;
      break;
    }
    case kRoadEdge: {
      delete feature_data_.road_edge_;
      break;
    }
    case kStopSign: {
      delete feature_data_.stop_sign_;
      break;
    }
    case kCrosswalk: {
      delete feature_data_.crosswalk_;
      break;
    }
    case kSpeedBump: {
      delete feature_data_.speed_bump_;
      break;
    }
    case FEATURE_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_DATA_NOT_SET;
}


void MapFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MapFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  clear_feature_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.LaneCenter lane = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.RoadLine road_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_road_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.RoadEdge road_edge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_road_edge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.StopSign stop_sign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.Crosswalk crosswalk = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_crosswalk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.SpeedBump speed_bump = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_speed_bump(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapFeature::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MapFeature)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.LaneCenter lane = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.RoadLine road_line = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_road_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.RoadEdge road_edge = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_road_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.StopSign stop_sign = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.Crosswalk crosswalk = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.SpeedBump speed_bump = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_bump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MapFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MapFeature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapFeature::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MapFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  switch (feature_data_case()) {
    case kLane:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::lane(this), output);
      break;
    case kRoadLine:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::road_line(this), output);
      break;
    case kRoadEdge:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::road_edge(this), output);
      break;
    case kStopSign:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, _Internal::stop_sign(this), output);
      break;
    case kCrosswalk:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, _Internal::crosswalk(this), output);
      break;
    case kSpeedBump:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, _Internal::speed_bump(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MapFeature)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapFeature::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MapFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  switch (feature_data_case()) {
    case kLane:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::lane(this), target);
      break;
    case kRoadLine:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::road_line(this), target);
      break;
    case kRoadEdge:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::road_edge(this), target);
      break;
    case kStopSign:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, _Internal::stop_sign(this), target);
      break;
    case kCrosswalk:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, _Internal::crosswalk(this), target);
      break;
    case kSpeedBump:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, _Internal::speed_bump(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MapFeature)
  return target;
}

size_t MapFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MapFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  switch (feature_data_case()) {
    // optional .waymo.open_dataset.LaneCenter lane = 3;
    case kLane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_data_.lane_);
      break;
    }
    // optional .waymo.open_dataset.RoadLine road_line = 4;
    case kRoadLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_data_.road_line_);
      break;
    }
    // optional .waymo.open_dataset.RoadEdge road_edge = 5;
    case kRoadEdge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_data_.road_edge_);
      break;
    }
    // optional .waymo.open_dataset.StopSign stop_sign = 7;
    case kStopSign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_data_.stop_sign_);
      break;
    }
    // optional .waymo.open_dataset.Crosswalk crosswalk = 8;
    case kCrosswalk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_data_.crosswalk_);
      break;
    }
    // optional .waymo.open_dataset.SpeedBump speed_bump = 9;
    case kSpeedBump: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_data_.speed_bump_);
      break;
    }
    case FEATURE_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const MapFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MapFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MapFeature)
    MergeFrom(*source);
  }
}

void MapFeature::MergeFrom(const MapFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
  switch (from.feature_data_case()) {
    case kLane: {
      mutable_lane()->::waymo::open_dataset::LaneCenter::MergeFrom(from.lane());
      break;
    }
    case kRoadLine: {
      mutable_road_line()->::waymo::open_dataset::RoadLine::MergeFrom(from.road_line());
      break;
    }
    case kRoadEdge: {
      mutable_road_edge()->::waymo::open_dataset::RoadEdge::MergeFrom(from.road_edge());
      break;
    }
    case kStopSign: {
      mutable_stop_sign()->::waymo::open_dataset::StopSign::MergeFrom(from.stop_sign());
      break;
    }
    case kCrosswalk: {
      mutable_crosswalk()->::waymo::open_dataset::Crosswalk::MergeFrom(from.crosswalk());
      break;
    }
    case kSpeedBump: {
      mutable_speed_bump()->::waymo::open_dataset::SpeedBump::MergeFrom(from.speed_bump());
      break;
    }
    case FEATURE_DATA_NOT_SET: {
      break;
    }
  }
}

void MapFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapFeature::CopyFrom(const MapFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapFeature::IsInitialized() const {
  return true;
}

void MapFeature::InternalSwap(MapFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(feature_data_, other->feature_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapPoint::InitAsDefaultInstance() {
}
class MapPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<MapPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MapPoint::MapPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.MapPoint)
}
MapPoint::MapPoint(const MapPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.MapPoint)
}

void MapPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

MapPoint::~MapPoint() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.MapPoint)
  SharedDtor();
}

void MapPoint::SharedDtor() {
}

void MapPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapPoint& MapPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapPoint_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void MapPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.MapPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.MapPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_z(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.MapPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.MapPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.MapPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.MapPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.MapPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.MapPoint)
  return target;
}

size_t MapPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.MapPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.MapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MapPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.MapPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.MapPoint)
    MergeFrom(*source);
  }
}

void MapPoint::MergeFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.MapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPoint::CopyFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPoint::IsInitialized() const {
  return true;
}

void MapPoint::InternalSwap(MapPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundarySegment::InitAsDefaultInstance() {
}
class BoundarySegment::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundarySegment>()._has_bits_);
  static void set_has_lane_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane_end_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_boundary_feature_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boundary_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BoundarySegment::BoundarySegment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.BoundarySegment)
}
BoundarySegment::BoundarySegment(const BoundarySegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_start_index_, &from.lane_start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&boundary_type_) -
    reinterpret_cast<char*>(&lane_start_index_)) + sizeof(boundary_type_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.BoundarySegment)
}

void BoundarySegment::SharedCtor() {
  ::memset(&lane_start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundary_type_) -
      reinterpret_cast<char*>(&lane_start_index_)) + sizeof(boundary_type_));
}

BoundarySegment::~BoundarySegment() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.BoundarySegment)
  SharedDtor();
}

void BoundarySegment::SharedDtor() {
}

void BoundarySegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundarySegment& BoundarySegment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundarySegment_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void BoundarySegment::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.BoundarySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&lane_start_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boundary_type_) -
        reinterpret_cast<char*>(&lane_start_index_)) + sizeof(boundary_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundarySegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 lane_start_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lane_start_index(&has_bits);
          lane_start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lane_end_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lane_end_index(&has_bits);
          lane_end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 boundary_feature_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_boundary_feature_id(&has_bits);
          boundary_feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.RoadLine.RoadLineType boundary_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::RoadLine_RoadLineType_IsValid(val))) {
            set_boundary_type(static_cast<::waymo::open_dataset::RoadLine_RoadLineType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundarySegment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.BoundarySegment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_start_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_lane_start_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lane_end_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_lane_end_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 boundary_feature_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_boundary_feature_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &boundary_feature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.RoadLine.RoadLineType boundary_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::RoadLine_RoadLineType_IsValid(value)) {
            set_boundary_type(static_cast< ::waymo::open_dataset::RoadLine_RoadLineType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.BoundarySegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.BoundarySegment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundarySegment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.BoundarySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_start_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->lane_start_index(), output);
  }

  // optional int32 lane_end_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->lane_end_index(), output);
  }

  // optional int64 boundary_feature_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->boundary_feature_id(), output);
  }

  // optional .waymo.open_dataset.RoadLine.RoadLineType boundary_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->boundary_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.BoundarySegment)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundarySegment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.BoundarySegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_start_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_start_index(), target);
  }

  // optional int32 lane_end_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->lane_end_index(), target);
  }

  // optional int64 boundary_feature_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->boundary_feature_id(), target);
  }

  // optional .waymo.open_dataset.RoadLine.RoadLineType boundary_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->boundary_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.BoundarySegment)
  return target;
}

size_t BoundarySegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.BoundarySegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 lane_start_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lane_start_index());
    }

    // optional int32 lane_end_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lane_end_index());
    }

    // optional int64 boundary_feature_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->boundary_feature_id());
    }

    // optional .waymo.open_dataset.RoadLine.RoadLineType boundary_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->boundary_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundarySegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.BoundarySegment)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundarySegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundarySegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.BoundarySegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.BoundarySegment)
    MergeFrom(*source);
  }
}

void BoundarySegment::MergeFrom(const BoundarySegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.BoundarySegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lane_start_index_ = from.lane_start_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      lane_end_index_ = from.lane_end_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      boundary_feature_id_ = from.boundary_feature_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      boundary_type_ = from.boundary_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundarySegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.BoundarySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundarySegment::CopyFrom(const BoundarySegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.BoundarySegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundarySegment::IsInitialized() const {
  return true;
}

void BoundarySegment::InternalSwap(BoundarySegment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lane_start_index_, other->lane_start_index_);
  swap(lane_end_index_, other->lane_end_index_);
  swap(boundary_feature_id_, other->boundary_feature_id_);
  swap(boundary_type_, other->boundary_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundarySegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneNeighbor::InitAsDefaultInstance() {
}
class LaneNeighbor::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneNeighbor>()._has_bits_);
  static void set_has_feature_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_self_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_self_end_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_neighbor_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_neighbor_end_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

LaneNeighbor::LaneNeighbor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.LaneNeighbor)
}
LaneNeighbor::LaneNeighbor(const LaneNeighbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      boundaries_(from.boundaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_id_, &from.feature_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&neighbor_end_index_) -
    reinterpret_cast<char*>(&feature_id_)) + sizeof(neighbor_end_index_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.LaneNeighbor)
}

void LaneNeighbor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  ::memset(&feature_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neighbor_end_index_) -
      reinterpret_cast<char*>(&feature_id_)) + sizeof(neighbor_end_index_));
}

LaneNeighbor::~LaneNeighbor() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.LaneNeighbor)
  SharedDtor();
}

void LaneNeighbor::SharedDtor() {
}

void LaneNeighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneNeighbor& LaneNeighbor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneNeighbor_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void LaneNeighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.LaneNeighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&feature_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&neighbor_end_index_) -
        reinterpret_cast<char*>(&feature_id_)) + sizeof(neighbor_end_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneNeighbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 feature_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_feature_id(&has_bits);
          feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 self_start_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_self_start_index(&has_bits);
          self_start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 self_end_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_self_end_index(&has_bits);
          self_end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 neighbor_start_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_neighbor_start_index(&has_bits);
          neighbor_start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 neighbor_end_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_neighbor_end_index(&has_bits);
          neighbor_end_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.BoundarySegment boundaries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_boundaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneNeighbor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.LaneNeighbor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 feature_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_feature_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &feature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 self_start_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_self_start_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 self_end_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_self_end_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 neighbor_start_index = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_neighbor_start_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &neighbor_start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 neighbor_end_index = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_neighbor_end_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &neighbor_end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.BoundarySegment boundaries = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_boundaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.LaneNeighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.LaneNeighbor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneNeighbor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.LaneNeighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 feature_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->feature_id(), output);
  }

  // optional int32 self_start_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->self_start_index(), output);
  }

  // optional int32 self_end_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->self_end_index(), output);
  }

  // optional int32 neighbor_start_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->neighbor_start_index(), output);
  }

  // optional int32 neighbor_end_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->neighbor_end_index(), output);
  }

  // repeated .waymo.open_dataset.BoundarySegment boundaries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundaries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->boundaries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.LaneNeighbor)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneNeighbor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.LaneNeighbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 feature_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->feature_id(), target);
  }

  // optional int32 self_start_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->self_start_index(), target);
  }

  // optional int32 self_end_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->self_end_index(), target);
  }

  // optional int32 neighbor_start_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->neighbor_start_index(), target);
  }

  // optional int32 neighbor_end_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->neighbor_end_index(), target);
  }

  // repeated .waymo.open_dataset.BoundarySegment boundaries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundaries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->boundaries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.LaneNeighbor)
  return target;
}

size_t LaneNeighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.LaneNeighbor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.BoundarySegment boundaries = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->boundaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->boundaries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 feature_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->feature_id());
    }

    // optional int32 self_start_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->self_start_index());
    }

    // optional int32 self_end_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->self_end_index());
    }

    // optional int32 neighbor_start_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->neighbor_start_index());
    }

    // optional int32 neighbor_end_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->neighbor_end_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneNeighbor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.LaneNeighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneNeighbor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneNeighbor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.LaneNeighbor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.LaneNeighbor)
    MergeFrom(*source);
  }
}

void LaneNeighbor::MergeFrom(const LaneNeighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.LaneNeighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundaries_.MergeFrom(from.boundaries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      feature_id_ = from.feature_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      self_start_index_ = from.self_start_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      self_end_index_ = from.self_end_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      neighbor_start_index_ = from.neighbor_start_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      neighbor_end_index_ = from.neighbor_end_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneNeighbor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.LaneNeighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneNeighbor::CopyFrom(const LaneNeighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.LaneNeighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneNeighbor::IsInitialized() const {
  return true;
}

void LaneNeighbor::InternalSwap(LaneNeighbor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&boundaries_)->InternalSwap(CastToBase(&other->boundaries_));
  swap(feature_id_, other->feature_id_);
  swap(self_start_index_, other->self_start_index_);
  swap(self_end_index_, other->self_end_index_);
  swap(neighbor_start_index_, other->neighbor_start_index_);
  swap(neighbor_end_index_, other->neighbor_end_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneNeighbor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneCenter::InitAsDefaultInstance() {
}
class LaneCenter::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneCenter>()._has_bits_);
  static void set_has_speed_limit_mph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_interpolating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LaneCenter::LaneCenter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.LaneCenter)
}
LaneCenter::LaneCenter(const LaneCenter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polyline_(from.polyline_),
      entry_lanes_(from.entry_lanes_),
      exit_lanes_(from.exit_lanes_),
      left_neighbors_(from.left_neighbors_),
      right_neighbors_(from.right_neighbors_),
      left_boundaries_(from.left_boundaries_),
      right_boundaries_(from.right_boundaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_limit_mph_, &from.speed_limit_mph_,
    static_cast<size_t>(reinterpret_cast<char*>(&interpolating_) -
    reinterpret_cast<char*>(&speed_limit_mph_)) + sizeof(interpolating_));
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.LaneCenter)
}

void LaneCenter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  ::memset(&speed_limit_mph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interpolating_) -
      reinterpret_cast<char*>(&speed_limit_mph_)) + sizeof(interpolating_));
}

LaneCenter::~LaneCenter() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.LaneCenter)
  SharedDtor();
}

void LaneCenter::SharedDtor() {
}

void LaneCenter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneCenter& LaneCenter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneCenter_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void LaneCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.LaneCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polyline_.Clear();
  entry_lanes_.Clear();
  exit_lanes_.Clear();
  left_neighbors_.Clear();
  right_neighbors_.Clear();
  left_boundaries_.Clear();
  right_boundaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&speed_limit_mph_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interpolating_) -
        reinterpret_cast<char*>(&speed_limit_mph_)) + sizeof(interpolating_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneCenter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double speed_limit_mph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_speed_limit_mph(&has_bits);
          speed_limit_mph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.LaneCenter.LaneType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::LaneCenter_LaneType_IsValid(val))) {
            set_type(static_cast<::waymo::open_dataset::LaneCenter_LaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool interpolating = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_interpolating(&has_bits);
          interpolating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.MapPoint polyline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_polyline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated int64 entry_lanes = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_entry_lanes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          add_entry_lanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 exit_lanes = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_exit_lanes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          add_exit_lanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.LaneNeighbor left_neighbors = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_left_neighbors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.LaneNeighbor right_neighbors = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_right_neighbors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.BoundarySegment left_boundaries = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_left_boundaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.BoundarySegment right_boundaries = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_right_boundaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneCenter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.LaneCenter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double speed_limit_mph = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_speed_limit_mph(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_mph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.LaneCenter.LaneType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::LaneCenter_LaneType_IsValid(value)) {
            set_type(static_cast< ::waymo::open_dataset::LaneCenter_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool interpolating = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_interpolating(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interpolating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.MapPoint polyline = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_polyline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 entry_lanes = 9 [packed = true];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_entry_lanes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 74u, input, this->mutable_entry_lanes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 exit_lanes = 10 [packed = true];
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_exit_lanes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 82u, input, this->mutable_exit_lanes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.LaneNeighbor left_neighbors = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left_neighbors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.LaneNeighbor right_neighbors = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right_neighbors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.BoundarySegment left_boundaries = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left_boundaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.BoundarySegment right_boundaries = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right_boundaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.LaneCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.LaneCenter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneCenter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.LaneCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed_limit_mph = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->speed_limit_mph(), output);
  }

  // optional .waymo.open_dataset.LaneCenter.LaneType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool interpolating = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->interpolating(), output);
  }

  // repeated .waymo.open_dataset.MapPoint polyline = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->polyline(static_cast<int>(i)),
      output);
  }

  // repeated int64 entry_lanes = 9 [packed = true];
  if (this->entry_lanes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_entry_lanes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->entry_lanes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->entry_lanes(i), output);
  }

  // repeated int64 exit_lanes = 10 [packed = true];
  if (this->exit_lanes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_exit_lanes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->exit_lanes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->exit_lanes(i), output);
  }

  // repeated .waymo.open_dataset.LaneNeighbor left_neighbors = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->left_neighbors(static_cast<int>(i)),
      output);
  }

  // repeated .waymo.open_dataset.LaneNeighbor right_neighbors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->right_neighbors(static_cast<int>(i)),
      output);
  }

  // repeated .waymo.open_dataset.BoundarySegment left_boundaries = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_boundaries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->left_boundaries(static_cast<int>(i)),
      output);
  }

  // repeated .waymo.open_dataset.BoundarySegment right_boundaries = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_boundaries_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->right_boundaries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.LaneCenter)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneCenter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.LaneCenter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed_limit_mph = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->speed_limit_mph(), target);
  }

  // optional .waymo.open_dataset.LaneCenter.LaneType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool interpolating = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->interpolating(), target);
  }

  // repeated .waymo.open_dataset.MapPoint polyline = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->polyline(static_cast<int>(i)), target);
  }

  // repeated int64 entry_lanes = 9 [packed = true];
  if (this->entry_lanes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      9,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _entry_lanes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->entry_lanes_, target);
  }

  // repeated int64 exit_lanes = 10 [packed = true];
  if (this->exit_lanes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _exit_lanes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->exit_lanes_, target);
  }

  // repeated .waymo.open_dataset.LaneNeighbor left_neighbors = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->left_neighbors(static_cast<int>(i)), target);
  }

  // repeated .waymo.open_dataset.LaneNeighbor right_neighbors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->right_neighbors(static_cast<int>(i)), target);
  }

  // repeated .waymo.open_dataset.BoundarySegment left_boundaries = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_boundaries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->left_boundaries(static_cast<int>(i)), target);
  }

  // repeated .waymo.open_dataset.BoundarySegment right_boundaries = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_boundaries_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->right_boundaries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.LaneCenter)
  return target;
}

size_t LaneCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.LaneCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polyline = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->polyline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->polyline(static_cast<int>(i)));
    }
  }

  // repeated int64 entry_lanes = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->entry_lanes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _entry_lanes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 exit_lanes = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->exit_lanes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _exit_lanes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .waymo.open_dataset.LaneNeighbor left_neighbors = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->left_neighbors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left_neighbors(static_cast<int>(i)));
    }
  }

  // repeated .waymo.open_dataset.LaneNeighbor right_neighbors = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->right_neighbors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right_neighbors(static_cast<int>(i)));
    }
  }

  // repeated .waymo.open_dataset.BoundarySegment left_boundaries = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->left_boundaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left_boundaries(static_cast<int>(i)));
    }
  }

  // repeated .waymo.open_dataset.BoundarySegment right_boundaries = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->right_boundaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right_boundaries(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double speed_limit_mph = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .waymo.open_dataset.LaneCenter.LaneType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool interpolating = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneCenter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.LaneCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneCenter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneCenter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.LaneCenter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.LaneCenter)
    MergeFrom(*source);
  }
}

void LaneCenter::MergeFrom(const LaneCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.LaneCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polyline_.MergeFrom(from.polyline_);
  entry_lanes_.MergeFrom(from.entry_lanes_);
  exit_lanes_.MergeFrom(from.exit_lanes_);
  left_neighbors_.MergeFrom(from.left_neighbors_);
  right_neighbors_.MergeFrom(from.right_neighbors_);
  left_boundaries_.MergeFrom(from.left_boundaries_);
  right_boundaries_.MergeFrom(from.right_boundaries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      speed_limit_mph_ = from.speed_limit_mph_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      interpolating_ = from.interpolating_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneCenter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.LaneCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneCenter::CopyFrom(const LaneCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.LaneCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneCenter::IsInitialized() const {
  return true;
}

void LaneCenter::InternalSwap(LaneCenter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&polyline_)->InternalSwap(CastToBase(&other->polyline_));
  entry_lanes_.InternalSwap(&other->entry_lanes_);
  exit_lanes_.InternalSwap(&other->exit_lanes_);
  CastToBase(&left_neighbors_)->InternalSwap(CastToBase(&other->left_neighbors_));
  CastToBase(&right_neighbors_)->InternalSwap(CastToBase(&other->right_neighbors_));
  CastToBase(&left_boundaries_)->InternalSwap(CastToBase(&other->left_boundaries_));
  CastToBase(&right_boundaries_)->InternalSwap(CastToBase(&other->right_boundaries_));
  swap(speed_limit_mph_, other->speed_limit_mph_);
  swap(type_, other->type_);
  swap(interpolating_, other->interpolating_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneCenter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadEdge::InitAsDefaultInstance() {
}
class RoadEdge::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadEdge>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoadEdge::RoadEdge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.RoadEdge)
}
RoadEdge::RoadEdge(const RoadEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polyline_(from.polyline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.RoadEdge)
}

void RoadEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  type_ = 0;
}

RoadEdge::~RoadEdge() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.RoadEdge)
  SharedDtor();
}

void RoadEdge::SharedDtor() {
}

void RoadEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadEdge& RoadEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadEdge_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void RoadEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.RoadEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polyline_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.RoadEdge.RoadEdgeType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::RoadEdge_RoadEdgeType_IsValid(val))) {
            set_type(static_cast<::waymo::open_dataset::RoadEdge_RoadEdgeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.MapPoint polyline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_polyline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadEdge::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.RoadEdge)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.RoadEdge.RoadEdgeType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::RoadEdge_RoadEdgeType_IsValid(value)) {
            set_type(static_cast< ::waymo::open_dataset::RoadEdge_RoadEdgeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.MapPoint polyline = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_polyline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.RoadEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.RoadEdge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadEdge::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.RoadEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.RoadEdge.RoadEdgeType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .waymo.open_dataset.MapPoint polyline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polyline(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.RoadEdge)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadEdge::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.RoadEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.RoadEdge.RoadEdgeType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .waymo.open_dataset.MapPoint polyline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polyline(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.RoadEdge)
  return target;
}

size_t RoadEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.RoadEdge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polyline = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polyline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->polyline(static_cast<int>(i)));
    }
  }

  // optional .waymo.open_dataset.RoadEdge.RoadEdgeType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.RoadEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.RoadEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.RoadEdge)
    MergeFrom(*source);
  }
}

void RoadEdge::MergeFrom(const RoadEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.RoadEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polyline_.MergeFrom(from.polyline_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void RoadEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.RoadEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadEdge::CopyFrom(const RoadEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.RoadEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadEdge::IsInitialized() const {
  return true;
}

void RoadEdge::InternalSwap(RoadEdge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&polyline_)->InternalSwap(CastToBase(&other->polyline_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadLine::InitAsDefaultInstance() {
}
class RoadLine::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadLine>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoadLine::RoadLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.RoadLine)
}
RoadLine::RoadLine(const RoadLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polyline_(from.polyline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.RoadLine)
}

void RoadLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  type_ = 0;
}

RoadLine::~RoadLine() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.RoadLine)
  SharedDtor();
}

void RoadLine::SharedDtor() {
}

void RoadLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadLine& RoadLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadLine_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void RoadLine::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.RoadLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polyline_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .waymo.open_dataset.RoadLine.RoadLineType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::waymo::open_dataset::RoadLine_RoadLineType_IsValid(val))) {
            set_type(static_cast<::waymo::open_dataset::RoadLine_RoadLineType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .waymo.open_dataset.MapPoint polyline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_polyline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadLine::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.RoadLine)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .waymo.open_dataset.RoadLine.RoadLineType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::waymo::open_dataset::RoadLine_RoadLineType_IsValid(value)) {
            set_type(static_cast< ::waymo::open_dataset::RoadLine_RoadLineType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .waymo.open_dataset.MapPoint polyline = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_polyline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.RoadLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.RoadLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadLine::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.RoadLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.RoadLine.RoadLineType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .waymo.open_dataset.MapPoint polyline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polyline(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.RoadLine)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadLine::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.RoadLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.RoadLine.RoadLineType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .waymo.open_dataset.MapPoint polyline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polyline(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.RoadLine)
  return target;
}

size_t RoadLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.RoadLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polyline = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polyline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->polyline(static_cast<int>(i)));
    }
  }

  // optional .waymo.open_dataset.RoadLine.RoadLineType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.RoadLine)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.RoadLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.RoadLine)
    MergeFrom(*source);
  }
}

void RoadLine::MergeFrom(const RoadLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.RoadLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polyline_.MergeFrom(from.polyline_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void RoadLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.RoadLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadLine::CopyFrom(const RoadLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.RoadLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadLine::IsInitialized() const {
  return true;
}

void RoadLine::InternalSwap(RoadLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&polyline_)->InternalSwap(CastToBase(&other->polyline_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopSign::InitAsDefaultInstance() {
  ::waymo::open_dataset::_StopSign_default_instance_._instance.get_mutable()->position_ = const_cast< ::waymo::open_dataset::MapPoint*>(
      ::waymo::open_dataset::MapPoint::internal_default_instance());
}
class StopSign::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSign>()._has_bits_);
  static const ::waymo::open_dataset::MapPoint& position(const StopSign* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::waymo::open_dataset::MapPoint&
StopSign::_Internal::position(const StopSign* msg) {
  return *msg->position_;
}
StopSign::StopSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.StopSign)
}
StopSign::StopSign(const StopSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lane_(from.lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::waymo::open_dataset::MapPoint(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.StopSign)
}

void StopSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  position_ = nullptr;
}

StopSign::~StopSign() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.StopSign)
  SharedDtor();
}

void StopSign::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void StopSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopSign& StopSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopSign_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void StopSign::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.StopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_lane(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_lane(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .waymo.open_dataset.MapPoint position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.StopSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 lane = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_lane())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_lane())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .waymo.open_dataset.MapPoint position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.StopSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.StopSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.StopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 lane = 1;
  for (int i = 0, n = this->lane_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      1, this->lane(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.MapPoint position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.StopSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.StopSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 lane = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt64ToArray(1, this->lane_, target);

  cached_has_bits = _has_bits_[0];
  // optional .waymo.open_dataset.MapPoint position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.StopSign)
  return target;
}

size_t StopSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.StopSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 lane = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->lane_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->lane_size());
    total_size += data_size;
  }

  // optional .waymo.open_dataset.MapPoint position = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.StopSign)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.StopSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.StopSign)
    MergeFrom(*source);
  }
}

void StopSign::MergeFrom(const StopSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.StopSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_.MergeFrom(from.lane_);
  if (from.has_position()) {
    mutable_position()->::waymo::open_dataset::MapPoint::MergeFrom(from.position());
  }
}

void StopSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.StopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSign::CopyFrom(const StopSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.StopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSign::IsInitialized() const {
  return true;
}

void StopSign::InternalSwap(StopSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lane_.InternalSwap(&other->lane_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Crosswalk::InitAsDefaultInstance() {
}
class Crosswalk::_Internal {
 public:
  using HasBits = decltype(std::declval<Crosswalk>()._has_bits_);
};

Crosswalk::Crosswalk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.Crosswalk)
}
Crosswalk::Crosswalk(const Crosswalk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.Crosswalk)
}

void Crosswalk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
}

Crosswalk::~Crosswalk() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.Crosswalk)
  SharedDtor();
}

void Crosswalk::SharedDtor() {
}

void Crosswalk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Crosswalk& Crosswalk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Crosswalk_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void Crosswalk::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.Crosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Crosswalk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.MapPoint polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Crosswalk::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.Crosswalk)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.MapPoint polygon = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.Crosswalk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.Crosswalk)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Crosswalk::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.Crosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polygon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->polygon(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.Crosswalk)
}

::PROTOBUF_NAMESPACE_ID::uint8* Crosswalk::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.Crosswalk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polygon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->polygon(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.Crosswalk)
  return target;
}

size_t Crosswalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.Crosswalk)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polygon = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->polygon(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Crosswalk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.Crosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  const Crosswalk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Crosswalk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.Crosswalk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.Crosswalk)
    MergeFrom(*source);
  }
}

void Crosswalk::MergeFrom(const Crosswalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.Crosswalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
}

void Crosswalk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.Crosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crosswalk::CopyFrom(const Crosswalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.Crosswalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crosswalk::IsInitialized() const {
  return true;
}

void Crosswalk::InternalSwap(Crosswalk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&polygon_)->InternalSwap(CastToBase(&other->polygon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Crosswalk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedBump::InitAsDefaultInstance() {
}
class SpeedBump::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedBump>()._has_bits_);
};

SpeedBump::SpeedBump()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:waymo.open_dataset.SpeedBump)
}
SpeedBump::SpeedBump(const SpeedBump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:waymo.open_dataset.SpeedBump)
}

void SpeedBump::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
}

SpeedBump::~SpeedBump() {
  // @@protoc_insertion_point(destructor:waymo.open_dataset.SpeedBump)
  SharedDtor();
}

void SpeedBump::SharedDtor() {
}

void SpeedBump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedBump& SpeedBump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedBump_waymo_5fopen_5fdataset_2fprotos_2fmap_2eproto.base);
  return *internal_default_instance();
}


void SpeedBump::Clear() {
// @@protoc_insertion_point(message_clear_start:waymo.open_dataset.SpeedBump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeedBump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .waymo.open_dataset.MapPoint polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeedBump::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:waymo.open_dataset.SpeedBump)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .waymo.open_dataset.MapPoint polygon = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:waymo.open_dataset.SpeedBump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:waymo.open_dataset.SpeedBump)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeedBump::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:waymo.open_dataset.SpeedBump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polygon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->polygon(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:waymo.open_dataset.SpeedBump)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedBump::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:waymo.open_dataset.SpeedBump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polygon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->polygon(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:waymo.open_dataset.SpeedBump)
  return target;
}

size_t SpeedBump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:waymo.open_dataset.SpeedBump)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .waymo.open_dataset.MapPoint polygon = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->polygon(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedBump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:waymo.open_dataset.SpeedBump)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedBump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedBump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:waymo.open_dataset.SpeedBump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:waymo.open_dataset.SpeedBump)
    MergeFrom(*source);
  }
}

void SpeedBump::MergeFrom(const SpeedBump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:waymo.open_dataset.SpeedBump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
}

void SpeedBump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:waymo.open_dataset.SpeedBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedBump::CopyFrom(const SpeedBump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:waymo.open_dataset.SpeedBump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedBump::IsInitialized() const {
  return true;
}

void SpeedBump::InternalSwap(SpeedBump* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&polygon_)->InternalSwap(CastToBase(&other->polygon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedBump::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace open_dataset
}  // namespace waymo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Map* Arena::CreateMaybeMessage< ::waymo::open_dataset::Map >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::DynamicState* Arena::CreateMaybeMessage< ::waymo::open_dataset::DynamicState >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::DynamicState >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::TrafficSignalLaneState* Arena::CreateMaybeMessage< ::waymo::open_dataset::TrafficSignalLaneState >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::TrafficSignalLaneState >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MapFeature* Arena::CreateMaybeMessage< ::waymo::open_dataset::MapFeature >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MapFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::MapPoint* Arena::CreateMaybeMessage< ::waymo::open_dataset::MapPoint >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::MapPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::BoundarySegment* Arena::CreateMaybeMessage< ::waymo::open_dataset::BoundarySegment >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::BoundarySegment >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::LaneNeighbor* Arena::CreateMaybeMessage< ::waymo::open_dataset::LaneNeighbor >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::LaneNeighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::LaneCenter* Arena::CreateMaybeMessage< ::waymo::open_dataset::LaneCenter >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::LaneCenter >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::RoadEdge* Arena::CreateMaybeMessage< ::waymo::open_dataset::RoadEdge >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::RoadEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::RoadLine* Arena::CreateMaybeMessage< ::waymo::open_dataset::RoadLine >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::RoadLine >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::StopSign* Arena::CreateMaybeMessage< ::waymo::open_dataset::StopSign >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::StopSign >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::Crosswalk* Arena::CreateMaybeMessage< ::waymo::open_dataset::Crosswalk >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::Crosswalk >(arena);
}
template<> PROTOBUF_NOINLINE ::waymo::open_dataset::SpeedBump* Arena::CreateMaybeMessage< ::waymo::open_dataset::SpeedBump >(Arena* arena) {
  return Arena::CreateInternal< ::waymo::open_dataset::SpeedBump >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
